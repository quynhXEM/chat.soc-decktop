{"version":3,"file":"matrix-sdk-crypto-wasm-D9e1T4vy.js","sources":["../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js","../../node_modules/@matrix-org/matrix-sdk-crypto-wasm/index.mjs"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure29_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h01b499ad5cb75280(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure734_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1, arg2) {\n    wasm.closure414_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_70(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd1a2ce9a4f62ec0e(arg0, arg1);\n}\n\nfunction __wbg_adapter_761(arg0, arg1, arg2, arg3) {\n    wasm.closure430_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_String_eecc4a11987127d6(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_8edd10d3d6b2631b(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_c5c48c1ca56731d8(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_6550b2c093d2eb18(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_1643c3c2890128ab(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_761(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3807d5f0bfc24aa7(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_f4783a0419527b21(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1048(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2227(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 409, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5458(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 409, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6924(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 415, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6929(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 415, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n","// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entrypoint on non-node ESM environments.\n * `asyncLoad` will load the WASM module using a `fetch` call.\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\nconst moduleUrl = new URL(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\", import.meta.url);\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    const { instance } = await WebAssembly.instantiateStreaming(fetch(moduleUrl), {\n        // @ts-expect-error: The bindings don't exactly match the 'ExportValue' type\n        \"./matrix_sdk_crypto_wasm_bg.js\": bindings,\n    });\n\n    bindings.__wbg_set_wasm(instance.exports);\n    // @ts-expect-error: Typescript doesn't know what the module exports are\n    instance.exports.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n"],"names":["wasm","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","lTextEncoder","cachedTextEncoder","encodeString","arg","view","buf","passStringToWasm0","malloc","realloc","ptr","len","mem","offset","code","ret","cachedDataViewMemory0","getDataViewMemory0","addToExternrefTable0","obj","idx","handleError","f","args","e","lTextDecoder","cachedTextDecoder","getStringFromWasm0","isLikeNone","x","CLOSURE_DTORS","state","makeMutClosure","arg0","arg1","dtor","real","a","makeClosure","debugString","type","description","name","length","debug","i","builtInMatches","className","passArray8ToWasm0","takeFromExternrefTable0","value","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","add","getArrayJsValueFromWasm0","result","cachedUint16ArrayMemory0","getUint16ArrayMemory0","getArrayU16FromWasm0","getVersions","Versions","start","__wbg_adapter_58","arg2","__wbg_adapter_61","__wbg_adapter_64","__wbg_adapter_67","__wbg_adapter_70","__wbg_adapter_761","arg3","DecryptionErrorCode","DeviceKeyAlgorithmName","DeviceKeyName","EncryptionAlgorithm","HistoryVisibility","LocalTrust","LoggerLevel","QrCodeMode","QrState","RequestType","ShieldColor","ShieldStateCode","SignatureState","TrustRequirement","VerificationMethod","VerificationRequestPhase","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","AttachmentFinalization","Attachment","ptr0","len0","EncryptedAttachment","attachment","v1","BackupDecryptionKeyFinalization","BackupDecryptionKey","key","MegolmV1BackupKey","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","ptr4","len4","BackupKeysFinalization","BackupKeys","BackupSecretsBundleFinalization","BackupSecretsBundle","deferred1_0","deferred1_1","BaseMigrationDataFinalization","BaseMigrationData","UserId","DeviceId","CancelInfoFinalization","CancelInfo","CheckCodeFinalization","CheckCode","CollectStrategyFinalization","CollectStrategy","other","only_allow_trusted_devices","error_on_verified_user_problem","CrossSigningBootstrapRequestsFinalization","CrossSigningBootstrapRequests","UploadSigningKeysRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","CrossSigningKeyExport","CrossSigningStatusFinalization","CrossSigningStatus","Curve25519PublicKeyFinalization","Curve25519PublicKey","DecryptedRoomEventFinalization","DecryptedRoomEvent","strict","ShieldState","DecryptionSettingsFinalization","DecryptionSettings","sender_device_trust_requirement","DehydratedDeviceFinalization","DehydratedDevice","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","DehydratedDeviceKeyFinalization","DehydratedDevicesFinalization","DehydratedDevices","device_id","device_data","DeviceFinalization","Device","methods","event_type","content","local_state","algorithm","DeviceKey","Ed25519PublicKey","Signatures","DeviceIdFinalization","id","DeviceKeyFinalization","DeviceKeyAlgorithmFinalization","DeviceKeyAlgorithm","DeviceKeyIdFinalization","DeviceKeyId","DeviceListsFinalization","DeviceLists","changed","left","EciesFinalization","Ecies","initial_message","InboundCreationResult","public_key","OutboundCreationResult","Ed25519PublicKeyFinalization","Ed25519SignatureFinalization","Ed25519Signature","signature","EmojiFinalization","Emoji","EncryptedAttachmentFinalization","encrypted_data","media_encryption_info","EncryptionInfoFinalization","EncryptionInfo","EncryptionSettingsFinalization","EncryptionSettings","EstablishedEciesFinalization","EstablishedEcies","message","deferred2_0","deferred2_1","deferred3_0","deferred3_1","EventIdFinalization","EventId","ServerName","IdentityKeysFinalization","IdentityKeys","InboundCreationResultFinalization","InboundGroupSessionFinalization","InboundGroupSession","RoomId","KeysBackupRequestFinalization","KeysBackupRequest","body","version","KeysClaimRequestFinalization","KeysClaimRequest","KeysQueryRequestFinalization","KeysQueryRequest","KeysUploadRequestFinalization","KeysUploadRequest","MaybeSignatureFinalization","MaybeSignature","Signature","MegolmDecryptionErrorFinalization","MegolmDecryptionError","MegolmV1BackupKeyFinalization","MigrationFinalization","Migration","data","pickle_key","store_handle","StoreHandle","sessions","OlmMachineFinalization","OlmMachine","user_id","store_name","store_passphrase","enabled","users","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","request_id","request_type","response","room_id","event","decryption_settings","bundle","SecretsBundle","master_key","self_signing_key","user_signing_key","reset","encryption_settings","timeout_secs","flow_id","VerificationRequest","predicate","exported_room_keys","progress_listener","backed_up_room_keys","backup_version","decryption_key","backup_info","public_key_base_64","passphrase","rounds","deferred4_0","deferred4_1","ptr3","len3","encrypted_exported_room_keys","callback","secret_name","room_settings","RoomSettings","OtherUserIdentityFinalization","OtherUserIdentity","request_event_id","OutboundCreationResultFinalization","OwnUserIdentityFinalization","OwnUserIdentity","PickledInboundGroupSessionFinalization","PickledInboundGroupSession","jsValue","PickledSessionFinalization","PickledSession","PutDehydratedDeviceRequestFinalization","PutDehydratedDeviceRequest","QrFinalization","Qr","QrCode","QrCodeFinalization","QrCodeDataFinalization","QrCodeData","rendezvous_url","server_name","bytes","QrCodeScanFinalization","QrCodeScan","buffer","RehydratedDeviceFinalization","RehydratedDevice","RoomIdFinalization","RoomKeyCountsFinalization","RoomKeyCounts","RoomKeyImportResultFinalization","RoomKeyImportResult","RoomKeyInfoFinalization","RoomKeyInfo","RoomKeyWithheldInfoFinalization","RoomKeyWithheldInfo","RoomMessageRequestFinalization","RoomMessageRequest","txn_id","RoomSettingsFinalization","SasFinalization","Sas","SecretsBundleFinalization","json","ServerNameFinalization","ShieldStateFinalization","SignatureFinalization","SignatureUploadRequestFinalization","signed_keys","SignatureVerificationFinalization","SignatureVerification","SignaturesFinalization","signer","key_id","StoreHandleFinalization","store_key","ToDeviceRequestFinalization","ToDeviceRequest","TracingFinalization","Tracing","min_level","UploadSigningKeysRequestFinalization","UserDevicesFinalization","UserDevices","UserIdFinalization","VerificationRequestFinalization","own_user_id","own_device_id","other_user_id","VersionsFinalization","__wbg_String_8f0eb39a4a4c2f66","__wbg_String_eecc4a11987127d6","__wbg_Window_b0044ac7db258535","__wbg_WorkerGlobalScope_b74cefefc62a37da","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","__wbg_at_7d852dd9f194d43e","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","__wbg_bound_f2afc3766d4545cf","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_ed58b8e10a292839","__wbg_debug_3cb59063b29f58c1","__wbg_debug_8edd10d3d6b2631b","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","__wbg_delete_200677093b4cf756","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_524f506f44df1645","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_c5c48c1ca56731d8","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","__wbg_getAllKeys_b11d8835dc4be0e8","__wbg_getAll_304e868beec2021f","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_bcb4912f16000dc4","__wbg_getTime_46267b1c24877e30","__wbg_get_67b2ba62fc30de12","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_getwithrefkey_6550b2c093d2eb18","__wbg_global_b6f5c73312f62313","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","__wbg_indexedDB_601ec26c63e333de","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_1643c3c2890128ab","__wbg_info_3daf2e093e091b66","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","__wbg_instanceof_Map_f3469ce2244d2430","__wbg_instanceof_Promise_935168b8f4b49db3","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","__wbg_item_c3c26b4103ad5aaf","__wbg_iterator_9a24c88df860dc65","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_0a36e2ec3a343d26","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","cb0","__wbg_new_31a97dac4f10fab7","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","__wbg_newnoargs_105ed471475aaf50","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","__wbg_next_25feadfc0913fea9","__wbg_next_6574e1a8a62d1055","__wbg_node_02999533c4ea02e3","__wbg_now_2c95c9de01293173","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","__wbg_objectStore_21878d46d25b64b6","__wbg_oldVersion_e8337811e52861c6","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","__wbg_performance_7a3ffd0b17f663ad","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_5c1d670bc53614b8","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ab2cfe79ebbf2740","__wbg_readyState_4013cfdf4f22afb0","__wbg_rehydrateddevice_new","__wbg_require_79b1e9274cde3c87","__wbg_resolve_4851785c9c5f573d","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","__wbg_set_37837023f3d740e8","__wbg_set_3807d5f0bfc24aa7","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","__wbg_setonblocked_aebf64bd39f1eca8","__wbg_setoncomplete_4d19df0dadb7c4d4","__wbg_setonerror_b0d9d723b8fddbbb","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","__wbg_setonversionchange_6ee07fa49ee1e3a5","__wbg_setunique_dd24c422aa05df89","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","__wbg_static_accessor_SELF_37c5d418e4bf5819","__wbg_static_accessor_WINDOW_5de37043a91a9c40","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","__wbg_then_44b73946d2fb3e7d","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c71aa1626a93e0a1","__wbg_warn_4ca3906c248c47c4","__wbg_warn_f4783a0419527b21","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","v","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1048","__wbindgen_closure_wrapper2227","__wbindgen_closure_wrapper5458","__wbindgen_closure_wrapper6924","__wbindgen_closure_wrapper6929","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number","moduleUrl","bindings.__wbg_set_wasm","modPromise","loadModuleAsync","bindings","initAsync"],"mappings":"yUAAA,IAAIA,EACG,SAASC,GAAeC,EAAK,CAChCF,EAAOE,CACX,CAGA,IAAIC,EAAkB,EAElBC,GAA0B,KAE9B,SAASC,GAAuB,CAC5B,OAAID,KAA4B,MAAQA,GAAwB,aAAe,KAC3EA,GAA0B,IAAI,WAAWJ,EAAK,OAAO,MAAM,GAExDI,EACX,CAEA,MAAME,GAAe,OAAO,YAAgB,OAAkB,OAAO,SAAS,MAAM,EAAE,YAAc,YAEpG,IAAIC,GAAoB,IAAID,GAAa,OAAO,EAEhD,MAAME,GAAgB,OAAOD,GAAkB,YAAe,WACxD,SAAUE,EAAKC,EAAM,CACvB,OAAOH,GAAkB,WAAWE,EAAKC,CAAI,CACjD,EACM,SAAUD,EAAKC,EAAM,CACvB,MAAMC,EAAMJ,GAAkB,OAAOE,CAAG,EACxC,OAAAC,EAAK,IAAIC,CAAG,EACL,CACH,KAAMF,EAAI,OACV,QAASE,EAAI,MAChB,CACL,EAEA,SAASC,EAAkBH,EAAKI,EAAQC,EAAS,CAE7C,GAAIA,IAAY,OAAW,CACvB,MAAMH,EAAMJ,GAAkB,OAAOE,CAAG,EAClCM,EAAMF,EAAOF,EAAI,OAAQ,CAAC,IAAM,EACtC,OAAAN,EAAsB,EAAC,SAASU,EAAKA,EAAMJ,EAAI,MAAM,EAAE,IAAIA,CAAG,EAC9DR,EAAkBQ,EAAI,OACfI,CACf,CAEI,IAAIC,EAAMP,EAAI,OACVM,EAAMF,EAAOG,EAAK,CAAC,IAAM,EAE7B,MAAMC,EAAMZ,EAAsB,EAElC,IAAIa,EAAS,EAEb,KAAOA,EAASF,EAAKE,IAAU,CAC3B,MAAMC,EAAOV,EAAI,WAAWS,CAAM,EAClC,GAAIC,EAAO,IAAM,MACjBF,EAAIF,EAAMG,CAAM,EAAIC,CAC5B,CAEI,GAAID,IAAWF,EAAK,CACZE,IAAW,IACXT,EAAMA,EAAI,MAAMS,CAAM,GAE1BH,EAAMD,EAAQC,EAAKC,EAAKA,EAAME,EAAST,EAAI,OAAS,EAAG,CAAC,IAAM,EAC9D,MAAMC,EAAOL,IAAuB,SAASU,EAAMG,EAAQH,EAAMC,CAAG,EAC9DI,EAAMZ,GAAaC,EAAKC,CAAI,EAElCQ,GAAUE,EAAI,QACdL,EAAMD,EAAQC,EAAKC,EAAKE,EAAQ,CAAC,IAAM,CAC/C,CAEI,OAAAf,EAAkBe,EACXH,CACX,CAEA,IAAIM,EAAwB,KAE5B,SAASC,GAAqB,CAC1B,OAAID,IAA0B,MAAQA,EAAsB,OAAO,WAAa,IAASA,EAAsB,OAAO,WAAa,QAAaA,EAAsB,SAAWrB,EAAK,OAAO,UACzLqB,EAAwB,IAAI,SAASrB,EAAK,OAAO,MAAM,GAEpDqB,CACX,CAEA,SAASE,EAAqBC,EAAK,CAC/B,MAAMC,EAAMzB,EAAK,wBAAyB,EAC1C,OAAAA,EAAK,oBAAoB,IAAIyB,EAAKD,CAAG,EAC9BC,CACX,CAEA,SAASC,EAAYC,EAAGC,EAAM,CAC1B,GAAI,CACA,OAAOD,EAAE,MAAM,KAAMC,CAAI,CAC5B,OAAQC,EAAG,CACR,MAAMJ,EAAMF,EAAqBM,CAAC,EAClC7B,EAAK,qBAAqByB,CAAG,CACrC,CACA,CAEA,MAAMK,GAAe,OAAO,YAAgB,OAAkB,OAAO,SAAS,MAAM,EAAE,YAAc,YAEpG,IAAIC,GAAoB,IAAID,GAAa,QAAS,CAAE,UAAW,GAAM,MAAO,GAAM,EAElFC,GAAkB,OAAQ,EAE1B,SAASC,EAAmBjB,EAAKC,EAAK,CAClC,OAAAD,EAAMA,IAAQ,EACPgB,GAAkB,OAAO1B,EAAsB,EAAC,SAASU,EAAKA,EAAMC,CAAG,CAAC,CACnF,CAEA,SAASiB,EAAWC,EAAG,CACnB,OAA0BA,GAAM,IACpC,CAEA,MAAMC,GAAiB,OAAO,qBAAyB,IACjD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBC,GAAS,CACpCpC,EAAK,oBAAoB,IAAIoC,EAAM,IAAI,EAAEA,EAAM,EAAGA,EAAM,CAAC,CAC7D,CAAC,EAED,SAASC,GAAeC,EAAMC,EAAMC,EAAMb,EAAG,CACzC,MAAMS,EAAQ,CAAE,EAAGE,EAAM,EAAGC,EAAM,IAAK,EAAG,KAAAC,CAAM,EAC1CC,EAAO,IAAIb,IAAS,CAItBQ,EAAM,MACN,MAAMM,EAAIN,EAAM,EAChBA,EAAM,EAAI,EACV,GAAI,CACA,OAAOT,EAAEe,EAAGN,EAAM,EAAG,GAAGR,CAAI,CACxC,QAAkB,CACF,EAAEQ,EAAM,MAAQ,GAChBpC,EAAK,oBAAoB,IAAIoC,EAAM,IAAI,EAAEM,EAAGN,EAAM,CAAC,EACnDD,GAAc,WAAWC,CAAK,GAE9BA,EAAM,EAAIM,CAE1B,CACK,EACD,OAAAD,EAAK,SAAWL,EAChBD,GAAc,SAASM,EAAML,EAAOA,CAAK,EAClCK,CACX,CAEA,SAASE,GAAYL,EAAMC,EAAMC,EAAMb,EAAG,CACtC,MAAMS,EAAQ,CAAE,EAAGE,EAAM,EAAGC,EAAM,IAAK,EAAG,KAAAC,CAAM,EAC1CC,EAAO,IAAIb,IAAS,CAItBQ,EAAM,MACN,GAAI,CACA,OAAOT,EAAES,EAAM,EAAGA,EAAM,EAAG,GAAGR,CAAI,CAC9C,QAAkB,CACF,EAAEQ,EAAM,MAAQ,IAChBpC,EAAK,oBAAoB,IAAIoC,EAAM,IAAI,EAAEA,EAAM,EAAGA,EAAM,CAAC,EACzDA,EAAM,EAAI,EACVD,GAAc,WAAWC,CAAK,EAE9C,CACK,EACD,OAAAK,EAAK,SAAWL,EAChBD,GAAc,SAASM,EAAML,EAAOA,CAAK,EAClCK,CACX,CAEA,SAASG,GAAY1C,EAAK,CAEtB,MAAM2C,EAAO,OAAO3C,EACpB,GAAI2C,GAAQ,UAAYA,GAAQ,WAAa3C,GAAO,KAChD,MAAQ,GAAGA,CAAG,GAElB,GAAI2C,GAAQ,SACR,MAAO,IAAI3C,CAAG,IAElB,GAAI2C,GAAQ,SAAU,CAClB,MAAMC,EAAc5C,EAAI,YACxB,OAAI4C,GAAe,KACR,SAEA,UAAUA,CAAW,GAExC,CACI,GAAID,GAAQ,WAAY,CACpB,MAAME,EAAO7C,EAAI,KACjB,OAAI,OAAO6C,GAAQ,UAAYA,EAAK,OAAS,EAClC,YAAYA,CAAI,IAEhB,UAEnB,CAEI,GAAI,MAAM,QAAQ7C,CAAG,EAAG,CACpB,MAAM8C,EAAS9C,EAAI,OACnB,IAAI+C,EAAQ,IACRD,EAAS,IACTC,GAASL,GAAY1C,EAAI,CAAC,CAAC,GAE/B,QAAQgD,EAAI,EAAGA,EAAIF,EAAQE,IACvBD,GAAS,KAAOL,GAAY1C,EAAIgD,CAAC,CAAC,EAEtC,OAAAD,GAAS,IACFA,CACf,CAEI,MAAME,EAAiB,sBAAsB,KAAK,SAAS,KAAKjD,CAAG,CAAC,EACpE,IAAIkD,EACJ,GAAID,GAAkBA,EAAe,OAAS,EAC1CC,EAAYD,EAAe,CAAC,MAG5B,QAAO,SAAS,KAAKjD,CAAG,EAE5B,GAAIkD,GAAa,SAIb,GAAI,CACA,MAAO,UAAY,KAAK,UAAUlD,CAAG,EAAI,GAC5C,MAAW,CACR,MAAO,QACnB,CAGI,OAAIA,aAAe,MACR,GAAGA,EAAI,IAAI,KAAKA,EAAI,OAAO;AAAA,EAAKA,EAAI,KAAK,GAG7CkD,CACX,CAEA,SAASC,GAAkB5C,EAAKI,EAAQ,CACpC,MAAME,EAAMF,EAAOJ,EAAI,OAAS,EAAG,CAAC,IAAM,EAC1C,OAAAJ,EAAsB,EAAC,IAAII,EAAKM,EAAM,CAAC,EACvCZ,EAAkBM,EAAI,OACfM,CACX,CAEA,SAASuC,EAAwB7B,EAAK,CAClC,MAAM8B,EAAQvD,EAAK,oBAAoB,IAAIyB,CAAG,EAC9C,OAAAzB,EAAK,0BAA0ByB,CAAG,EAC3B8B,CACX,CAEA,SAASC,EAAaC,EAAUC,EAAO,CACnC,GAAI,EAAED,aAAoBC,GACtB,MAAM,IAAI,MAAM,wBAAwBA,EAAM,IAAI,EAAE,CAE5D,CAEA,SAASC,EAAoB5C,EAAKC,EAAK,CACnC,OAAAD,EAAMA,IAAQ,EACPV,EAAsB,EAAC,SAASU,EAAM,EAAGA,EAAM,EAAIC,CAAG,CACjE,CAEA,SAAS4C,EAAwBC,EAAOhD,EAAQ,CAC5C,MAAME,EAAMF,EAAOgD,EAAM,OAAS,EAAG,CAAC,IAAM,EAC5C,QAASX,EAAI,EAAGA,EAAIW,EAAM,OAAQX,IAAK,CACnC,MAAMY,EAAMvC,EAAqBsC,EAAMX,CAAC,CAAC,EACzC5B,EAAkB,EAAG,UAAUP,EAAM,EAAImC,EAAGY,EAAK,EAAI,CAC7D,CACI,OAAA3D,EAAkB0D,EAAM,OACjB9C,CACX,CAEA,SAASgD,EAAyBhD,EAAKC,EAAK,CACxCD,EAAMA,IAAQ,EACd,MAAME,EAAMK,EAAoB,EAC1B0C,EAAS,CAAE,EACjB,QAAS,EAAIjD,EAAK,EAAIA,EAAM,EAAIC,EAAK,GAAK,EACtCgD,EAAO,KAAKhE,EAAK,oBAAoB,IAAIiB,EAAI,UAAU,EAAG,EAAI,CAAC,CAAC,EAEpE,OAAAjB,EAAK,uBAAuBe,EAAKC,CAAG,EAC7BgD,CACX,CAEA,IAAIC,GAA2B,KAE/B,SAASC,IAAwB,CAC7B,OAAID,KAA6B,MAAQA,GAAyB,aAAe,KAC7EA,GAA2B,IAAI,YAAYjE,EAAK,OAAO,MAAM,GAE1DiE,EACX,CAEA,SAASE,GAAqBpD,EAAKC,EAAK,CACpC,OAAAD,EAAMA,IAAQ,EACPmD,GAAuB,EAAC,SAASnD,EAAM,EAAGA,EAAM,EAAIC,CAAG,CAClE,CAKO,SAASoD,IAAc,CAC1B,MAAMhD,EAAMpB,EAAK,YAAa,EAC9B,OAAOqE,GAAS,OAAOjD,CAAG,CAC9B,CASO,SAASkD,IAAQ,CACpBtE,EAAK,MAAO,CAChB,CAEA,SAASuE,GAAiBjC,EAAMC,EAAMiC,EAAM,CACxC,MAAMpD,EAAMpB,EAAK,yCAAyCsC,EAAMC,EAAMiC,CAAI,EAC1E,GAAIpD,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,CAE5C,CAEA,SAASqD,GAAiBnC,EAAMC,EAAM,CAClCvC,EAAK,2HAA2HsC,EAAMC,CAAI,CAC9I,CAEA,SAASmC,GAAiBpC,EAAMC,EAAMiC,EAAM,CACxCxE,EAAK,0BAA0BsC,EAAMC,EAAMiC,CAAI,CACnD,CAEA,SAASG,GAAiBrC,EAAMC,EAAMiC,EAAM,CACxCxE,EAAK,0BAA0BsC,EAAMC,EAAMiC,CAAI,CACnD,CAEA,SAASI,GAAiBtC,EAAMC,EAAM,CAClCvC,EAAK,wHAAwHsC,EAAMC,CAAI,CAC3I,CAEA,SAASsC,GAAkBvC,EAAMC,EAAMiC,EAAMM,EAAM,CAC/C9E,EAAK,0BAA0BsC,EAAMC,EAAMiC,EAAMM,CAAI,CACzD,CAMY,MAACC,GAAsB,OAAO,OAAO,CAI7C,eAAgB,EAAG,EAAK,iBAIxB,oBAAqB,EAAG,EAAK,sBAM7B,uBAAwB,EAAG,EAAK,yBAIhC,oBAAqB,EAAG,EAAK,sBAI7B,qBAAsB,EAAG,EAAK,uBAI9B,oCAAqC,EAAG,EAAK,sCAI7C,gBAAiB,EAAG,EAAK,iBAC7B,CAAC,EAKYC,GAAyB,OAAO,OAAO,CAIhD,QAAS,EAAG,EAAK,UAIjB,WAAY,EAAG,EAAK,aAIpB,QAAS,EAAG,EAAK,SACrB,CAAC,EASYC,GAAgB,OAAO,OAAO,CAIvC,WAAY,EAAG,EAAK,aAIpB,QAAS,EAAG,EAAK,UAIjB,QAAS,EAAG,EAAK,SACrB,CAAC,EAMYC,GAAsB,OAAO,OAAO,CAI7C,uBAAwB,EAAG,EAAK,yBAIhC,gBAAiB,EAAG,EAAK,kBAOzB,QAAS,EAAG,EAAK,SACrB,CAAC,EAKYC,GAAoB,OAAO,OAAO,CAQ3C,QAAS,EAAG,EAAK,UAQjB,OAAQ,EAAG,EAAK,SAOhB,OAAQ,EAAG,EAAK,SAMhB,cAAe,EAAG,EAAK,eAC3B,CAAC,EAKYC,GAAa,OAAO,OAAO,CAIpC,SAAU,EAAG,EAAK,WAIlB,YAAa,EAAG,EAAK,cAIrB,QAAS,EAAG,EAAK,UAIjB,MAAO,EAAG,EAAK,OACnB,CAAC,EAKYC,GAAc,OAAO,OAAO,CAOrC,MAAO,EAAG,EAAK,QAMf,MAAO,EAAG,EAAK,QAMf,KAAM,EAAG,EAAK,OAMd,KAAM,EAAG,EAAK,OAMd,MAAO,EAAG,EAAK,OACnB,CAAC,EAWYC,GAAa,OAAO,OAAO,CAIpC,MAAO,EAAG,EAAK,QAIf,YAAa,EAAG,EAAK,aACzB,CAAC,EAKYC,GAAU,OAAO,OAAO,CAOjC,QAAS,EAAG,EAAK,UAMjB,QAAS,EAAG,EAAK,UAKjB,UAAW,EAAG,EAAK,YAUnB,aAAc,EAAG,EAAK,eAKtB,KAAM,EAAG,EAAK,OAId,UAAW,EAAG,EAAK,WACvB,CAAC,EAKYC,GAAc,OAAO,OAAO,CAIrC,WAAY,EAAG,EAAK,aAIpB,UAAW,EAAG,EAAK,YAInB,UAAW,EAAG,EAAK,YAInB,SAAU,EAAG,EAAK,WAIlB,gBAAiB,EAAG,EAAK,kBAIzB,YAAa,EAAG,EAAK,cAIrB,WAAY,EAAG,EAAK,YACxB,CAAC,EAMYC,GAAc,OAAO,OAAO,CAIrC,IAAK,EAAG,EAAK,MAIb,KAAM,EAAG,EAAK,OAId,KAAM,EAAG,EAAK,MAClB,CAAC,EAKYC,GAAkB,OAAO,OAAO,CAIzC,0BAA2B,EAAG,EAAK,4BAInC,cAAe,EAAG,EAAK,gBAIvB,eAAgB,EAAG,EAAK,iBAIxB,mBAAoB,EAAG,EAAK,qBAI5B,YAAa,EAAG,EAAK,cAIrB,sBAAuB,EAAG,EAAK,uBACnC,CAAC,EAKYC,GAAiB,OAAO,OAAO,CAIxC,QAAS,EAAG,EAAK,UAIjB,QAAS,EAAG,EAAK,UAKjB,mBAAoB,EAAG,EAAK,qBAK5B,gBAAiB,EAAG,EAAK,iBAC7B,CAAC,EAKYC,GAAmB,OAAO,OAAO,CAI1C,UAAW,EAAG,EAAK,YAInB,oBAAqB,EAAG,EAAK,sBAI7B,YAAa,EAAG,EAAK,aACzB,CAAC,EAKYC,GAAqB,OAAO,OAAO,CAM5C,MAAO,EAAG,EAAK,QAIf,aAAc,EAAG,EAAK,eAItB,aAAc,EAAG,EAAK,eAItB,cAAe,EAAG,EAAK,eAC3B,CAAC,EAKYC,GAA2B,OAAO,OAAO,CAIlD,QAAS,EAAG,EAAK,UAIjB,UAAW,EAAG,EAAK,YAInB,MAAO,EAAG,EAAK,QAMf,aAAc,EAAG,EAAK,eAItB,KAAM,EAAG,EAAK,OAId,UAAW,EAAG,EAAK,WACvB,CAAC,EAEKC,GAAuC,CAAC,UAAW,MAAM,EAEzDC,GAAqC,CAAC,WAAY,YAAa,gBAAiB,iBAAkB,SAAS,EAE3GC,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlF,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAMmF,EAAW,CAEpB,oBAAqB,CACjB,MAAMnF,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkF,GAAuB,WAAW,IAAI,EAC/BlF,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAUI,OAAO,QAAQ8C,EAAO,CAClB,MAAMsC,EAAO9C,GAAkBQ,EAAO7D,EAAK,iBAAiB,EACtDoG,EAAOjG,EACPiB,EAAMpB,EAAK,mBAAmBmG,EAAMC,CAAI,EAC9C,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOiF,EAAoB,OAAOjF,EAAI,CAAC,CAAC,CAChD,CAeI,OAAO,QAAQkF,EAAY,CACvB9C,EAAa8C,EAAYD,CAAmB,EAC5C,MAAMjF,EAAMpB,EAAK,mBAAmBsG,EAAW,SAAS,EACxD,GAAIlF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,IAAImF,EAAK5C,EAAoBvC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACpD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CACA,CAEA,MAAMC,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzF,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAM0F,CAAoB,CAE7B,OAAO,OAAO1F,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOiF,EAAoB,SAAS,EACvD,OAAAjF,EAAI,UAAYT,EAChByF,GAAgC,SAAShF,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByF,GAAgC,WAAW,IAAI,EACxCzF,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,OAAO,iBAAkB,CACrB,MAAMK,EAAMpB,EAAK,oCAAqC,EACtD,OAAOyG,EAAoB,OAAOrF,CAAG,CAC7C,CAMI,OAAO,WAAWsF,EAAK,CACnB,MAAMP,EAAOvF,EAAkB8F,EAAK1G,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EoG,EAAOjG,EACPiB,EAAMpB,EAAK,+BAA+BmG,EAAMC,CAAI,EAC1D,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOqF,EAAoB,OAAOrF,EAAI,CAAC,CAAC,CAChD,CAKI,UAAW,CAEP,OADYpB,EAAK,6BAA6B,KAAK,SAAS,CAEpE,CAKI,IAAI,mBAAoB,CACpB,MAAMoB,EAAMpB,EAAK,sCAAsC,KAAK,SAAS,EACrE,OAAO2G,GAAkB,OAAOvF,CAAG,CAC3C,CASI,UAAUwF,EAAeC,EAAKC,EAAY,CACtC,IAAIC,EACAC,EACJ,GAAI,CACA,MAAMb,EAAOvF,EAAkBgG,EAAe5G,EAAK,kBAAmBA,EAAK,kBAAkB,EACvFoG,EAAOjG,EACP8G,EAAOrG,EAAkBiG,EAAK7G,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACPgH,EAAOvG,EAAkBkG,EAAY9G,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFoH,GAAOjH,EACPiB,GAAMpB,EAAK,8BAA8B,KAAK,UAAWmG,EAAMC,EAAMa,EAAMC,EAAMC,EAAMC,EAAI,EACjG,IAAIC,EAAOjG,GAAI,CAAC,EACZkG,EAAOlG,GAAI,CAAC,EAChB,GAAIA,GAAI,CAAC,EACL,MAAAiG,EAAO,EAAGC,EAAO,EACXhE,EAAwBlC,GAAI,CAAC,CAAC,EAExC,OAAA2F,EAAcM,EACdL,EAAcM,EACPtF,EAAmBqF,EAAMC,CAAI,CAChD,QAAkB,CACNtH,EAAK,gBAAgB+G,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMO,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxG,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAMyG,EAAW,CAEpB,OAAO,OAAOzG,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOgG,GAAW,SAAS,EAC9C,OAAAhG,EAAI,UAAYT,EAChBwG,GAAuB,SAAS/F,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwG,GAAuB,WAAW,IAAI,EAC/BxG,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAKI,IAAI,eAAgB,CAChB,MAAMK,EAAMpB,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOoB,IAAQ,EAAI,OAAYqF,EAAoB,OAAOrF,CAAG,CACrE,CAKI,IAAI,cAAckB,EAAM,CACpB,IAAI6D,EAAO,EACNlE,EAAWK,CAAI,IAChBkB,EAAalB,EAAMmE,CAAmB,EACtCN,EAAO7D,EAAK,mBAAoB,GAEpCtC,EAAK,mCAAmC,KAAK,UAAWmG,CAAI,CACpE,CAKI,IAAI,eAAgB,CAChB,MAAM/E,EAAMpB,EAAK,mCAAmC,KAAK,SAAS,EAClE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,cAAcjE,EAAM,CACpB,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,mCAAmC,KAAK,UAAWmG,EAAMC,CAAI,CAC1E,CAOI,IAAI,qBAAsB,CAEtB,OADYpG,EAAK,+BAA+B,KAAK,SAAS,CAEtE,CACA,CAEA,MAAMyH,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1G,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAM2G,EAAoB,CAE7B,OAAO,OAAO3G,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOkG,GAAoB,SAAS,EACvD,OAAAlG,EAAI,UAAYT,EAChB0G,GAAgC,SAASjG,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0G,GAAgC,WAAW,IAAI,EACxC1G,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,IAAI,KAAM,CACN,IAAI4G,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,IAAItF,EAAM,CACV,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CAKI,IAAI,gBAAiB,CACjB,IAAIuB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,6CAA6C,KAAK,SAAS,EAC5E,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,eAAetF,EAAM,CACrB,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,6CAA6C,KAAK,UAAWmG,EAAMC,CAAI,CACpF,CACA,CAEA,MAAMyB,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9G,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAM9E,MAAM+G,EAAkB,CAE3B,oBAAqB,CACjB,MAAM/G,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8G,GAA8B,WAAW,IAAI,EACtC9G,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAKI,IAAI,QAAS,CACT,MAAMK,EAAMpB,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAOoB,IAAQ,EAAI,OAAY2G,EAAO,OAAO3G,CAAG,CACxD,CAKI,IAAI,OAAOkB,EAAM,CACb,IAAI6D,EAAO,EACNlE,EAAWK,CAAI,IAChBkB,EAAalB,EAAMyF,CAAM,EACzB5B,EAAO7D,EAAK,mBAAoB,GAEpCtC,EAAK,mCAAmC,KAAK,UAAWmG,CAAI,CACpE,CAKI,IAAI,UAAW,CACX,MAAM/E,EAAMpB,EAAK,qCAAqC,KAAK,SAAS,EACpE,OAAOoB,IAAQ,EAAI,OAAY4G,EAAS,OAAO5G,CAAG,CAC1D,CAKI,IAAI,SAASkB,EAAM,CACf,IAAI6D,EAAO,EACNlE,EAAWK,CAAI,IAChBkB,EAAalB,EAAM0F,CAAQ,EAC3B7B,EAAO7D,EAAK,mBAAoB,GAEpCtC,EAAK,qCAAqC,KAAK,UAAWmG,CAAI,CACtE,CAMI,IAAI,gBAAiB,CACjB,IAAIwB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,2CAA2C,KAAK,SAAS,EAC1E,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,eAAetF,EAAM,CACrB,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CAKI,IAAI,eAAgB,CAChB,MAAMhF,EAAMpB,EAAK,0CAA0C,KAAK,SAAS,EACzE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,cAAcjE,EAAM,CACpB,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,0CAA0C,KAAK,UAAWmG,EAAMC,CAAI,CACjF,CAKI,IAAI,mBAAoB,CACpB,MAAMhF,EAAMpB,EAAK,8CAA8C,KAAK,SAAS,EAC7E,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,kBAAkBjE,EAAM,CACxB,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,8CAA8C,KAAK,UAAWmG,EAAMC,CAAI,CACrF,CAKI,IAAI,8BAA+B,CAC/B,MAAMhF,EAAMpB,EAAK,yDAAyD,KAAK,SAAS,EACxF,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,6BAA6BjE,EAAM,CACnC,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,yDAAyD,KAAK,UAAWmG,EAAMC,CAAI,CAChG,CAKI,IAAI,mCAAoC,CACpC,MAAMhF,EAAMpB,EAAK,8DAA8D,KAAK,SAAS,EAC7F,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,kCAAkCjE,EAAM,CACxC,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,8DAA8D,KAAK,UAAWmG,EAAMC,CAAI,CACrG,CAKI,IAAI,mCAAoC,CACpC,MAAMhF,EAAMpB,EAAK,8DAA8D,KAAK,SAAS,EAC7F,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,kCAAkCjE,EAAM,CACxC,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,8DAA8D,KAAK,UAAWmG,EAAMC,CAAI,CACrG,CAII,aAAc,CACV,MAAMhF,EAAMpB,EAAK,sBAAuB,EACxC,YAAK,UAAYoB,IAAQ,EACzByG,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CACA,CAEA,MAAMI,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlH,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAMmH,CAAW,CAEpB,OAAO,OAAOnH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO0G,EAAW,SAAS,EAC9C,OAAA1G,EAAI,UAAYT,EAChBkH,GAAuB,SAASzG,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkH,GAAuB,WAAW,IAAI,EAC/BlH,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAKI,QAAS,CAEL,OADYf,EAAK,kBAAkB,KAAK,SAAS,CAEzD,CAMI,YAAa,CACT,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,eAAgB,CAEZ,OADY5H,EAAK,yBAAyB,KAAK,SAAS,IACzC,CACvB,CACA,CAEA,MAAMmI,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpH,GAAOf,EAAK,qBAAqBe,IAAQ,EAAG,CAAC,CAAC,EAiBtE,MAAMqH,EAAU,CAEnB,OAAO,OAAOrH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO4G,GAAU,SAAS,EAC7C,OAAA5G,EAAI,UAAYT,EAChBoH,GAAsB,SAAS3G,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoH,GAAsB,WAAW,IAAI,EAC9BpH,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,qBAAqBe,EAAK,CAAC,CACxC,CAQI,UAAW,CACP,MAAMK,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,IAAIuG,EAAK5C,EAAoBvC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACpD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CAQI,UAAW,CAEP,OADYvG,EAAK,mBAAmB,KAAK,SAAS,CAE1D,CACA,CAEA,MAAMqI,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtH,GAAOf,EAAK,2BAA2Be,IAAQ,EAAG,CAAC,CAAC,EAK5E,MAAMuH,CAAgB,CAEzB,OAAO,OAAOvH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO8G,EAAgB,SAAS,EACnD,OAAA9G,EAAI,UAAYT,EAChBsH,GAA4B,SAAS7G,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsH,GAA4B,WAAW,IAAI,EACpCtH,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,2BAA2Be,EAAK,CAAC,CAC9C,CAMI,GAAGwH,EAAO,CACN,OAAA/E,EAAa+E,EAAOD,CAAe,EACvBtI,EAAK,mBAAmB,KAAK,UAAWuI,EAAM,SAAS,IACpD,CACvB,CAUI,OAAO,oBAAoBC,EAA4BC,EAAgC,CACnF,MAAMrH,EAAMpB,EAAK,oCAAoCwI,EAA4BC,CAA8B,EAC/G,OAAOH,EAAgB,OAAOlH,CAAG,CACzC,CAKI,OAAO,YAAa,CAChB,MAAMA,EAAMpB,EAAK,2BAA4B,EAC7C,OAAOsI,EAAgB,OAAOlH,CAAG,CACzC,CAeI,OAAO,8BAA+B,CAClC,MAAMA,EAAMpB,EAAK,6CAA8C,EAC/D,OAAOsI,EAAgB,OAAOlH,CAAG,CACzC,CAOI,OAAO,uBAAwB,CAC3B,MAAMA,EAAMpB,EAAK,sCAAuC,EACxD,OAAOsI,EAAgB,OAAOlH,CAAG,CACzC,CAWI,OAAO,oBAAqB,CACxB,MAAMA,EAAMpB,EAAK,mCAAoC,EACrD,OAAOsI,EAAgB,OAAOlH,CAAG,CACzC,CACA,CAEA,MAAMsH,GAA6C,OAAO,qBAAyB,IAC7E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3H,GAAOf,EAAK,yCAAyCe,IAAQ,EAAG,CAAC,CAAC,EAK1F,MAAM4H,EAA8B,CAEvC,OAAO,OAAO5H,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmH,GAA8B,SAAS,EACjE,OAAAnH,EAAI,UAAYT,EAChB2H,GAA0C,SAASlH,EAAKA,EAAI,UAAWA,CAAG,EACnEA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2H,GAA0C,WAAW,IAAI,EAClD3H,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,yCAAyCe,EAAK,CAAC,CAC5D,CAWI,IAAI,mBAAoB,CAEpB,OADYf,EAAK,0DAA0D,KAAK,SAAS,CAEjG,CAOI,IAAI,0BAA2B,CAC3B,MAAMoB,EAAMpB,EAAK,iEAAiE,KAAK,SAAS,EAChG,OAAO4I,GAAyB,OAAOxH,CAAG,CAClD,CAQI,IAAI,yBAA0B,CAC1B,MAAMA,EAAMpB,EAAK,gEAAgE,KAAK,SAAS,EAC/F,OAAO6I,EAAuB,OAAOzH,CAAG,CAChD,CACA,CAEA,MAAM0H,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/H,GAAOf,EAAK,iCAAiCe,IAAQ,EAAG,CAAC,CAAC,EAKlF,MAAMgI,EAAsB,CAE/B,OAAO,OAAOhI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOuH,GAAsB,SAAS,EACzD,OAAAvH,EAAI,UAAYT,EAChB+H,GAAkC,SAAStH,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+H,GAAkC,WAAW,IAAI,EAC1C/H,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iCAAiCe,EAAK,CAAC,CACpD,CAKI,IAAI,WAAY,CACZ,MAAMK,EAAMpB,EAAK,gCAAgC,KAAK,SAAS,EAC/D,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,kBAAmB,CACnB,MAAMnF,EAAMpB,EAAK,uCAAuC,KAAK,SAAS,EACtE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,gBAAiB,CACjB,MAAMnF,EAAMpB,EAAK,qCAAqC,KAAK,SAAS,EACpE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CACA,CAEA,MAAMyC,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjI,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAK/E,MAAMkI,EAAmB,CAE5B,OAAO,OAAOlI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOyH,GAAmB,SAAS,EACtD,OAAAzH,EAAI,UAAYT,EAChBiI,GAA+B,SAASxH,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiI,GAA+B,WAAW,IAAI,EACvCjI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAKI,IAAI,WAAY,CAEZ,OADYf,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAMI,IAAI,gBAAiB,CAEjB,OADYA,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CAMI,IAAI,gBAAiB,CAEjB,OADYA,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CACA,CAEA,MAAMkJ,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnI,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMoI,CAAoB,CAE7B,OAAO,OAAOpI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO2H,EAAoB,SAAS,EACvD,OAAA3H,EAAI,UAAYT,EAChBmI,GAAgC,SAAS1H,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmI,GAAgC,WAAW,IAAI,EACxCnI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,YAAY2F,EAAK,CACb,MAAMP,EAAOvF,EAAkB8F,EAAK1G,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EoG,EAAOjG,EACPiB,EAAMpB,EAAK,wBAAwBmG,EAAMC,CAAI,EACnD,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5B8H,GAAgC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC5D,IACf,CAKI,IAAI,QAAS,CAET,OADYlJ,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAMI,UAAW,CACP,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwB,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrI,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAMsI,EAAmB,CAE5B,OAAO,OAAOtI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6H,GAAmB,SAAS,EACtD,OAAA7H,EAAI,UAAYT,EAChBqI,GAA+B,SAAS5H,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqI,GAA+B,WAAW,IAAI,EACvCrI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAKI,IAAI,OAAQ,CAER,OADYf,EAAK,mCAAmC,KAAK,SAAS,CAE1E,CAMI,IAAI,QAAS,CACT,MAAMoB,EAAMpB,EAAK,0BAA0B,KAAK,SAAS,EACzD,OAAOoB,IAAQ,EAAI,OAAY2G,EAAO,OAAO3G,CAAG,CACxD,CAOI,IAAI,cAAe,CACf,MAAMA,EAAMpB,EAAK,gCAAgC,KAAK,SAAS,EAC/D,OAAOoB,IAAQ,EAAI,OAAY4G,EAAS,OAAO5G,CAAG,CAC1D,CAMI,IAAI,qBAAsB,CAEtB,OADYpB,EAAK,uCAAuC,KAAK,SAAS,CAE9E,CAMI,IAAI,yBAA0B,CAE1B,OADYA,EAAK,2CAA2C,KAAK,SAAS,CAElF,CAYI,IAAI,8BAA+B,CAE/B,OADYA,EAAK,gDAAgD,KAAK,SAAS,CAEvF,CASI,YAAYsJ,EAAQ,CAChB,MAAMlI,EAAMpB,EAAK,+BAA+B,KAAK,UAAWsJ,CAAM,EACtE,OAAOlI,IAAQ,EAAI,OAAYmI,EAAY,OAAOnI,CAAG,CAC7D,CACA,CAEA,MAAMoI,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzI,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAM0I,EAAmB,CAE5B,oBAAqB,CACjB,MAAM1I,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByI,GAA+B,WAAW,IAAI,EACvCzI,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAKI,IAAI,iCAAkC,CAElC,OADYf,EAAK,6DAA6D,KAAK,SAAS,CAEpG,CAKI,IAAI,gCAAgCsC,EAAM,CACtCtC,EAAK,6DAA6D,KAAK,UAAWsC,CAAI,CAC9F,CAKI,YAAYoH,EAAiC,CACzC,MAAMtI,EAAMpB,EAAK,uBAAuB0J,CAA+B,EACvE,YAAK,UAAYtI,IAAQ,EACzBoI,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CACA,CAEA,MAAMG,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5I,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAI7E,MAAM6I,EAAiB,CAE1B,OAAO,OAAO7I,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOoI,GAAiB,SAAS,EACpD,OAAApI,EAAI,UAAYT,EAChB4I,GAA6B,SAASnI,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4I,GAA6B,WAAW,IAAI,EACrC5I,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAOI,cAAc8I,EAA6BC,EAAuB,CAC9D,OAAAtG,EAAasG,EAAuBC,CAAmB,EAC3C/J,EAAK,+BAA+B,KAAK,UAAW6J,EAA6BC,EAAsB,SAAS,CAEpI,CACA,CAEA,MAAME,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjJ,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMgJ,CAAoB,CAE7B,OAAO,OAAOhJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOuI,EAAoB,SAAS,EACvD,OAAAvI,EAAI,UAAYT,EAChBiJ,GAAgC,SAASxI,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiJ,GAAgC,WAAW,IAAI,EACxCjJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,OAAO,iBAAkB,CACrB,MAAMK,EAAMpB,EAAK,oCAAqC,EACtD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAO2I,EAAoB,OAAO3I,EAAI,CAAC,CAAC,CAChD,CAMI,OAAO,mBAAmByC,EAAO,CAC7B,MAAMzC,EAAMpB,EAAK,uCAAuC6D,CAAK,EAC7D,GAAIzC,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAO2I,EAAoB,OAAO3I,EAAI,CAAC,CAAC,CAChD,CAKI,UAAW,CAEP,OADYpB,EAAK,6BAA6B,KAAK,SAAS,CAEpE,CACA,CAEA,MAAMiK,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlJ,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAI9E,MAAMmJ,EAAkB,CAE3B,OAAO,OAAOnJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO0I,GAAkB,SAAS,EACrD,OAAA1I,EAAI,UAAYT,EAChBkJ,GAA8B,SAASzI,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkJ,GAA8B,WAAW,IAAI,EACtClJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAMI,QAAS,CAEL,OADYf,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CAQI,UAAU8J,EAAuBK,EAAWC,EAAa,CACrD5G,EAAasG,EAAuBC,CAAmB,EACvDvG,EAAa2G,EAAWnC,CAAQ,EAChC,MAAM7B,EAAOvF,EAAkBwJ,EAAapK,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFoG,EAAOjG,EAEb,OADYH,EAAK,4BAA4B,KAAK,UAAW8J,EAAsB,UAAWK,EAAU,UAAWhE,EAAMC,CAAI,CAErI,CAQI,wBAAyB,CAErB,OADYpG,EAAK,yCAAyC,KAAK,SAAS,CAEhF,CAMI,wBAAwB8J,EAAuB,CAC3C,OAAAtG,EAAasG,EAAuBC,CAAmB,EAC3C/J,EAAK,0CAA0C,KAAK,UAAW8J,EAAsB,SAAS,CAElH,CAKI,2BAA4B,CAExB,OADY9J,EAAK,4CAA4C,KAAK,SAAS,CAEnF,CACA,CAEA,MAAMqK,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtJ,GAAOf,EAAK,kBAAkBe,IAAQ,EAAG,CAAC,CAAC,EAInE,MAAMuJ,CAAO,CAEhB,OAAO,OAAOvJ,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO8I,EAAO,SAAS,EAC1C,OAAA9I,EAAI,UAAYT,EAChBsJ,GAAmB,SAAS7I,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsJ,GAAmB,WAAW,IAAI,EAC3BtJ,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kBAAkBe,EAAK,CAAC,CACrC,CAQI,oBAAoBwJ,EAAS,CACzB,IAAIpE,EAAOlE,EAAWsI,CAAO,EAAI,EAAI3G,EAAwB2G,EAASvK,EAAK,iBAAiB,EACxFoG,EAAOjG,EACX,MAAMiB,EAAMpB,EAAK,2BAA2B,KAAK,UAAWmG,EAAMC,CAAI,EACtE,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAuBI,qBAAqBoJ,EAAYC,EAAS,CACtC,MAAMtE,EAAOvF,EAAkB4J,EAAYxK,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFoG,EAAOjG,EAEb,OADYH,EAAK,4BAA4B,KAAK,UAAWmG,EAAMC,EAAMqE,CAAO,CAExF,CASI,YAAa,CAET,OADYzK,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,uBAAwB,CAEpB,OADYA,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAKI,sBAAuB,CAEnB,OADYA,EAAK,4BAA4B,KAAK,SAAS,IAC5C,CACvB,CAYI,cAAc0K,EAAa,CAEvB,OADY1K,EAAK,qBAAqB,KAAK,UAAW0K,CAAW,CAEzE,CAKI,IAAI,QAAS,CACT,MAAMtJ,EAAMpB,EAAK,cAAc,KAAK,SAAS,EAC7C,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAKI,IAAI,aAAc,CACd,MAAMA,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAMI,OAAOoE,EAAW,CACd,MAAMvJ,EAAMpB,EAAK,cAAc,KAAK,UAAW2K,CAAS,EACxD,GAAIvJ,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOA,EAAI,CAAC,IAAM,EAAI,OAAYwJ,EAAU,OAAOxJ,EAAI,CAAC,CAAC,CACjE,CAKI,IAAI,eAAgB,CAChB,MAAMA,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOoB,IAAQ,EAAI,OAAY+H,EAAoB,OAAO/H,CAAG,CACrE,CAKI,IAAI,YAAa,CACb,MAAMA,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOoB,IAAQ,EAAI,OAAYyJ,EAAiB,OAAOzJ,CAAG,CAClE,CAKI,IAAI,MAAO,CAEP,OADYpB,EAAK,YAAY,KAAK,SAAS,CAEnD,CAOI,IAAI,YAAa,CAEb,OADYA,EAAK,kBAAkB,KAAK,SAAS,CAEzD,CAKI,IAAI,YAAa,CACb,MAAMoB,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAO8K,GAAW,OAAO1J,CAAG,CACpC,CAKI,IAAI,iBAAkB,CAElB,OADYpB,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CAKI,kBAAmB,CAEf,OADYA,EAAK,wBAAwB,KAAK,SAAS,IACxC,CACvB,CAOI,eAAgB,CAEZ,OADYA,EAAK,qBAAqB,KAAK,SAAS,IACrC,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,iBAAiB,KAAK,SAAS,IACjC,CACvB,CAMI,eAAgB,CACZ,MAAMoB,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAO,OAAO,QAAQ,GAAIoB,CAAG,CACrC,CAQI,QAAS,CAEL,OADYpB,EAAK,cAAc,KAAK,SAAS,CAErD,CAKI,IAAI,cAAe,CAEf,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CACA,CAEA,MAAM+K,GAAwB,OAAO,qBAAyB,IACxD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhK,GAAOf,EAAK,oBAAoBe,IAAQ,EAAG,CAAC,CAAC,EAOrE,MAAMiH,CAAS,CAElB,OAAO,OAAOjH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOwG,EAAS,SAAS,EAC5C,OAAAxG,EAAI,UAAYT,EAChBgK,GAAqB,SAASvJ,EAAKA,EAAI,UAAWA,CAAG,EAC9CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgK,GAAqB,WAAW,IAAI,EAC7BhK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,oBAAoBe,EAAK,CAAC,CACvC,CAKI,YAAYiK,EAAI,CACZ,MAAM7E,EAAOvF,EAAkBoK,EAAIhL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EoG,EAAOjG,EACPiB,EAAMpB,EAAK,aAAamG,EAAMC,CAAI,EACxC,YAAK,UAAYhF,IAAQ,EACzB2J,GAAqB,SAAS,KAAM,KAAK,UAAW,IAAI,EACjD,IACf,CAKI,UAAW,CACP,IAAIpD,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMqD,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlK,GAAOf,EAAK,qBAAqBe,IAAQ,EAAG,CAAC,CAAC,EAQtE,MAAM6J,CAAU,CAEnB,OAAO,OAAO7J,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOoJ,EAAU,SAAS,EAC7C,OAAApJ,EAAI,UAAYT,EAChBkK,GAAsB,SAASzJ,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkK,GAAsB,WAAW,IAAI,EAC9BlK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,qBAAqBe,EAAK,CAAC,CACxC,CAKI,IAAI,MAAO,CAEP,OADYf,EAAK,eAAe,KAAK,SAAS,CAEtD,CAKI,IAAI,YAAa,CACb,MAAMoB,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOoB,IAAQ,EAAI,OAAY+H,EAAoB,OAAO/H,CAAG,CACrE,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOoB,IAAQ,EAAI,OAAYyJ,EAAiB,OAAOzJ,CAAG,CAClE,CAKI,IAAI,SAAU,CACV,MAAMA,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,UAAW,CACP,IAAIoB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMsD,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnK,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAI/E,MAAMoK,EAAmB,CAE5B,OAAO,OAAOpK,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO2J,GAAmB,SAAS,EACtD,OAAA3J,EAAI,UAAYT,EAChBmK,GAA+B,SAAS1J,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmK,GAA+B,WAAW,IAAI,EACvCnK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAOI,IAAI,MAAO,CAEP,OADYf,EAAK,wBAAwB,KAAK,SAAS,CAE/D,CAKI,UAAW,CACP,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwD,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrK,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAMxE,MAAMsK,CAAY,CAErB,OAAO,OAAOtK,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6J,EAAY,SAAS,EAC/C,OAAA7J,EAAI,UAAYT,EAChBqK,GAAwB,SAAS5J,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqK,GAAwB,WAAW,IAAI,EAChCrK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAKI,YAAYiK,EAAI,CACZ,MAAM7E,EAAOvF,EAAkBoK,EAAIhL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EoG,EAAOjG,EACPiB,EAAMpB,EAAK,gBAAgBmG,EAAMC,CAAI,EAC3C,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BgK,GAAwB,SAAS,KAAM,KAAK,UAAW,IAAI,EACpD,IACf,CAKI,IAAI,WAAY,CACZ,MAAMhK,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAOmL,GAAmB,OAAO/J,CAAG,CAC5C,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAKI,UAAW,CACP,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAM0D,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvK,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAMwK,EAAY,CAErB,oBAAqB,CACjB,MAAMxK,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuK,GAAwB,WAAW,IAAI,EAChCvK,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAWI,YAAYyK,EAASC,EAAM,CACvB,IAAItF,EAAOlE,EAAWuJ,CAAO,EAAI,EAAI5H,EAAwB4H,EAASxL,EAAK,iBAAiB,EACxFoG,EAAOjG,EACP8G,EAAOhF,EAAWwJ,CAAI,EAAI,EAAI7H,EAAwB6H,EAAMzL,EAAK,iBAAiB,EAClFkH,EAAO/G,EACX,MAAMiB,EAAMpB,EAAK,gBAAgBmG,EAAMC,EAAMa,EAAMC,CAAI,EACvD,GAAI9F,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BkK,GAAwB,SAAS,KAAM,KAAK,UAAW,IAAI,EACpD,IACf,CAKI,SAAU,CAEN,OADYtL,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAOI,IAAI,SAAU,CACV,MAAMoB,EAAMpB,EAAK,oBAAoB,KAAK,SAAS,EACnD,IAAIuG,EAAKxC,EAAyB3C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACzD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CAMI,IAAI,MAAO,CACP,MAAMnF,EAAMpB,EAAK,iBAAiB,KAAK,SAAS,EAChD,IAAIuG,EAAKxC,EAAyB3C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACzD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CACA,CAEA,MAAMmF,GAAqB,OAAO,qBAAyB,IACrD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3K,GAAOf,EAAK,iBAAiBe,IAAQ,EAAG,CAAC,CAAC,EAIlE,MAAM4K,EAAM,CAEf,oBAAqB,CACjB,MAAM5K,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2K,GAAkB,WAAW,IAAI,EAC1B3K,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iBAAiBe,EAAK,CAAC,CACpC,CAQI,aAAc,CACV,MAAMK,EAAMpB,EAAK,UAAW,EAC5B,YAAK,UAAYoB,IAAQ,EACzBsK,GAAkB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC9C,IACf,CAQI,YAAa,CACT,MAAMtK,EAAMpB,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAOI,0BAA0BwK,EAAiB,CACvC,MAAMzF,EAAOvF,EAAkBgL,EAAiB5L,EAAK,kBAAmBA,EAAK,kBAAkB,EACzFoG,EAAOjG,EACPiB,EAAMpB,EAAK,gCAAgC,KAAK,UAAWmG,EAAMC,CAAI,EAC3E,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOyK,GAAsB,OAAOzK,EAAI,CAAC,CAAC,CAClD,CAYI,2BAA2B0K,EAAYF,EAAiB,CACpDpI,EAAasI,EAAY3C,CAAmB,EAC5C,MAAMhD,EAAOvF,EAAkBgL,EAAiB5L,EAAK,kBAAmBA,EAAK,kBAAkB,EACzFoG,EAAOjG,EACPiB,EAAMpB,EAAK,iCAAiC,KAAK,UAAW8L,EAAW,UAAW3F,EAAMC,CAAI,EAClG,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAO2K,GAAuB,OAAO3K,EAAI,CAAC,CAAC,CACnD,CACA,CAEA,MAAM4K,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjL,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAI7E,MAAM8J,CAAiB,CAE1B,OAAO,OAAO9J,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOqJ,EAAiB,SAAS,EACpD,OAAArJ,EAAI,UAAYT,EAChBiL,GAA6B,SAASxK,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiL,GAA6B,WAAW,IAAI,EACrCjL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAKI,IAAI,QAAS,CAET,OADYf,EAAK,wBAAwB,KAAK,SAAS,IACxC,CACvB,CAMI,UAAW,CACP,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,0BAA0B,KAAK,SAAS,EACzD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMqE,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlL,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAK7E,MAAMmL,CAAiB,CAE1B,OAAO,OAAOnL,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO0K,EAAiB,SAAS,EACpD,OAAA1K,EAAI,UAAYT,EAChBkL,GAA6B,SAASzK,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkL,GAA6B,WAAW,IAAI,EACrClL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAMI,YAAYoL,EAAW,CACnB,MAAMhG,EAAOvF,EAAkBuL,EAAWnM,EAAK,kBAAmBA,EAAK,kBAAkB,EACnFoG,EAAOjG,EACPiB,EAAMpB,EAAK,qBAAqBmG,EAAMC,CAAI,EAChD,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5B6K,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACf,CAMI,UAAW,CACP,IAAItE,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,0BAA0B,KAAK,SAAS,EACzD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwE,GAAqB,OAAO,qBAAyB,IACrD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrL,GAAOf,EAAK,iBAAiBe,IAAQ,EAAG,CAAC,CAAC,EAUlE,MAAMsL,EAAM,CAEf,OAAO,OAAOtL,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6K,GAAM,SAAS,EACzC,OAAA7K,EAAI,UAAYT,EAChBqL,GAAkB,SAAS5K,EAAKA,EAAI,UAAWA,CAAG,EAC3CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqL,GAAkB,WAAW,IAAI,EAC1BrL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iBAAiBe,EAAK,CAAC,CACpC,CAMI,IAAI,QAAS,CAET,OADYf,EAAK,aAAa,KAAK,SAAS,CAEpD,CAKI,IAAI,aAAc,CAEd,OADYA,EAAK,kBAAkB,KAAK,SAAS,CAEzD,CACA,CAEA,MAAMsM,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvL,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMsF,CAAoB,CAE7B,OAAO,OAAOtF,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6E,EAAoB,SAAS,EACvD,OAAA7E,EAAI,UAAYT,EAChBuL,GAAgC,SAAS9K,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuL,GAAgC,WAAW,IAAI,EACxCvL,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAiBI,YAAYwL,EAAgBC,EAAuB,CAC/C,MAAMrG,EAAO9C,GAAkBkJ,EAAgBvM,EAAK,iBAAiB,EAC/DoG,EAAOjG,EACP8G,EAAOrG,EAAkB4L,EAAuBxM,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/FkH,EAAO/G,EACPiB,EAAMpB,EAAK,wBAAwBmG,EAAMC,EAAMa,EAAMC,CAAI,EAC/D,GAAI9F,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BkL,GAAgC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC5D,IACf,CAQI,IAAI,eAAgB,CAChB,MAAMlL,EAAMpB,EAAK,kCAAkC,KAAK,SAAS,EACjE,IAAIuG,EAAK5C,EAAoBvC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACpD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CASI,IAAI,qBAAsB,CACtB,MAAMnF,EAAMpB,EAAK,wCAAwC,KAAK,SAAS,EACvE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAMI,IAAI,oCAAqC,CAErC,OADYvG,EAAK,uDAAuD,KAAK,SAAS,IACvE,CACvB,CACA,CAEA,MAAMyM,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1L,GAAOf,EAAK,0BAA0Be,IAAQ,EAAG,CAAC,CAAC,EAI3E,MAAM2L,EAAe,CAExB,OAAO,OAAO3L,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOkL,GAAe,SAAS,EAClD,OAAAlL,EAAI,UAAYT,EAChB0L,GAA2B,SAASjL,EAAKA,EAAI,UAAWA,CAAG,EACpDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0L,GAA2B,WAAW,IAAI,EACnC1L,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,0BAA0Be,EAAK,CAAC,CAC7C,CAMI,IAAI,QAAS,CACT,MAAMK,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAOI,IAAI,cAAe,CACf,MAAMA,EAAMpB,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOoB,IAAQ,EAAI,OAAY4G,EAAS,OAAO5G,CAAG,CAC1D,CAMI,IAAI,qBAAsB,CAEtB,OADYpB,EAAK,mCAAmC,KAAK,SAAS,CAE1E,CAMI,IAAI,yBAA0B,CAE1B,OADYA,EAAK,uCAAuC,KAAK,SAAS,CAE9E,CAgBI,YAAYsJ,EAAQ,CAChB,MAAMlI,EAAMpB,EAAK,2BAA2B,KAAK,UAAWsJ,CAAM,EAClE,OAAOC,EAAY,OAAOnI,CAAG,CACrC,CACA,CAEA,MAAMuL,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5L,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAO/E,MAAM6L,EAAmB,CAE5B,oBAAqB,CACjB,MAAM7L,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4L,GAA+B,WAAW,IAAI,EACvC5L,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAKI,IAAI,WAAY,CAEZ,OADYf,EAAK,uCAAuC,KAAK,SAAS,CAE9E,CAKI,IAAI,UAAUsC,EAAM,CAChBtC,EAAK,uCAAuC,KAAK,UAAWsC,CAAI,CACxE,CAMI,IAAI,gBAAiB,CACjB,MAAMlB,EAAMpB,EAAK,4CAA4C,KAAK,SAAS,EAC3E,OAAO,OAAO,QAAQ,GAAIoB,CAAG,CACrC,CAMI,IAAI,eAAekB,EAAM,CACrBtC,EAAK,4CAA4C,KAAK,UAAWsC,CAAI,CAC7E,CAKI,IAAI,wBAAyB,CACzB,MAAMlB,EAAMpB,EAAK,oDAAoD,KAAK,SAAS,EACnF,OAAO,OAAO,QAAQ,GAAIoB,CAAG,CACrC,CAKI,IAAI,uBAAuBkB,EAAM,CAC7BtC,EAAK,oDAAoD,KAAK,UAAWsC,CAAI,CACrF,CAMI,IAAI,mBAAoB,CAEpB,OADYtC,EAAK,+CAA+C,KAAK,SAAS,CAEtF,CAMI,IAAI,kBAAkBsC,EAAM,CACxBtC,EAAK,+CAA+C,KAAK,UAAWsC,CAAI,CAChF,CAMI,IAAI,iBAAkB,CAClB,MAAMlB,EAAMpB,EAAK,6CAA6C,KAAK,SAAS,EAC5E,OAAOsI,EAAgB,OAAOlH,CAAG,CACzC,CAMI,IAAI,gBAAgBkB,EAAM,CACtBkB,EAAalB,EAAMgG,CAAe,EAClC,IAAInC,EAAO7D,EAAK,mBAAoB,EACpCtC,EAAK,6CAA6C,KAAK,UAAWmG,CAAI,CAC9E,CAII,aAAc,CACV,MAAM/E,EAAMpB,EAAK,uBAAwB,EACzC,YAAK,UAAYoB,IAAQ,EACzBuL,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CACA,CAEA,MAAME,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9L,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAO7E,MAAM+L,CAAiB,CAE1B,OAAO,OAAO/L,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOsL,EAAiB,SAAS,EACpD,OAAAtL,EAAI,UAAYT,EAChB8L,GAA6B,SAASrL,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8L,GAA6B,WAAW,IAAI,EACrC9L,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAQI,YAAa,CACT,MAAMK,EAAMpB,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAMI,QAAQ2L,EAAS,CACb,IAAIC,EACAC,EACJ,GAAI,CACA,MAAM9G,EAAOvF,EAAkBmM,EAAS/M,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EACPiB,EAAMpB,EAAK,yBAAyB,KAAK,UAAWmG,EAAMC,CAAI,EACpE,OAAA4G,EAAc5L,EAAI,CAAC,EACnB6L,EAAc7L,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,QAAQF,EAAS,CACb,IAAIG,EACAC,EACJ,GAAI,CACA,MAAMhH,EAAOvF,EAAkBmM,EAAS/M,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EACPiB,EAAMpB,EAAK,yBAAyB,KAAK,UAAWmG,EAAMC,CAAI,EACpE,IAAIe,EAAO/F,EAAI,CAAC,EACZgG,EAAOhG,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA+F,EAAO,EAAGC,EAAO,EACX9D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA8L,EAAc/F,EACdgG,EAAc/F,EACPpF,EAAmBmF,EAAMC,CAAI,CAChD,QAAkB,CACNpH,EAAK,gBAAgBkN,EAAaC,EAAa,CAAC,CAC5D,CACA,CASI,YAAa,CACT,MAAM/L,EAAMpB,EAAK,4BAA4B,KAAK,SAAS,EAC3D,OAAOoI,GAAU,OAAOhH,CAAG,CACnC,CACA,CAEA,MAAMgM,GAAuB,OAAO,qBAAyB,IACvD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrM,GAAOf,EAAK,mBAAmBe,IAAQ,EAAG,CAAC,CAAC,EASpE,MAAMsM,EAAQ,CAEjB,oBAAqB,CACjB,MAAMtM,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqM,GAAoB,WAAW,IAAI,EAC5BrM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,mBAAmBe,EAAK,CAAC,CACtC,CAKI,YAAYiK,EAAI,CACZ,MAAM7E,EAAOvF,EAAkBoK,EAAIhL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EoG,EAAOjG,EACPiB,EAAMpB,EAAK,YAAYmG,EAAMC,CAAI,EACvC,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BgM,GAAoB,SAAS,KAAM,KAAK,UAAW,IAAI,EAChD,IACf,CAKI,IAAI,WAAY,CACZ,IAAIzF,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,YAAa,CACb,MAAMxG,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAOoB,IAAQ,EAAI,OAAYkM,EAAW,OAAOlM,CAAG,CAC5D,CAKI,UAAW,CACP,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAM2F,GAA4B,OAAO,qBAAyB,IAC5D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxM,GAAOf,EAAK,wBAAwBe,IAAQ,EAAG,CAAC,CAAC,EAIzE,MAAMyM,EAAa,CAEtB,OAAO,OAAOzM,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOgM,GAAa,SAAS,EAChD,OAAAhM,EAAI,UAAYT,EAChBwM,GAAyB,SAAS/L,EAAKA,EAAI,UAAWA,CAAG,EAClDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwM,GAAyB,WAAW,IAAI,EACjCxM,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,wBAAwBe,EAAK,CAAC,CAC3C,CAKI,IAAI,SAAU,CACV,MAAMK,EAAMpB,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAO6K,EAAiB,OAAOzJ,CAAG,CAC1C,CAKI,IAAI,QAAQkB,EAAM,CACdkB,EAAalB,EAAMuI,CAAgB,EACnC,IAAI1E,EAAO7D,EAAK,mBAAoB,EACpCtC,EAAK,+BAA+B,KAAK,UAAWmG,CAAI,CAChE,CAKI,IAAI,YAAa,CACb,MAAM/E,EAAMpB,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAKI,IAAI,WAAWkB,EAAM,CACjBkB,EAAalB,EAAM6G,CAAmB,EACtC,IAAIhD,EAAO7D,EAAK,mBAAoB,EACpCtC,EAAK,kCAAkC,KAAK,UAAWmG,CAAI,CACnE,CACA,CAEA,MAAMsH,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1M,GAAOf,EAAK,iCAAiCe,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAM8K,EAAsB,CAE/B,OAAO,OAAO9K,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOqK,GAAsB,SAAS,EACzD,OAAArK,EAAI,UAAYT,EAChB0M,GAAkC,SAASjM,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0M,GAAkC,WAAW,IAAI,EAC1C1M,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iCAAiCe,EAAK,CAAC,CACpD,CAKI,IAAI,SAAU,CACV,MAAMK,EAAMpB,EAAK,wCAAwC,KAAK,SAAS,EACvE,OAAO8M,EAAiB,OAAO1L,CAAG,CAC1C,CAKI,IAAI,QAAQkB,EAAM,CACdkB,EAAalB,EAAMwK,CAAgB,EACnC,IAAI3G,EAAO7D,EAAK,mBAAoB,EACpCtC,EAAK,wCAAwC,KAAK,UAAWmG,CAAI,CACzE,CAKI,IAAI,SAAU,CACV,IAAIwB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,wCAAwC,KAAK,SAAS,EACvE,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,QAAQtF,EAAM,CACd,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CACA,CAEA,MAAMsH,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3M,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAOhF,MAAM4M,EAAoB,CAE7B,OAAO,OAAO5M,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmM,GAAoB,SAAS,EACvD,OAAAnM,EAAI,UAAYT,EAChB2M,GAAgC,SAASlM,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2M,GAAgC,WAAW,IAAI,EACxC3M,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,IAAI,QAAS,CACT,MAAMK,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAO4N,EAAO,OAAOxM,CAAG,CAChC,CAMI,IAAI,WAAY,CACZ,MAAMA,EAAMpB,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAKI,IAAI,WAAY,CACZ,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,iBAAkB,CAEd,OADY5H,EAAK,oCAAoC,KAAK,SAAS,IACpD,CACvB,CACA,CAEA,MAAM6N,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9M,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAO9E,MAAM+M,EAAkB,CAE3B,OAAO,OAAO/M,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOsM,GAAkB,SAAS,EACrD,OAAAtM,EAAI,UAAYT,EAChB8M,GAA8B,SAASrM,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8M,GAA8B,WAAW,IAAI,EACtC9M,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAKI,IAAI,IAAK,CAEL,OADYf,EAAK,+BAA+B,KAAK,SAAS,CAEtE,CAOI,IAAI,MAAO,CAEP,OADYA,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAKI,IAAI,SAAU,CAEV,OADYA,EAAK,oCAAoC,KAAK,SAAS,CAE3E,CAOI,YAAYgL,EAAI+C,EAAMC,EAAS,CAC3B,MAAM5M,EAAMpB,EAAK,sBAAsBgL,EAAI+C,EAAMC,CAAO,EACxD,YAAK,UAAY5M,IAAQ,EACzByM,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CAKI,IAAI,MAAO,CAEP,OADY7N,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CACA,CAEA,MAAMiO,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlN,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAU7E,MAAMmN,EAAiB,CAE1B,OAAO,OAAOnN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO0M,GAAiB,SAAS,EACpD,OAAA1M,EAAI,UAAYT,EAChBkN,GAA6B,SAASzM,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkN,GAA6B,WAAW,IAAI,EACrClN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAKI,IAAI,IAAK,CAEL,OADYf,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAQI,IAAI,MAAO,CAEP,OADYA,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAMI,YAAYgL,EAAI+C,EAAM,CAClB,MAAM3M,EAAMpB,EAAK,qBAAqBgL,EAAI+C,CAAI,EAC9C,YAAK,UAAY3M,IAAQ,EACzB6M,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACf,CAKI,IAAI,MAAO,CAEP,OADYjO,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CACA,CAEA,MAAMmO,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpN,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAS7E,MAAMqN,CAAiB,CAE1B,OAAO,OAAOrN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO4M,EAAiB,SAAS,EACpD,OAAA5M,EAAI,UAAYT,EAChBoN,GAA6B,SAAS3M,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoN,GAA6B,WAAW,IAAI,EACrCpN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAKI,IAAI,IAAK,CAEL,OADYf,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAQI,IAAI,MAAO,CAEP,OADYA,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAMI,YAAYgL,EAAI+C,EAAM,CAClB,MAAM3M,EAAMpB,EAAK,qBAAqBgL,EAAI+C,CAAI,EAC9C,YAAK,UAAY3M,IAAQ,EACzB+M,GAA6B,SAAS,KAAM,KAAK,UAAW,IAAI,EACzD,IACf,CAKI,IAAI,MAAO,CAEP,OADYnO,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CACA,CAEA,MAAMqO,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtN,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAU9E,MAAMuN,EAAkB,CAE3B,OAAO,OAAOvN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO8M,GAAkB,SAAS,EACrD,OAAA9M,EAAI,UAAYT,EAChBsN,GAA8B,SAAS7M,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsN,GAA8B,WAAW,IAAI,EACtCtN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAKI,IAAI,IAAK,CAEL,OADYf,EAAK,+BAA+B,KAAK,SAAS,CAEtE,CAQI,IAAI,MAAO,CAEP,OADYA,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAMI,YAAYgL,EAAI+C,EAAM,CAClB,MAAM3M,EAAMpB,EAAK,sBAAsBgL,EAAI+C,CAAI,EAC/C,YAAK,UAAY3M,IAAQ,EACzBiN,GAA8B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC1D,IACf,CAKI,IAAI,MAAO,CAEP,OADYrO,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CACA,CAEA,MAAMuO,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxN,GAAOf,EAAK,0BAA0Be,IAAQ,EAAG,CAAC,CAAC,EAK3E,MAAMyN,CAAe,CAExB,OAAO,OAAOzN,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOgN,EAAe,SAAS,EAClD,OAAAhN,EAAI,UAAYT,EAChBwN,GAA2B,SAAS/M,EAAKA,EAAI,UAAWA,CAAG,EACpDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwN,GAA2B,WAAW,IAAI,EACnCxN,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,0BAA0Be,EAAK,CAAC,CAC7C,CAKI,SAAU,CAEN,OADYf,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,yBAAyB,KAAK,SAAS,IACzC,CACvB,CAKI,IAAI,WAAY,CACZ,MAAMoB,EAAMpB,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAOoB,IAAQ,EAAI,OAAYqN,GAAU,OAAOrN,CAAG,CAC3D,CAMI,IAAI,wBAAyB,CACzB,MAAMA,EAAMpB,EAAK,sCAAsC,KAAK,SAAS,EACrE,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CACA,CAEA,MAAMmI,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3N,GAAOf,EAAK,iCAAiCe,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAM4N,EAAsB,CAE/B,OAAO,OAAO5N,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmN,GAAsB,SAAS,EACzD,OAAAnN,EAAI,UAAYT,EAChB2N,GAAkC,SAASlN,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2N,GAAkC,WAAW,IAAI,EAC1C3N,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iCAAiCe,EAAK,CAAC,CACpD,CAKI,IAAI,MAAO,CAEP,OADYf,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAKI,IAAI,aAAc,CAEd,OADYA,EAAK,4CAA4C,KAAK,SAAS,CAEnF,CAKI,IAAI,gBAAiB,CAEjB,OADYA,EAAK,+CAA+C,KAAK,SAAS,CAEtF,CACA,CAEA,MAAM4O,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7N,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAI9E,MAAM4F,EAAkB,CAE3B,OAAO,OAAO5F,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmF,GAAkB,SAAS,EACrD,OAAAnF,EAAI,UAAYT,EAChB6N,GAA8B,SAASpN,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6N,GAA8B,WAAW,IAAI,EACtC7N,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAKI,IAAI,iBAAkB,CAElB,OADYf,EAAK,kCAAkC,KAAK,SAAS,CAEzE,CAKI,IAAI,WAAY,CAEZ,OADYA,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CACA,CAEA,MAAM6O,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9N,GAAOf,EAAK,qBAAqBe,IAAQ,EAAG,CAAC,CAAC,EAOtE,MAAM+N,EAAU,CAEnB,oBAAqB,CACjB,MAAM/N,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8N,GAAsB,WAAW,IAAI,EAC9B9N,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,qBAAqBe,EAAK,CAAC,CACxC,CAuBI,OAAO,gBAAgBgO,EAAMC,EAAYC,EAAc,CACnD,OAAAzL,EAAauL,EAAMjH,EAAiB,EACpCtE,EAAayL,EAAcC,CAAW,EAC1BlP,EAAK,0BAA0B+O,EAAK,UAAWC,EAAYC,EAAa,SAAS,CAErG,CAyBI,OAAO,mBAAmBE,EAAUH,EAAYC,EAAc,CAC1D,MAAM9I,EAAOvC,EAAwBuL,EAAUnP,EAAK,iBAAiB,EAC/DoG,EAAOjG,EACb,OAAAqD,EAAayL,EAAcC,CAAW,EAC1BlP,EAAK,6BAA6BmG,EAAMC,EAAM4I,EAAYC,EAAa,SAAS,CAEpG,CAyBI,OAAO,sBAAsBE,EAAUH,EAAYC,EAAc,CAC7D,MAAM9I,EAAOvC,EAAwBuL,EAAUnP,EAAK,iBAAiB,EAC/DoG,EAAOjG,EACb,OAAAqD,EAAayL,EAAcC,CAAW,EAC1BlP,EAAK,gCAAgCmG,EAAMC,EAAM4I,EAAYC,EAAa,SAAS,CAEvG,CACA,CAEA,MAAMG,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrO,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAKvE,MAAMsO,EAAW,CAEpB,OAAO,OAAOtO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6N,GAAW,SAAS,EAC9C,OAAA7N,EAAI,UAAYT,EAChBqO,GAAuB,SAAS5N,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqO,GAAuB,WAAW,IAAI,EAC/BrO,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAOI,aAAc,CACV,MAAMK,EAAMpB,EAAK,eAAgB,EACjC,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BgO,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACf,CA6BI,OAAO,WAAWE,EAASnF,EAAWoF,EAAYC,EAAkB,CAChEhM,EAAa8L,EAASvH,CAAM,EAC5BvE,EAAa2G,EAAWnC,CAAQ,EAChC,IAAI7B,EAAOlE,EAAWsN,CAAU,EAAI,EAAI3O,EAAkB2O,EAAYvP,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHoG,EAAOjG,EACP8G,EAAOhF,EAAWuN,CAAgB,EAAI,EAAI5O,EAAkB4O,EAAkBxP,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HkH,EAAO/G,EAEX,OADYH,EAAK,sBAAsBsP,EAAQ,UAAWnF,EAAU,UAAWhE,EAAMC,EAAMa,EAAMC,CAAI,CAE7G,CAmBI,OAAO,cAAcoI,EAASnF,EAAW8E,EAAc,CACnD,OAAAzL,EAAa8L,EAASvH,CAAM,EAC5BvE,EAAa2G,EAAWnC,CAAQ,EAChCxE,EAAayL,EAAcC,CAAW,EAC1BlP,EAAK,yBAAyBsP,EAAQ,UAAWnF,EAAU,UAAW8E,EAAa,SAAS,CAEhH,CAKI,IAAI,QAAS,CACT,MAAM7N,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMpB,EAAK,oBAAoB,KAAK,SAAS,EACnD,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAWI,IAAI,sBAAuB,CAEvB,OADYpB,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAKI,IAAI,cAAe,CACf,MAAMoB,EAAMpB,EAAK,wBAAwB,KAAK,SAAS,EACvD,OAAOwN,GAAa,OAAOpM,CAAG,CACtC,CAKI,IAAI,aAAc,CAEd,OADYpB,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CASI,IAAI,wBAAyB,CAEzB,OADYA,EAAK,kCAAkC,KAAK,SAAS,IAClD,CACvB,CAKI,IAAI,uBAAuByP,EAAS,CAChCzP,EAAK,sCAAsC,KAAK,UAAWyP,CAAO,CAC1E,CASI,IAAI,0BAA2B,CAE3B,OADYzP,EAAK,oCAAoC,KAAK,SAAS,IACpD,CACvB,CAKI,IAAI,yBAAyByP,EAAS,CAClCzP,EAAK,wCAAwC,KAAK,UAAWyP,CAAO,CAC5E,CAUI,cAAe,CACX,MAAMrO,EAAMpB,EAAK,wBAAwB,KAAK,SAAS,EACvD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAyBI,mBAAmBsO,EAAO,CACtB,MAAMvJ,EAAOvC,EAAwB8L,EAAO1P,EAAK,iBAAiB,EAC5DoG,EAAOjG,EAEb,OADYH,EAAK,8BAA8B,KAAK,UAAWmG,EAAMC,CAAI,CAEjF,CAQI,4BAA6B,CAEzB,OADYpG,EAAK,sCAAsC,KAAK,SAAS,CAE7E,CAiCI,mBAAmB2P,EAAkBC,EAAiBC,EAAsBC,EAAsB,CAC9F,MAAM3J,EAAOvF,EAAkB+O,EAAkB3P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC1FoG,EAAOjG,EACbqD,EAAaoM,EAAiBrE,EAAW,EACzC,MAAMnK,EAAMpB,EAAK,8BAA8B,KAAK,UAAWmG,EAAMC,EAAMwJ,EAAgB,UAAWC,EAAsB5N,EAAW6N,CAAoB,EAAI,EAAIvO,EAAqBuO,CAAoB,CAAC,EAC7M,GAAI1O,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAkBI,kBAAmB,CAEf,OADYpB,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CAkBI,kBAAkB+P,EAAYC,EAAcC,EAAU,CAClD,MAAM9J,EAAOvF,EAAkBmP,EAAY/P,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFoG,EAAOjG,EACP8G,EAAOrG,EAAkBqP,EAAUjQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAClFkH,EAAO/G,EACPiB,EAAMpB,EAAK,6BAA6B,KAAK,UAAWmG,EAAMC,EAAM4J,EAAc/I,EAAMC,CAAI,EAClG,GAAI9F,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CA0CI,iBAAiB8O,EAAS1F,EAAYC,EAAS,CAC3CjH,EAAa0M,EAAStC,CAAM,EAC5B,MAAMzH,EAAOvF,EAAkB4J,EAAYxK,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFoG,EAAOjG,EACP8G,EAAOrG,EAAkB6J,EAASzK,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFkH,EAAO/G,EACPiB,EAAMpB,EAAK,4BAA4B,KAAK,UAAWkQ,EAAQ,UAAW/J,EAAMC,EAAMa,EAAMC,CAAI,EACtG,GAAI9F,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAkBI,iBAAiB+O,EAAOD,EAASE,EAAqB,CAClD,MAAMjK,EAAOvF,EAAkBuP,EAAOnQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EoG,EAAOjG,EACbqD,EAAa0M,EAAStC,CAAM,EAC5BpK,EAAa4M,EAAqB3G,EAAkB,EACpD,MAAMrI,EAAMpB,EAAK,4BAA4B,KAAK,UAAWmG,EAAMC,EAAM8J,EAAQ,UAAWE,EAAoB,SAAS,EACzH,GAAIhP,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAsBI,2BAA2B+O,EAAOD,EAAS,CACvC,MAAM/J,EAAOvF,EAAkBuP,EAAOnQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EoG,EAAOjG,EACbqD,EAAa0M,EAAStC,CAAM,EAC5B,MAAMxM,EAAMpB,EAAK,sCAAsC,KAAK,UAAWmG,EAAMC,EAAM8J,EAAQ,SAAS,EACpG,GAAI9O,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAQI,oBAAqB,CAEjB,OADYpB,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAgBI,qBAAsB,CAElB,OADYA,EAAK,+BAA+B,KAAK,SAAS,CAEtE,CAoBI,oBAAoBqQ,EAAQ,CACxB7M,EAAa6M,EAAQC,CAAa,EAClC,IAAInK,EAAOkK,EAAO,mBAAoB,EAEtC,OADYrQ,EAAK,+BAA+B,KAAK,UAAWmG,CAAI,CAE5E,CAWI,wBAAyB,CAErB,OADYnG,EAAK,kCAAkC,KAAK,SAAS,CAEzE,CAYI,uBAAuBuQ,EAAYC,EAAkBC,EAAkB,CACnE,IAAItK,EAAOlE,EAAWsO,CAAU,EAAI,EAAI3P,EAAkB2P,EAAYvQ,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHoG,EAAOjG,EACP8G,EAAOhF,EAAWuO,CAAgB,EAAI,EAAI5P,EAAkB4P,EAAkBxQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HkH,EAAO/G,EACPgH,EAAOlF,EAAWwO,CAAgB,EAAI,EAAI7P,EAAkB6P,EAAkBzQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HoH,EAAOjH,EAEX,OADYH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,EAAMa,EAAMC,EAAMC,EAAMC,CAAI,CAE7G,CAyBI,sBAAsBsJ,EAAO,CAEzB,OADY1Q,EAAK,iCAAiC,KAAK,UAAW0Q,CAAK,CAE/E,CASI,YAAYpB,EAAS,CACjB,OAAA9L,EAAa8L,EAASvH,CAAM,EAChB/H,EAAK,uBAAuB,KAAK,UAAWsP,EAAQ,SAAS,CAEjF,CAOI,KAAKvC,EAAS,CACV,MAAM5G,EAAOvF,EAAkBmM,EAAS/M,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EAEb,OADYH,EAAK,gBAAgB,KAAK,UAAWmG,EAAMC,CAAI,CAEnE,CAUI,uBAAuB8J,EAAS,CAC5B,OAAA1M,EAAa0M,EAAStC,CAAM,EAChB5N,EAAK,kCAAkC,KAAK,UAAWkQ,EAAQ,SAAS,CAE5F,CAoBI,aAAaA,EAASR,EAAOiB,EAAqB,CAC9CnN,EAAa0M,EAAStC,CAAM,EAC5B,MAAMzH,EAAOvC,EAAwB8L,EAAO1P,EAAK,iBAAiB,EAC5DoG,EAAOjG,EACb,OAAAqD,EAAamN,EAAqB/D,EAAkB,EACxC5M,EAAK,wBAAwB,KAAK,UAAWkQ,EAAQ,UAAW/J,EAAMC,EAAMuK,EAAoB,SAAS,CAE7H,CAeI,kBAAkBjB,EAAO,CACrB,MAAMvJ,EAAOvC,EAAwB8L,EAAO1P,EAAK,iBAAiB,EAC5DoG,EAAOjG,EACPiB,EAAMpB,EAAK,6BAA6B,KAAK,UAAWmG,EAAMC,CAAI,EACxE,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOgN,EAAiB,OAAOhN,EAAI,CAAC,CAAC,CAC7C,CAiCI,mBAAmBsO,EAAO,CACtB,MAAMvJ,EAAOvC,EAAwB8L,EAAO1P,EAAK,iBAAiB,EAC5DoG,EAAOjG,EAEb,OADYH,EAAK,8BAA8B,KAAK,UAAWmG,EAAMC,CAAI,CAEjF,CAsBI,eAAekJ,EAASsB,EAAc,CAClC,OAAApN,EAAa8L,EAASvH,CAAM,EAChB/H,EAAK,0BAA0B,KAAK,UAAWsP,EAAQ,UAAW,CAACrN,EAAW2O,CAAY,EAAG3O,EAAW2O,CAAY,EAAI,EAAIA,CAAY,CAE5J,CAyBI,UAAUtB,EAASnF,EAAWyG,EAAc,CACxC,OAAApN,EAAa8L,EAASvH,CAAM,EAC5BvE,EAAa2G,EAAWnC,CAAQ,EACpBhI,EAAK,qBAAqB,KAAK,UAAWsP,EAAQ,UAAWnF,EAAU,UAAW,CAAClI,EAAW2O,CAAY,EAAG3O,EAAW2O,CAAY,EAAI,EAAIA,CAAY,CAE5K,CAaI,gBAAgBtB,EAASuB,EAAS,CAC9BrN,EAAa8L,EAASvH,CAAM,EAC5B,MAAM5B,EAAOvF,EAAkBiQ,EAAS7Q,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EACPiB,EAAMpB,EAAK,2BAA2B,KAAK,UAAWsP,EAAQ,UAAWnJ,EAAMC,CAAI,EACzF,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAOI,uBAAuBkO,EAASuB,EAAS,CACrCrN,EAAa8L,EAASvH,CAAM,EAC5B,MAAM5B,EAAOvF,EAAkBiQ,EAAS7Q,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EACPiB,EAAMpB,EAAK,kCAAkC,KAAK,UAAWsP,EAAQ,UAAWnJ,EAAMC,CAAI,EAChG,OAAOhF,IAAQ,EAAI,OAAY0P,EAAoB,OAAO1P,CAAG,CACrE,CAMI,wBAAwBkO,EAAS,CAC7B,OAAA9L,EAAa8L,EAASvH,CAAM,EAChB/H,EAAK,mCAAmC,KAAK,UAAWsP,EAAQ,SAAS,CAE7F,CAUI,yBAAyBa,EAAOD,EAAS,CACrC,MAAM/J,EAAOvF,EAAkBuP,EAAOnQ,EAAK,kBAAmBA,EAAK,kBAAkB,EAC/EoG,EAAOjG,EACbqD,EAAa0M,EAAStC,CAAM,EAC5B,MAAMxM,EAAMpB,EAAK,oCAAoC,KAAK,UAAWmG,EAAMC,EAAM8J,EAAQ,SAAS,EAClG,GAAI9O,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAcI,eAAe2P,EAAW,CAEtB,OADY/Q,EAAK,0BAA0B,KAAK,UAAW+Q,CAAS,CAE5E,CAmBI,eAAeC,EAAoBC,EAAmB,CAClD,MAAM9K,EAAOvF,EAAkBoQ,EAAoBhR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FoG,EAAOjG,EACPiB,EAAMpB,EAAK,0BAA0B,KAAK,UAAWmG,EAAMC,EAAM6K,CAAiB,EACxF,GAAI7P,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAgBI,uBAAuB4P,EAAoBC,EAAmB,CAC1D,MAAM9K,EAAOvF,EAAkBoQ,EAAoBhR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FoG,EAAOjG,EACPiB,EAAMpB,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,EAAM6K,CAAiB,EAChG,GAAI7P,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAyBI,uBAAuB8P,EAAqBD,EAAmBE,EAAgB,CAC3E,MAAMhL,EAAOvF,EAAkBuQ,EAAgBnR,EAAK,kBAAmBA,EAAK,kBAAkB,EACxFoG,EAAOjG,EACPiB,EAAMpB,EAAK,kCAAkC,KAAK,UAAWkR,EAAqBjP,EAAWgP,CAAiB,EAAI,EAAI1P,EAAqB0P,CAAiB,EAAG9K,EAAMC,CAAI,EAC/K,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAYI,wBAAwBgQ,EAAgBpD,EAAS,CAC7CxK,EAAa4N,EAAgB3K,CAAmB,EAChD,MAAMN,EAAOvF,EAAkBoN,EAAShO,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFoG,EAAOjG,EAEb,OADYH,EAAK,mCAAmC,KAAK,UAAWoR,EAAe,UAAWjL,EAAMC,CAAI,CAEhH,CAMI,eAAgB,CAEZ,OADYpG,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CAsBI,aAAaqR,EAAa,CACtB,MAAMjQ,EAAMpB,EAAK,wBAAwB,KAAK,UAAWqR,CAAW,EACpE,GAAIjQ,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAeI,eAAekQ,EAAoBtD,EAAS,CACxC,MAAM7H,EAAOvF,EAAkB0Q,EAAoBtR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FoG,EAAOjG,EACP8G,EAAOrG,EAAkBoN,EAAShO,EAAK,kBAAmBA,EAAK,kBAAkB,EACjFkH,EAAO/G,EACPiB,EAAMpB,EAAK,0BAA0B,KAAK,UAAWmG,EAAMC,EAAMa,EAAMC,CAAI,EACjF,GAAI9F,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAUI,iBAAkB,CAEd,OADYpB,EAAK,2BAA2B,KAAK,SAAS,CAElE,CAUI,eAAgB,CAEZ,OADYA,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CAQI,gBAAiB,CAEb,OADYA,EAAK,0BAA0B,KAAK,SAAS,CAEjE,CAMI,eAAgB,CAEZ,OADYA,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CAiBI,OAAO,wBAAwBgR,EAAoBO,EAAYC,EAAQ,CACnE,IAAIC,EACAC,EACJ,GAAI,CACA,MAAMvL,EAAOvF,EAAkBoQ,EAAoBhR,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5FoG,EAAOjG,EACP8G,EAAOrG,EAAkB2Q,EAAYvR,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFkH,EAAO/G,EACPiB,EAAMpB,EAAK,mCAAmCmG,EAAMC,EAAMa,EAAMC,EAAMsK,CAAM,EAClF,IAAIG,EAAOvQ,EAAI,CAAC,EACZwQ,EAAOxQ,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAAuQ,EAAO,EAAGC,EAAO,EACXtO,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAAqQ,EAAcE,EACdD,EAAcE,EACP5P,EAAmB2P,EAAMC,CAAI,CAChD,QAAkB,CACN5R,EAAK,gBAAgByR,EAAaC,EAAa,CAAC,CAC5D,CACA,CAWI,OAAO,wBAAwBG,EAA8BN,EAAY,CACrE,IAAIE,EACAC,EACJ,GAAI,CACA,MAAMvL,EAAOvF,EAAkBiR,EAA8B7R,EAAK,kBAAmBA,EAAK,kBAAkB,EACtGoG,EAAOjG,EACP8G,EAAOrG,EAAkB2Q,EAAYvR,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFkH,EAAO/G,EACPiB,EAAMpB,EAAK,mCAAmCmG,EAAMC,EAAMa,EAAMC,CAAI,EAC1E,IAAIyK,EAAOvQ,EAAI,CAAC,EACZwQ,EAAOxQ,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAAuQ,EAAO,EAAGC,EAAO,EACXtO,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAAqQ,EAAcE,EACdD,EAAcE,EACP5P,EAAmB2P,EAAMC,CAAI,CAChD,QAAkB,CACN5R,EAAK,gBAAgByR,EAAaC,EAAa,CAAC,CAC5D,CACA,CAUI,+BAA+BI,EAAU,CAErC,OADY9R,EAAK,0CAA0C,KAAK,UAAW8R,CAAQ,CAE3F,CAUI,iCAAiCA,EAAU,CAEvC,OADY9R,EAAK,4CAA4C,KAAK,UAAW8R,CAAQ,CAE7F,CAUI,oCAAoCA,EAAU,CAE1C,OADY9R,EAAK,+CAA+C,KAAK,UAAW8R,CAAQ,CAEhG,CAUI,+BAA+BA,EAAU,CAErC,OADY9R,EAAK,0CAA0C,KAAK,UAAW8R,CAAQ,CAE3F,CA4BI,8BAA8BA,EAAU,CAEpC,OADY9R,EAAK,yCAAyC,KAAK,UAAW8R,CAAQ,CAE1F,CAwBI,oBAAoBC,EAAa,CAC7B,MAAM5L,EAAOvF,EAAkBmR,EAAa/R,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFoG,EAAOjG,EAEb,OADYH,EAAK,+BAA+B,KAAK,UAAWmG,EAAMC,CAAI,CAElF,CAaI,uBAAuB2L,EAAa,CAChC,MAAM5L,EAAOvF,EAAkBmR,EAAa/R,EAAK,kBAAmBA,EAAK,kBAAkB,EACrFoG,EAAOjG,EAEb,OADYH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CAErF,CAmBI,+BAAgC,CAE5B,OADYpG,EAAK,yCAAyC,KAAK,SAAS,CAEhF,CAaI,gBAAgBkQ,EAAS,CACrB,OAAA1M,EAAa0M,EAAStC,CAAM,EAChB5N,EAAK,2BAA2B,KAAK,UAAWkQ,EAAQ,SAAS,CAErF,CAeI,gBAAgBA,EAAS8B,EAAe,CACpC,OAAAxO,EAAa0M,EAAStC,CAAM,EAC5BpK,EAAawO,EAAeC,CAAY,EAC5BjS,EAAK,2BAA2B,KAAK,UAAWkQ,EAAQ,UAAW8B,EAAc,SAAS,CAE9G,CAKI,mBAAoB,CAChB,MAAM5Q,EAAMpB,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAOkK,GAAkB,OAAO9I,CAAG,CAC3C,CASI,OAAQ,CACJ,MAAML,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iBAAiBe,CAAG,CACjC,CACA,CAEA,MAAMmR,GAAiC,OAAO,qBAAyB,IACjE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnR,GAAOf,EAAK,6BAA6Be,IAAQ,EAAG,CAAC,CAAC,EAW9E,MAAMoR,EAAkB,CAE3B,OAAO,OAAOpR,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO2Q,GAAkB,SAAS,EACrD,OAAA3Q,EAAI,UAAYT,EAChBmR,GAA8B,SAAS1Q,EAAKA,EAAI,UAAWA,CAAG,EACvDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmR,GAA8B,WAAW,IAAI,EACtCnR,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,6BAA6Be,EAAK,CAAC,CAChD,CAKI,YAAa,CAET,OADYf,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAcI,QAAS,CAEL,OADYA,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CASI,oBAAoBkQ,EAASkC,EAAkB7H,EAAS,CACpD/G,EAAa0M,EAAStC,CAAM,EAC5BpK,EAAa4O,EAAkB/E,EAAO,EACtC,IAAIlH,EAAOlE,EAAWsI,CAAO,EAAI,EAAI3G,EAAwB2G,EAASvK,EAAK,iBAAiB,EACxFoG,EAAOjG,EACX,MAAMiB,EAAMpB,EAAK,sCAAsC,KAAK,UAAWkQ,EAAQ,UAAWkC,EAAiB,UAAWjM,EAAMC,CAAI,EAChI,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAO0P,EAAoB,OAAO1P,EAAI,CAAC,CAAC,CAChD,CAYI,2BAA2BmJ,EAAS,CAChC,IAAI2C,EACAC,EACJ,GAAI,CACA,IAAIhH,EAAOlE,EAAWsI,CAAO,EAAI,EAAI3G,EAAwB2G,EAASvK,EAAK,iBAAiB,EACxFoG,EAAOjG,EACX,MAAMiB,EAAMpB,EAAK,6CAA6C,KAAK,UAAWmG,EAAMC,CAAI,EACxF,IAAIe,EAAO/F,EAAI,CAAC,EACZgG,EAAOhG,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA+F,EAAO,EAAGC,EAAO,EACX9D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA8L,EAAc/F,EACdgG,EAAc/F,EACPpF,EAAmBmF,EAAMC,CAAI,CAChD,QAAkB,CACNpH,EAAK,gBAAgBkN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,WAAY,CACZ,IAAIH,EACAC,EACJ,GAAI,CACA,MAAM7L,EAAMpB,EAAK,4BAA4B,KAAK,SAAS,EAC3D,IAAIiH,EAAO7F,EAAI,CAAC,EACZ8F,EAAO9F,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA6F,EAAO,EAAGC,EAAO,EACX5D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA4L,EAAc/F,EACdgG,EAAc/F,EACPlF,EAAmBiF,EAAMC,CAAI,CAChD,QAAkB,CACNlH,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7L,EAAMpB,EAAK,iCAAiC,KAAK,SAAS,EAChE,IAAIiH,EAAO7F,EAAI,CAAC,EACZ8F,EAAO9F,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA6F,EAAO,EAAGC,EAAO,EACX5D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA4L,EAAc/F,EACdgG,EAAc/F,EACPlF,EAAmBiF,EAAMC,CAAI,CAChD,QAAkB,CACNlH,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,qBAAsB,CAElB,OADYjN,EAAK,sCAAsC,KAAK,SAAS,CAE7E,CAeI,2BAA4B,CAExB,OADYA,EAAK,4CAA4C,KAAK,SAAS,IAC5D,CACvB,CAQI,uBAAwB,CAEpB,OADYA,EAAK,wCAAwC,KAAK,SAAS,IACxD,CACvB,CASI,sBAAuB,CAEnB,OADYA,EAAK,uCAAuC,KAAK,SAAS,CAE9E,CAYI,0BAA2B,CAEvB,OADYA,EAAK,2CAA2C,KAAK,SAAS,IAC3D,CACvB,CACA,CAEA,MAAMqS,GAAsC,OAAO,qBAAyB,IACtE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtR,GAAOf,EAAK,kCAAkCe,IAAQ,EAAG,CAAC,CAAC,EAInF,MAAMgL,EAAuB,CAEhC,OAAO,OAAOhL,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOuK,GAAuB,SAAS,EAC1D,OAAAvK,EAAI,UAAYT,EAChBsR,GAAmC,SAAS7Q,EAAKA,EAAI,UAAWA,CAAG,EAC5DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsR,GAAmC,WAAW,IAAI,EAC3CtR,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kCAAkCe,EAAK,CAAC,CACrD,CAKI,IAAI,SAAU,CACV,MAAMK,EAAMpB,EAAK,wCAAwC,KAAK,SAAS,EACvE,OAAO8M,EAAiB,OAAO1L,CAAG,CAC1C,CAKI,IAAI,QAAQkB,EAAM,CACdkB,EAAalB,EAAMwK,CAAgB,EACnC,IAAI3G,EAAO7D,EAAK,mBAAoB,EACpCtC,EAAK,wCAAwC,KAAK,UAAWmG,CAAI,CACzE,CAKI,IAAI,iBAAkB,CAClB,IAAIwB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,iDAAiD,KAAK,SAAS,EAChF,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAgBtF,EAAM,CACtB,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CACA,CAEA,MAAMkM,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvR,GAAOf,EAAK,2BAA2Be,IAAQ,EAAG,CAAC,CAAC,EAM5E,MAAMwR,EAAgB,CAEzB,OAAO,OAAOxR,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO+Q,GAAgB,SAAS,EACnD,OAAA/Q,EAAI,UAAYT,EAChBuR,GAA4B,SAAS9Q,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuR,GAA4B,WAAW,IAAI,EACpCvR,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,2BAA2Be,EAAK,CAAC,CAC9C,CAKI,YAAa,CAET,OADYf,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAUI,QAAS,CAEL,OADYA,EAAK,uBAAuB,KAAK,SAAS,CAE9D,CAMI,oBAAoBuK,EAAS,CACzB,IAAIpE,EAAOlE,EAAWsI,CAAO,EAAI,EAAI3G,EAAwB2G,EAASvK,EAAK,iBAAiB,EACxFoG,EAAOjG,EACX,MAAMiB,EAAMpB,EAAK,oCAAoC,KAAK,UAAWmG,EAAMC,CAAI,EAC/E,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAMI,oBAAqB,CAEjB,OADYpB,EAAK,mCAAmC,KAAK,SAAS,CAE1E,CAKI,IAAI,WAAY,CACZ,IAAIgN,EACAC,EACJ,GAAI,CACA,MAAM7L,EAAMpB,EAAK,0BAA0B,KAAK,SAAS,EACzD,IAAIiH,EAAO7F,EAAI,CAAC,EACZ8F,EAAO9F,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA6F,EAAO,EAAGC,EAAO,EACX5D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA4L,EAAc/F,EACdgG,EAAc/F,EACPlF,EAAmBiF,EAAMC,CAAI,CAChD,QAAkB,CACNlH,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7L,EAAMpB,EAAK,+BAA+B,KAAK,SAAS,EAC9D,IAAIiH,EAAO7F,EAAI,CAAC,EACZ8F,EAAO9F,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA6F,EAAO,EAAGC,EAAO,EACX5D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA4L,EAAc/F,EACdgG,EAAc/F,EACPlF,EAAmBiF,EAAMC,CAAI,CAChD,QAAkB,CACNlH,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAM7L,EAAMpB,EAAK,+BAA+B,KAAK,SAAS,EAC9D,IAAIiH,EAAO7F,EAAI,CAAC,EACZ8F,EAAO9F,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA6F,EAAO,EAAGC,EAAO,EACX5D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA4L,EAAc/F,EACdgG,EAAc/F,EACPlF,EAAmBiF,EAAMC,CAAI,CAChD,QAAkB,CACNlH,EAAK,gBAAgBgN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAOI,uBAAwB,CAEpB,OADYjN,EAAK,sCAAsC,KAAK,SAAS,IACtD,CACvB,CASI,sBAAuB,CAEnB,OADYA,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAYI,0BAA2B,CAEvB,OADYA,EAAK,yCAAyC,KAAK,SAAS,IACzD,CACvB,CACA,CAEA,MAAMwS,GAA0C,OAAO,qBAAyB,IAC1E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzR,GAAOf,EAAK,sCAAsCe,IAAQ,EAAG,CAAC,CAAC,EAOvF,MAAM0R,EAA2B,CAEpC,OAAO,SAASC,EAAS,CACrB,OAAMA,aAAmBD,GAGlBC,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAM3R,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByR,GAAuC,WAAW,IAAI,EAC/CzR,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sCAAsCe,EAAK,CAAC,CACzD,CAMI,IAAI,QAAS,CACT,IAAI4G,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,4CAA4C,KAAK,SAAS,EAC3E,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,OAAOtF,EAAM,CACb,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CAKI,IAAI,WAAY,CACZ,IAAIuB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,+CAA+C,KAAK,SAAS,EAC9E,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,UAAUtF,EAAM,CAChB,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,6CAA6C,KAAK,UAAWmG,EAAMC,CAAI,CACpF,CAkBI,IAAI,kBAAmB,CACnB,MAAMhF,EAAMpB,EAAK,sDAAsD,KAAK,SAAS,EACrF,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAkBI,IAAI,iBAAiBjE,EAAM,CACvB,IAAI6D,EAAOlE,EAAWK,CAAI,EAAI,EAAI1B,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EACrGoG,EAAOjG,EACXH,EAAK,8CAA8C,KAAK,UAAWmG,EAAMC,CAAI,CACrF,CAQI,IAAI,QAAS,CACT,MAAMhF,EAAMpB,EAAK,4CAA4C,KAAK,SAAS,EAC3E,OAAOoB,IAAQ,EAAI,OAAYwM,EAAO,OAAOxM,CAAG,CACxD,CAQI,IAAI,OAAOkB,EAAM,CACb,IAAI6D,EAAO,EACNlE,EAAWK,CAAI,IAChBkB,EAAalB,EAAMsL,CAAM,EACzBzH,EAAO7D,EAAK,mBAAoB,GAEpCtC,EAAK,4CAA4C,KAAK,UAAWmG,CAAI,CAC7E,CAMI,IAAI,UAAW,CAEX,OADYnG,EAAK,8CAA8C,KAAK,SAAS,IAC9D,CACvB,CAMI,IAAI,SAASsC,EAAM,CACftC,EAAK,8CAA8C,KAAK,UAAWsC,CAAI,CAC/E,CAKI,IAAI,UAAW,CAEX,OADYtC,EAAK,8CAA8C,KAAK,SAAS,IAC9D,CACvB,CAKI,IAAI,SAASsC,EAAM,CACftC,EAAK,8CAA8C,KAAK,UAAWsC,CAAI,CAC/E,CAII,aAAc,CACV,MAAMlB,EAAMpB,EAAK,+BAAgC,EACjD,YAAK,UAAYoB,IAAQ,EACzBoR,GAAuC,SAAS,KAAM,KAAK,UAAW,IAAI,EACnE,IACf,CACA,CAEA,MAAMG,GAA8B,OAAO,qBAAyB,IAC9D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5R,GAAOf,EAAK,0BAA0Be,IAAQ,EAAG,CAAC,CAAC,EAQ3E,MAAM6R,EAAe,CAExB,OAAO,SAASF,EAAS,CACrB,OAAMA,aAAmBE,GAGlBF,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAM3R,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4R,GAA2B,WAAW,IAAI,EACnC5R,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,0BAA0Be,EAAK,CAAC,CAC7C,CAMI,IAAI,QAAS,CACT,IAAI4G,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,gCAAgC,KAAK,SAAS,EAC/D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,OAAOtF,EAAM,CACb,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,kCAAkC,KAAK,UAAWmG,EAAMC,CAAI,CACzE,CAMI,IAAI,WAAY,CACZ,IAAIuB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,mCAAmC,KAAK,SAAS,EAClE,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,UAAUtF,EAAM,CAChB,MAAM6D,EAAOvF,EAAkB0B,EAAMtC,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACbH,EAAK,6CAA6C,KAAK,UAAWmG,EAAMC,CAAI,CACpF,CAKI,IAAI,yBAA0B,CAE1B,OADYpG,EAAK,iDAAiD,KAAK,SAAS,IACjE,CACvB,CAKI,IAAI,wBAAwBsC,EAAM,CAC9BtC,EAAK,iDAAiD,KAAK,UAAWsC,CAAI,CAClF,CAKI,IAAI,cAAe,CAEf,OADYtC,EAAK,sCAAsC,KAAK,SAAS,CAE7E,CAKI,IAAI,aAAasC,EAAM,CACnBtC,EAAK,sCAAsC,KAAK,UAAWsC,CAAI,CACvE,CAKI,IAAI,aAAc,CAEd,OADYtC,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAKI,IAAI,YAAYsC,EAAM,CAClBtC,EAAK,qCAAqC,KAAK,UAAWsC,CAAI,CACtE,CAII,aAAc,CACV,MAAMlB,EAAMpB,EAAK,mBAAoB,EACrC,YAAK,UAAYoB,IAAQ,EACzBuR,GAA2B,SAAS,KAAM,KAAK,UAAW,IAAI,EACvD,IACf,CACA,CAEA,MAAME,GAA0C,OAAO,qBAAyB,IAC1E,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9R,GAAOf,EAAK,sCAAsCe,IAAQ,EAAG,CAAC,CAAC,EAIvF,MAAM+R,EAA2B,CAEpC,OAAO,OAAO/R,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOsR,GAA2B,SAAS,EAC9D,OAAAtR,EAAI,UAAYT,EAChB8R,GAAuC,SAASrR,EAAKA,EAAI,UAAWA,CAAG,EAChEA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8R,GAAuC,WAAW,IAAI,EAC/C9R,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sCAAsCe,EAAK,CAAC,CACzD,CAOI,IAAI,MAAO,CAEP,OADYf,EAAK,0CAA0C,KAAK,SAAS,CAEjF,CAKI,YAAY+N,EAAM,CACd,MAAM3M,EAAMpB,EAAK,+BAA+B+N,CAAI,EACpD,YAAK,UAAY3M,IAAQ,EACzByR,GAAuC,SAAS,KAAM,KAAK,UAAW,IAAI,EACnE,IACf,CACA,CAEA,MAAME,GAAkB,OAAO,qBAAyB,IAClD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhS,GAAOf,EAAK,cAAce,IAAQ,EAAG,CAAC,CAAC,EAI/D,MAAMiS,EAAG,CAEZ,OAAO,OAAOjS,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOwR,GAAG,SAAS,EACtC,OAAAxR,EAAI,UAAYT,EAChBgS,GAAe,SAASvR,EAAKA,EAAI,UAAWA,CAAG,EACxCA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgS,GAAe,WAAW,IAAI,EACvBhS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,cAAce,EAAK,CAAC,CACjC,CAOI,OAAQ,CAEJ,OADYf,EAAK,SAAS,KAAK,SAAS,CAEhD,CASI,gBAAiB,CAEb,OADYA,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,kBAAmB,CAEf,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,IAAI,QAAS,CACT,MAAMoB,EAAMpB,EAAK,UAAU,KAAK,SAAS,EACzC,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAMI,IAAI,aAAc,CACd,MAAMA,EAAMpB,EAAK,eAAe,KAAK,SAAS,EAC9C,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,eAAgB,CAChB,MAAMA,EAAMpB,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAKI,WAAY,CAER,OADYpB,EAAK,aAAa,KAAK,SAAS,IAC7B,CACvB,CAMI,YAAa,CACT,MAAMoB,EAAMpB,EAAK,cAAc,KAAK,SAAS,EAC7C,OAAOoB,IAAQ,EAAI,OAAY8G,EAAW,OAAO9G,CAAG,CAC5D,CAKI,QAAS,CAEL,OADYpB,EAAK,UAAU,KAAK,SAAS,IAC1B,CACvB,CAKI,aAAc,CAEV,OADYA,EAAK,eAAe,KAAK,SAAS,IAC/B,CACvB,CAKI,oBAAqB,CAEjB,OADYA,EAAK,sBAAsB,KAAK,SAAS,IACtC,CACvB,CAMI,cAAe,CAEX,OADYA,EAAK,gBAAgB,KAAK,SAAS,IAChC,CACvB,CAMI,IAAI,QAAS,CACT,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,UAAU,KAAK,SAAS,EACzC,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,QAAS,CACT,MAAMxG,EAAMpB,EAAK,UAAU,KAAK,SAAS,EACzC,OAAOoB,IAAQ,EAAI,OAAYwM,EAAO,OAAOxM,CAAG,CACxD,CAcI,UAAW,CACP,MAAMA,EAAMpB,EAAK,YAAY,KAAK,SAAS,EAC3C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAO6R,GAAO,OAAO7R,EAAI,CAAC,CAAC,CACnC,CASI,SAAU,CACN,MAAMA,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CASI,aAAc,CACV,MAAMA,EAAMpB,EAAK,eAAe,KAAK,SAAS,EAC9C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAQI,iBAAkB,CACd,MAAMA,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAQI,QAAS,CACL,MAAMA,EAAMpB,EAAK,UAAU,KAAK,SAAS,EACzC,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAWI,eAAeD,EAAM,CACjB,MAAMgF,EAAOvF,EAAkBO,EAAMnB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACPiB,EAAMpB,EAAK,kBAAkB,KAAK,UAAWmG,EAAMC,CAAI,EAC7D,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAQI,wBAAwB0Q,EAAU,CAC9B9R,EAAK,2BAA2B,KAAK,UAAW8R,CAAQ,CAChE,CACA,CAEA,MAAMoB,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnS,GAAOf,EAAK,kBAAkBe,IAAQ,EAAG,CAAC,CAAC,EAInE,MAAMkS,EAAO,CAEhB,OAAO,OAAOlS,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOyR,GAAO,SAAS,EAC1C,OAAAzR,EAAI,UAAYT,EAChBmS,GAAmB,SAAS1R,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmS,GAAmB,WAAW,IAAI,EAC3BnS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kBAAkBe,EAAK,CAAC,CACrC,CAMI,kBAAmB,CACf,MAAMK,EAAMpB,EAAK,wBAAwB,KAAK,SAAS,EACvD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CACA,CAEA,MAAM+R,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpS,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAOvE,MAAMqS,CAAW,CAEpB,OAAO,OAAOrS,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO4R,EAAW,SAAS,EAC9C,OAAA5R,EAAI,UAAYT,EAChBoS,GAAuB,SAAS3R,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoS,GAAuB,WAAW,IAAI,EAC/BpS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAgBI,YAAY+K,EAAYuH,EAAgBC,EAAa,CACjD9P,EAAasI,EAAY3C,CAAmB,EAC5C,IAAIhD,EAAO2F,EAAW,mBAAoB,EAC1C,MAAM7E,EAAOrG,EAAkByS,EAAgBrT,EAAK,kBAAmBA,EAAK,kBAAkB,EACxFkH,EAAO/G,EACb,IAAIgH,EAAOlF,EAAWqR,CAAW,EAAI,EAAI1S,EAAkB0S,EAAatT,EAAK,kBAAmBA,EAAK,kBAAkB,EACnHoH,EAAOjH,EACX,MAAMiB,EAAMpB,EAAK,eAAemG,EAAMc,EAAMC,EAAMC,EAAMC,CAAI,EAC5D,GAAIhG,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5B+R,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACf,CAQI,OAAO,UAAUI,EAAO,CACpB,MAAMpN,EAAO9C,GAAkBkQ,EAAOvT,EAAK,iBAAiB,EACtDoG,EAAOjG,EACPiB,EAAMpB,EAAK,qBAAqBmG,EAAMC,CAAI,EAChD,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOgS,EAAW,OAAOhS,EAAI,CAAC,CAAC,CACvC,CAQI,SAAU,CACN,MAAMA,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,IAAIuG,EAAK5C,EAAoBvC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACpD,OAAApB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,EACnCmF,CACf,CAOI,OAAO,WAAWwI,EAAM,CACpB,MAAM5I,EAAOvF,EAAkBmO,EAAM/O,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACPiB,EAAMpB,EAAK,sBAAsBmG,EAAMC,CAAI,EACjD,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOgS,EAAW,OAAOhS,EAAI,CAAC,CAAC,CACvC,CASI,UAAW,CACP,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,oBAAoB,KAAK,SAAS,EACnD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAUI,IAAI,WAAY,CACZ,MAAMxG,EAAMpB,EAAK,qBAAqB,KAAK,SAAS,EACpD,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAMI,IAAI,eAAgB,CAChB,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,yBAAyB,KAAK,SAAS,EACxD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CASI,IAAI,YAAa,CACb,MAAMxG,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,MAAO,CAEP,OADYvG,EAAK,gBAAgB,KAAK,SAAS,CAEvD,CACA,CAEA,MAAMwT,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzS,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAM0S,CAAW,CAEpB,OAAO,OAAO1S,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOiS,EAAW,SAAS,EAC9C,OAAAjS,EAAI,UAAYT,EAChByS,GAAuB,SAAShS,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByS,GAAuB,WAAW,IAAI,EAC/BzS,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CASI,OAAO,UAAU2S,EAAQ,CACrB,MAAMtS,EAAMpB,EAAK,qBAAqB0T,CAAM,EAC5C,GAAItS,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOqS,EAAW,OAAOrS,EAAI,CAAC,CAAC,CACvC,CACA,CAEA,MAAMuS,GAAgC,OAAO,qBAAyB,IAChE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB5S,GAAOf,EAAK,4BAA4Be,IAAQ,EAAG,CAAC,CAAC,EAO7E,MAAM6S,EAAiB,CAE1B,OAAO,OAAO7S,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOoS,GAAiB,SAAS,EACpD,OAAApS,EAAI,UAAYT,EAChB4S,GAA6B,SAASnS,EAAKA,EAAI,UAAWA,CAAG,EACtDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB4S,GAA6B,WAAW,IAAI,EACrC5S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,4BAA4Be,EAAK,CAAC,CAC/C,CAeI,cAAc4O,EAAkB,CAC5B,MAAMxJ,EAAOvF,EAAkB+O,EAAkB3P,EAAK,kBAAmBA,EAAK,kBAAkB,EAC1FoG,EAAOjG,EAEb,OADYH,EAAK,+BAA+B,KAAK,UAAWmG,EAAMC,CAAI,CAElF,CACA,CAEA,MAAMyN,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB9S,GAAOf,EAAK,kBAAkBe,IAAQ,EAAG,CAAC,CAAC,EAMnE,MAAM6M,CAAO,CAEhB,OAAO,OAAO7M,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOoM,EAAO,SAAS,EAC1C,OAAApM,EAAI,UAAYT,EAChB8S,GAAmB,SAASrS,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,OAAO,SAASkR,EAAS,CACrB,OAAMA,aAAmB9E,EAGlB8E,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAM3R,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB8S,GAAmB,WAAW,IAAI,EAC3B9S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kBAAkBe,EAAK,CAAC,CACrC,CAKI,YAAYiK,EAAI,CACZ,MAAM7E,EAAOvF,EAAkBoK,EAAIhL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EoG,EAAOjG,EACPiB,EAAMpB,EAAK,WAAWmG,EAAMC,CAAI,EACtC,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5ByS,GAAmB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/C,IACf,CAKI,UAAW,CACP,IAAIlM,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMkM,GAA6B,OAAO,qBAAyB,IAC7D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/S,GAAOf,EAAK,yBAAyBe,IAAQ,EAAG,CAAC,CAAC,EAI1E,MAAMgT,EAAc,CAEvB,OAAO,OAAOhT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOuS,GAAc,SAAS,EACjD,OAAAvS,EAAI,UAAYT,EAChB+S,GAA0B,SAAStS,EAAKA,EAAI,UAAWA,CAAG,EACnDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+S,GAA0B,WAAW,IAAI,EAClC/S,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,yBAAyBe,EAAK,CAAC,CAC5C,CAKI,IAAI,OAAQ,CAER,OADYf,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAKI,IAAI,MAAMsC,EAAM,CACZtC,EAAK,8BAA8B,KAAK,UAAWsC,CAAI,CAC/D,CAKI,IAAI,UAAW,CAEX,OADYtC,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAKI,IAAI,SAASsC,EAAM,CACftC,EAAK,iCAAiC,KAAK,UAAWsC,CAAI,CAClE,CACA,CAEA,MAAM0R,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjT,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAKhF,MAAMkT,EAAoB,CAE7B,OAAO,OAAOlT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOyS,GAAoB,SAAS,EACvD,OAAAzS,EAAI,UAAYT,EAChBiT,GAAgC,SAASxS,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiT,GAAgC,WAAW,IAAI,EACxCjT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,IAAI,eAAgB,CAEhB,OADYf,EAAK,4CAA4C,KAAK,SAAS,IAC5D,CACvB,CAKI,IAAI,YAAa,CAEb,OADYA,EAAK,yCAAyC,KAAK,SAAS,IACzD,CACvB,CASI,MAAO,CAEH,OADYA,EAAK,yBAAyB,KAAK,SAAS,CAEhE,CACA,CAEA,MAAMkU,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnT,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAMoT,EAAY,CAErB,OAAO,OAAOpT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO2S,GAAY,SAAS,EAC/C,OAAA3S,EAAI,UAAYT,EAChBmT,GAAwB,SAAS1S,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmT,GAAwB,WAAW,IAAI,EAChCnT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAMI,IAAI,WAAY,CAEZ,OADYf,EAAK,sBAAsB,KAAK,SAAS,CAE7D,CAKI,IAAI,QAAS,CACT,MAAMoB,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAO4N,EAAO,OAAOxM,CAAG,CAChC,CAKI,IAAI,WAAY,CACZ,MAAMA,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAOmJ,EAAoB,OAAO/H,CAAG,CAC7C,CAKI,IAAI,WAAY,CACZ,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMwM,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBrT,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAIhF,MAAMsT,EAAoB,CAE7B,OAAO,OAAOtT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6S,GAAoB,SAAS,EACvD,OAAA7S,EAAI,UAAYT,EAChBqT,GAAgC,SAAS5S,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBqT,GAAgC,WAAW,IAAI,EACxCrT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAKI,IAAI,QAAS,CACT,MAAMK,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,WAAY,CAEZ,OADYpB,EAAK,8BAA8B,KAAK,SAAS,CAErE,CAMI,IAAI,cAAe,CACf,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,iCAAiC,KAAK,SAAS,EAChE,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,QAAS,CACT,MAAMxG,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAO4N,EAAO,OAAOxM,CAAG,CAChC,CAKI,IAAI,WAAY,CACZ,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAM0M,GAAkC,OAAO,qBAAyB,IAClE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBvT,GAAOf,EAAK,8BAA8Be,IAAQ,EAAG,CAAC,CAAC,EAO/E,MAAMwT,EAAmB,CAE5B,OAAO,OAAOxT,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO+S,GAAmB,SAAS,EACtD,OAAA/S,EAAI,UAAYT,EAChBuT,GAA+B,SAAS9S,EAAKA,EAAI,UAAWA,CAAG,EACxDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBuT,GAA+B,WAAW,IAAI,EACvCvT,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,8BAA8Be,EAAK,CAAC,CACjD,CAKI,IAAI,IAAK,CAEL,OADYf,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAKI,IAAI,SAAU,CAEV,OADYA,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CASI,IAAI,QAAS,CAET,OADYA,EAAK,oCAAoC,KAAK,SAAS,CAE3E,CAKI,IAAI,YAAa,CAEb,OADYA,EAAK,wCAAwC,KAAK,SAAS,CAE/E,CAKI,IAAI,MAAO,CAEP,OADYA,EAAK,kCAAkC,KAAK,SAAS,CAEzE,CASI,YAAYgL,EAAIkF,EAASsE,EAAQhK,EAAYC,EAAS,CAClD,MAAMrJ,EAAMpB,EAAK,uBAAuBgL,EAAIkF,EAASsE,EAAQhK,EAAYC,CAAO,EAChF,YAAK,UAAYrJ,IAAQ,EACzBkT,GAA+B,SAAS,KAAM,KAAK,UAAW,IAAI,EAC3D,IACf,CAKI,IAAI,MAAO,CAEP,OADYtU,EAAK,wBAAwB,KAAK,SAAS,CAE/D,CACA,CAEA,MAAMyU,GAA4B,OAAO,qBAAyB,IAC5D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB1T,GAAOf,EAAK,wBAAwBe,IAAQ,EAAG,CAAC,CAAC,EAIzE,MAAMkR,CAAa,CAEtB,OAAO,OAAOlR,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOyQ,EAAa,SAAS,EAChD,OAAAzQ,EAAI,UAAYT,EAChB0T,GAAyB,SAASjT,EAAKA,EAAI,UAAWA,CAAG,EAClDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB0T,GAAyB,WAAW,IAAI,EACjC1T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,wBAAwBe,EAAK,CAAC,CAC3C,CAOI,IAAI,WAAY,CAEZ,OADYf,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAOI,IAAI,UAAUsC,EAAM,CAChBtC,EAAK,iCAAiC,KAAK,UAAWsC,CAAI,CAClE,CAMI,IAAI,yBAA0B,CAE1B,OADYtC,EAAK,+CAA+C,KAAK,SAAS,IAC/D,CACvB,CAMI,IAAI,wBAAwBsC,EAAM,CAC9BtC,EAAK,+CAA+C,KAAK,UAAWsC,CAAI,CAChF,CAMI,IAAI,yBAA0B,CAC1B,MAAMlB,EAAMpB,EAAK,+CAA+C,KAAK,SAAS,EAC9E,OAAOoB,EAAI,CAAC,IAAM,EAAI,OAAYA,EAAI,CAAC,CAC/C,CAMI,IAAI,wBAAwBkB,EAAM,CAC9BtC,EAAK,+CAA+C,KAAK,UAAW,CAACiC,EAAWK,CAAI,EAAGL,EAAWK,CAAI,EAAI,EAAIA,CAAI,CAC1H,CAMI,IAAI,+BAAgC,CAChC,MAAMlB,EAAMpB,EAAK,qDAAqD,KAAK,SAAS,EACpF,OAAOoB,EAAI,CAAC,IAAM,EAAI,OAAYA,EAAI,CAAC,CAC/C,CAMI,IAAI,8BAA8BkB,EAAM,CACpCtC,EAAK,qDAAqD,KAAK,UAAW,CAACiC,EAAWK,CAAI,EAAGL,EAAWK,CAAI,EAAI,EAAIA,CAAI,CAChI,CAII,aAAc,CACV,MAAMlB,EAAMpB,EAAK,iBAAkB,EACnC,YAAK,UAAYoB,IAAQ,EACzBqT,GAAyB,SAAS,KAAM,KAAK,UAAW,IAAI,EACrD,IACf,CACA,CAEA,MAAMC,GAAmB,OAAO,qBAAyB,IACnD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3T,GAAOf,EAAK,eAAee,IAAQ,EAAG,CAAC,CAAC,EAIhE,MAAM4T,EAAI,CAEb,OAAO,OAAO5T,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmT,GAAI,SAAS,EACvC,OAAAnT,EAAI,UAAYT,EAChB2T,GAAgB,SAASlT,EAAKA,EAAI,UAAWA,CAAG,EACzCA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2T,GAAgB,WAAW,IAAI,EACxB3T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,eAAee,EAAK,CAAC,CAClC,CAKI,IAAI,QAAS,CACT,MAAMK,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,UAAW,CACX,MAAMA,EAAMpB,EAAK,aAAa,KAAK,SAAS,EAC5C,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAKI,IAAI,aAAc,CACd,MAAMA,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAKI,IAAI,eAAgB,CAChB,MAAMA,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOgI,EAAS,OAAO5G,CAAG,CAClC,CAMI,IAAI,QAAS,CACT,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,IAAI,QAAS,CACT,MAAMxG,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,OAAOoB,IAAQ,EAAI,OAAYwM,EAAO,OAAOxM,CAAG,CACxD,CAMI,eAAgB,CAEZ,OADYpB,EAAK,kBAAkB,KAAK,SAAS,IAClC,CACvB,CAKI,oBAAqB,CAEjB,OADYA,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAMI,oBAAqB,CAEjB,OADYA,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CAKI,iBAAkB,CAEd,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,iBAAkB,CAEd,OADYA,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAMI,YAAa,CACT,MAAMoB,EAAMpB,EAAK,eAAe,KAAK,SAAS,EAC9C,OAAOoB,IAAQ,EAAI,OAAY8G,EAAW,OAAO9G,CAAG,CAC5D,CAMI,WAAY,CAER,OADYpB,EAAK,cAAc,KAAK,SAAS,IAC9B,CACvB,CASI,QAAS,CACL,MAAMoB,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAYI,SAAU,CAEN,OADYpB,EAAK,YAAY,KAAK,SAAS,CAEnD,CAQI,QAAS,CACL,MAAMoB,EAAMpB,EAAK,WAAW,KAAK,SAAS,EAC1C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAWI,eAAeD,EAAM,CACjB,MAAMgF,EAAOvF,EAAkBO,EAAMnB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACPiB,EAAMpB,EAAK,mBAAmB,KAAK,UAAWmG,EAAMC,CAAI,EAC9D,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAKI,UAAW,CAEP,OADYpB,EAAK,aAAa,KAAK,SAAS,IAC7B,CACvB,CAKI,gBAAiB,CAEb,OADYA,EAAK,mBAAmB,KAAK,SAAS,IACnC,CACvB,CAKI,QAAS,CAEL,OADYA,EAAK,WAAW,KAAK,SAAS,IAC3B,CACvB,CAKI,aAAc,CAEV,OADYA,EAAK,gBAAgB,KAAK,SAAS,IAChC,CACvB,CAQI,OAAQ,CACJ,MAAMoB,EAAMpB,EAAK,UAAU,KAAK,SAAS,EACzC,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKxC,EAAyB3C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACrDpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAWI,YAAa,CACT,MAAMnF,EAAMpB,EAAK,eAAe,KAAK,SAAS,EAC9C,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAK5C,EAAoBvC,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAChDpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CASI,UAAW,CACP,MAAMnF,EAAMpB,EAAK,aAAa,KAAK,SAAS,EAC5C,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKpC,GAAqB/C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACjDpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAQI,wBAAwBuL,EAAU,CAC9B9R,EAAK,4BAA4B,KAAK,UAAW8R,CAAQ,CACjE,CACA,CAEA,MAAM8C,GAA6B,OAAO,qBAAyB,IAC7D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7T,GAAOf,EAAK,yBAAyBe,IAAQ,EAAG,CAAC,CAAC,EAK1E,MAAMuP,CAAc,CAEvB,OAAO,OAAOvP,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO8O,EAAc,SAAS,EACjD,OAAA9O,EAAI,UAAYT,EAChB6T,GAA0B,SAASpT,EAAKA,EAAI,UAAWA,CAAG,EACnDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6T,GAA0B,WAAW,IAAI,EAClC7T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,yBAAyBe,EAAK,CAAC,CAC5C,CAKI,IAAI,WAAY,CACZ,IAAI4G,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,wBAAwB,KAAK,SAAS,EACvD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,gBAAiB,CACjB,IAAID,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,6BAA6B,KAAK,SAAS,EAC5D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,cAAe,CACf,MAAMxG,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOoB,IAAQ,EAAI,OAAYsG,GAAoB,OAAOtG,CAAG,CACrE,CAKI,SAAU,CACN,MAAMA,EAAMpB,EAAK,sBAAsB,KAAK,SAAS,EACrD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAMI,OAAO,UAAUyT,EAAM,CACnB,MAAMzT,EAAMpB,EAAK,wBAAwB6U,CAAI,EAC7C,GAAIzT,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkP,EAAc,OAAOlP,EAAI,CAAC,CAAC,CAC1C,CACA,CAEA,MAAM0T,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB/T,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EASvE,MAAMuM,CAAW,CAEpB,OAAO,OAAOvM,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO8L,EAAW,SAAS,EAC9C,OAAA9L,EAAI,UAAYT,EAChB+T,GAAuB,SAAStT,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB+T,GAAuB,WAAW,IAAI,EAC/B/T,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAKI,YAAYgC,EAAM,CACd,MAAMoD,EAAOvF,EAAkBmC,EAAM/C,EAAK,kBAAmBA,EAAK,kBAAkB,EAC9EoG,EAAOjG,EACPiB,EAAMpB,EAAK,eAAemG,EAAMC,CAAI,EAC1C,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5B0T,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACf,CAQI,IAAI,MAAO,CACP,IAAInN,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,MAAO,CACP,MAAMxG,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAOoB,IAAQ,SAAW,OAAYA,CAC9C,CAMI,aAAc,CAEV,OADYpB,EAAK,uBAAuB,KAAK,SAAS,IACvC,CACvB,CACA,CAEA,MAAM+U,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhU,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAKxE,MAAMwI,CAAY,CAErB,OAAO,OAAOxI,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO+H,EAAY,SAAS,EAC/C,OAAA/H,EAAI,UAAYT,EAChBgU,GAAwB,SAASvT,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgU,GAAwB,WAAW,IAAI,EAChChU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAKI,IAAI,OAAQ,CAER,OADYf,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CAKI,IAAI,MAAMsC,EAAM,CACZtC,EAAK,4BAA4B,KAAK,UAAWsC,CAAI,CAC7D,CAMI,IAAI,MAAO,CACP,MAAMlB,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOoB,IAAQ,EAAI,OAAYA,CACvC,CAMI,IAAI,KAAKkB,EAAM,CACXtC,EAAK,2BAA2B,KAAK,UAAWiC,EAAWK,CAAI,EAAI,EAAIA,CAAI,CACnF,CAKI,IAAI,SAAU,CACV,MAAMlB,EAAMpB,EAAK,oBAAoB,KAAK,SAAS,EACnD,IAAIuG,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKvE,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EAC/CpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CACA,CAEA,MAAMyO,GAAyB,OAAO,qBAAyB,IACzD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjU,GAAOf,EAAK,qBAAqBe,IAAQ,EAAG,CAAC,CAAC,EAKtE,MAAM0N,EAAU,CAEnB,OAAO,OAAO1N,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOiN,GAAU,SAAS,EAC7C,OAAAjN,EAAI,UAAYT,EAChBiU,GAAsB,SAASxT,EAAKA,EAAI,UAAWA,CAAG,EAC/CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiU,GAAsB,WAAW,IAAI,EAC9BjU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,qBAAqBe,EAAK,CAAC,CACxC,CAKI,IAAI,SAAU,CACV,MAAMK,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOoB,IAAQ,EAAI,OAAY8K,EAAiB,OAAO9K,CAAG,CAClE,CAKI,UAAW,CACP,IAAIuG,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,mBAAmB,KAAK,SAAS,EAClD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CACA,CAEA,MAAMqN,GAAsC,OAAO,qBAAyB,IACtE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBlU,GAAOf,EAAK,kCAAkCe,IAAQ,EAAG,CAAC,CAAC,EASnF,MAAM8H,CAAuB,CAEhC,OAAO,OAAO9H,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOqH,EAAuB,SAAS,EAC1D,OAAArH,EAAI,UAAYT,EAChBkU,GAAmC,SAASzT,EAAKA,EAAI,UAAWA,CAAG,EAC5DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBkU,GAAmC,WAAW,IAAI,EAC3ClU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kCAAkCe,EAAK,CAAC,CACrD,CAQI,IAAI,IAAK,CAEL,OADYf,EAAK,oCAAoC,KAAK,SAAS,CAE3E,CAOI,IAAI,MAAO,CAEP,OADYA,EAAK,sCAAsC,KAAK,SAAS,CAE7E,CAMI,YAAYgL,EAAIkK,EAAa,CACzB,MAAM9T,EAAMpB,EAAK,2BAA2BgL,EAAIkK,CAAW,EAC3D,YAAK,UAAY9T,IAAQ,EACzB6T,GAAmC,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/D,IACf,CAKI,IAAI,MAAO,CAEP,OADYjV,EAAK,4BAA4B,KAAK,SAAS,CAEnE,CACA,CAEA,MAAMmV,GAAqC,OAAO,qBAAyB,IACrE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpU,GAAOf,EAAK,iCAAiCe,IAAQ,EAAG,CAAC,CAAC,EAIlF,MAAMqU,EAAsB,CAE/B,OAAO,OAAOrU,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO4T,GAAsB,SAAS,EACzD,OAAA5T,EAAI,UAAYT,EAChBoU,GAAkC,SAAS3T,EAAKA,EAAI,UAAWA,CAAG,EAC3DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoU,GAAkC,WAAW,IAAI,EAC1CpU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,iCAAiCe,EAAK,CAAC,CACpD,CAMI,IAAI,aAAc,CAEd,OADYf,EAAK,kCAAkC,KAAK,SAAS,CAEzE,CAMI,IAAI,WAAY,CAEZ,OADYA,EAAK,gCAAgC,KAAK,SAAS,CAEvE,CAYI,SAAU,CAEN,OADYA,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CACA,CAEA,MAAMqV,GAA0B,OAAO,qBAAyB,IAC1D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBtU,GAAOf,EAAK,sBAAsBe,IAAQ,EAAG,CAAC,CAAC,EAIvE,MAAM+J,EAAW,CAEpB,OAAO,OAAO/J,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOsJ,GAAW,SAAS,EAC9C,OAAAtJ,EAAI,UAAYT,EAChBsU,GAAuB,SAAS7T,EAAKA,EAAI,UAAWA,CAAG,EAChDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBsU,GAAuB,WAAW,IAAI,EAC/BtU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,sBAAsBe,EAAK,CAAC,CACzC,CAII,aAAc,CACV,MAAMK,EAAMpB,EAAK,eAAgB,EACjC,YAAK,UAAYoB,IAAQ,EACzBiU,GAAuB,SAAS,KAAM,KAAK,UAAW,IAAI,EACnD,IACf,CASI,aAAaC,EAAQC,EAAQpJ,EAAW,CACpC3I,EAAa8R,EAAQvN,CAAM,EAC3BvE,EAAa+R,EAAQlK,CAAW,EAChC7H,EAAa2I,EAAWD,CAAgB,EACxC,MAAM9K,EAAMpB,EAAK,wBAAwB,KAAK,UAAWsV,EAAO,UAAWC,EAAO,UAAWpJ,EAAU,SAAS,EAChH,OAAO/K,IAAQ,EAAI,OAAYoN,EAAe,OAAOpN,CAAG,CAChE,CAQI,aAAakU,EAAQC,EAAQ,CACzB/R,EAAa8R,EAAQvN,CAAM,EAC3BvE,EAAa+R,EAAQlK,CAAW,EAChC,MAAMjK,EAAMpB,EAAK,wBAAwB,KAAK,UAAWsV,EAAO,UAAWC,EAAO,SAAS,EAC3F,OAAOnU,IAAQ,EAAI,OAAY8K,EAAiB,OAAO9K,CAAG,CAClE,CAMI,IAAIkU,EAAQ,CACR,OAAA9R,EAAa8R,EAAQvN,CAAM,EACf/H,EAAK,eAAe,KAAK,UAAWsV,EAAO,SAAS,CAExE,CAII,OAAQ,CACJtV,EAAK,iBAAiB,KAAK,SAAS,CAC5C,CAMI,SAAU,CAEN,OADYA,EAAK,mBAAmB,KAAK,SAAS,IACnC,CACvB,CAKI,IAAI,OAAQ,CAER,OADYA,EAAK,iBAAiB,KAAK,SAAS,IACjC,CACvB,CAKI,QAAS,CACL,MAAMoB,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CACA,CAEA,MAAMoU,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBzU,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAQxE,MAAMmO,CAAY,CAErB,OAAO,OAAOnO,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO0N,EAAY,SAAS,EAC/C,OAAA1N,EAAI,UAAYT,EAChByU,GAAwB,SAAShU,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjByU,GAAwB,WAAW,IAAI,EAChCzU,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAqBI,OAAO,KAAKwO,EAAYC,EAAkB,CACtC,IAAIrJ,EAAOlE,EAAWsN,CAAU,EAAI,EAAI3O,EAAkB2O,EAAYvP,EAAK,kBAAmBA,EAAK,kBAAkB,EACjHoG,EAAOjG,EACP8G,EAAOhF,EAAWuN,CAAgB,EAAI,EAAI5O,EAAkB4O,EAAkBxP,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7HkH,EAAO/G,EAEX,OADYH,EAAK,iBAAiBmG,EAAMC,EAAMa,EAAMC,CAAI,CAEhE,CAgBI,OAAO,YAAYqI,EAAYkG,EAAW,CACtC,MAAMtP,EAAOvF,EAAkB2O,EAAYvP,EAAK,kBAAmBA,EAAK,kBAAkB,EACpFoG,EAAOjG,EACP8G,EAAO5D,GAAkBoS,EAAWzV,EAAK,iBAAiB,EAC1DkH,EAAO/G,EAEb,OADYH,EAAK,wBAAwBmG,EAAMC,EAAMa,EAAMC,CAAI,CAEvE,CACA,CAEA,MAAMwO,GAA+B,OAAO,qBAAyB,IAC/D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB3U,GAAOf,EAAK,2BAA2Be,IAAQ,EAAG,CAAC,CAAC,EAS5E,MAAM4U,EAAgB,CAEzB,OAAO,OAAO5U,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOmU,GAAgB,SAAS,EACnD,OAAAnU,EAAI,UAAYT,EAChB2U,GAA4B,SAASlU,EAAKA,EAAI,UAAWA,CAAG,EACrDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB2U,GAA4B,WAAW,IAAI,EACpC3U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,2BAA2Be,EAAK,CAAC,CAC9C,CAQI,IAAI,IAAK,CAEL,OADYf,EAAK,6BAA6B,KAAK,SAAS,CAEpE,CAKI,IAAI,YAAa,CAEb,OADYA,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAMI,IAAI,QAAS,CAET,OADYA,EAAK,iCAAiC,KAAK,SAAS,CAExE,CAOI,IAAI,MAAO,CAEP,OADYA,EAAK,+BAA+B,KAAK,SAAS,CAEtE,CAQI,YAAYgL,EAAIR,EAAYgK,EAAQzG,EAAM,CACtC,MAAM3M,EAAMpB,EAAK,oBAAoBgL,EAAIR,EAAYgK,EAAQzG,CAAI,EACjE,YAAK,UAAY3M,IAAQ,EACzBsU,GAA4B,SAAS,KAAM,KAAK,UAAW,IAAI,EACxD,IACf,CAKI,IAAI,MAAO,CAEP,OADY1V,EAAK,qBAAqB,KAAK,SAAS,CAE5D,CACA,CAEA,MAAM4V,GAAuB,OAAO,qBAAyB,IACvD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqB7U,GAAOf,EAAK,mBAAmBe,IAAQ,EAAG,CAAC,CAAC,EAIpE,MAAM8U,EAAQ,CAEjB,oBAAqB,CACjB,MAAM9U,EAAM,KAAK,UACjB,YAAK,UAAY,EACjB6U,GAAoB,WAAW,IAAI,EAC5B7U,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,mBAAmBe,EAAK,CAAC,CACtC,CAOI,OAAO,aAAc,CAEjB,OADYf,EAAK,oBAAqB,IACvB,CACvB,CAKI,YAAY8V,EAAW,CACnB,MAAM1U,EAAMpB,EAAK,YAAY8V,CAAS,EACtC,GAAI1U,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5BwU,GAAoB,SAAS,KAAM,KAAK,UAAW,IAAI,EAChD,IACf,CAKI,IAAI,SAASE,EAAW,CACpB,MAAM1U,EAAMpB,EAAK,qBAAqB,KAAK,UAAW8V,CAAS,EAC/D,GAAI1U,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,CAEhD,CAKI,QAAS,CACL,MAAMA,EAAMpB,EAAK,eAAe,KAAK,SAAS,EAC9C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,CAEhD,CAII,SAAU,CACN,MAAMA,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,CAEhD,CACA,CAEA,MAAM2U,GAAwC,OAAO,qBAAyB,IACxE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBhV,GAAOf,EAAK,oCAAoCe,IAAQ,EAAG,CAAC,CAAC,EAOrF,MAAM6H,EAAyB,CAElC,OAAO,OAAO7H,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOoH,GAAyB,SAAS,EAC5D,OAAApH,EAAI,UAAYT,EAChBgV,GAAqC,SAASvU,EAAKA,EAAI,UAAWA,CAAG,EAC9DA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBgV,GAAqC,WAAW,IAAI,EAC7ChV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,oCAAoCe,EAAK,CAAC,CACvD,CAQI,IAAI,MAAO,CAEP,OADYf,EAAK,wCAAwC,KAAK,SAAS,CAE/E,CAKI,YAAY+N,EAAM,CACd,MAAM3M,EAAMpB,EAAK,6BAA6B+N,CAAI,EAClD,YAAK,UAAY3M,IAAQ,EACzB2U,GAAqC,SAAS,KAAM,KAAK,UAAW,IAAI,EACjE,IACf,CACA,CAEA,MAAMC,GAA2B,OAAO,qBAAyB,IAC3D,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBjV,GAAOf,EAAK,uBAAuBe,IAAQ,EAAG,CAAC,CAAC,EAIxE,MAAMkV,EAAY,CAErB,OAAO,OAAOlV,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOyU,GAAY,SAAS,EAC/C,OAAAzU,EAAI,UAAYT,EAChBiV,GAAwB,SAASxU,EAAKA,EAAI,UAAWA,CAAG,EACjDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBiV,GAAwB,WAAW,IAAI,EAChCjV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,uBAAuBe,EAAK,CAAC,CAC1C,CAMI,IAAIoJ,EAAW,CACX3G,EAAa2G,EAAWnC,CAAQ,EAChC,MAAM5G,EAAMpB,EAAK,gBAAgB,KAAK,UAAWmK,EAAU,SAAS,EACpE,OAAO/I,IAAQ,EAAI,OAAYkJ,EAAO,OAAOlJ,CAAG,CACxD,CASI,eAAgB,CAEZ,OADYpB,EAAK,0BAA0B,KAAK,SAAS,IAC1C,CACvB,CAKI,MAAO,CAEH,OADYA,EAAK,iBAAiB,KAAK,SAAS,CAExD,CAKI,SAAU,CAEN,OADYA,EAAK,oBAAoB,KAAK,SAAS,CAE3D,CACA,CAEA,MAAMkW,GAAsB,OAAO,qBAAyB,IACtD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBnV,GAAOf,EAAK,kBAAkBe,IAAQ,EAAG,CAAC,CAAC,EAMnE,MAAMgH,CAAO,CAEhB,OAAO,OAAOhH,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOuG,EAAO,SAAS,EAC1C,OAAAvG,EAAI,UAAYT,EAChBmV,GAAmB,SAAS1U,EAAKA,EAAI,UAAWA,CAAG,EAC5CA,CACf,CAEI,OAAO,SAASkR,EAAS,CACrB,OAAMA,aAAmB3K,EAGlB2K,EAAQ,mBAAoB,EAFxB,CAGnB,CAEI,oBAAqB,CACjB,MAAM3R,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBmV,GAAmB,WAAW,IAAI,EAC3BnV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,kBAAkBe,EAAK,CAAC,CACrC,CAKI,YAAYiK,EAAI,CACZ,MAAM7E,EAAOvF,EAAkBoK,EAAIhL,EAAK,kBAAmBA,EAAK,kBAAkB,EAC5EoG,EAAOjG,EACPiB,EAAMpB,EAAK,WAAWmG,EAAMC,CAAI,EACtC,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,YAAK,UAAYA,EAAI,CAAC,IAAM,EAC5B8U,GAAmB,SAAS,KAAM,KAAK,UAAW,IAAI,EAC/C,IACf,CAKI,IAAI,WAAY,CACZ,IAAIvO,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,iBAAiB,KAAK,SAAS,EAChD,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,YAAa,CACb,MAAMxG,EAAMpB,EAAK,kBAAkB,KAAK,SAAS,EACjD,OAAOsN,EAAW,OAAOlM,CAAG,CACpC,CASI,cAAe,CAEX,OADYpB,EAAK,oBAAoB,KAAK,SAAS,IACpC,CACvB,CAKI,UAAW,CACP,IAAI2H,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,gBAAgB,KAAK,SAAS,EAC/C,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAQI,OAAQ,CACJ,MAAMxG,EAAMpB,EAAK,aAAa,KAAK,SAAS,EAC5C,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CACA,CAEA,MAAM+U,GAAmC,OAAO,qBAAyB,IACnE,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBpV,GAAOf,EAAK,+BAA+Be,IAAQ,EAAG,CAAC,CAAC,EAWhF,MAAM+P,CAAoB,CAE7B,OAAO,OAAO/P,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAOsP,EAAoB,SAAS,EACvD,OAAAtP,EAAI,UAAYT,EAChBoV,GAAgC,SAAS3U,EAAKA,EAAI,UAAWA,CAAG,EACzDA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBoV,GAAgC,WAAW,IAAI,EACxCpV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,+BAA+Be,EAAK,CAAC,CAClD,CAYI,OAAO,QAAQqV,EAAaC,EAAeC,EAAe/L,EAAS,CAC/D,IAAI2C,EACAC,EACJ,GAAI,CACA3J,EAAa4S,EAAarO,CAAM,EAChCvE,EAAa6S,EAAerO,CAAQ,EACpCxE,EAAa8S,EAAevO,CAAM,EAClC,IAAI5B,EAAOlE,EAAWsI,CAAO,EAAI,EAAI3G,EAAwB2G,EAASvK,EAAK,iBAAiB,EACxFoG,EAAOjG,EACX,MAAMiB,EAAMpB,EAAK,4BAA4BoW,EAAY,UAAWC,EAAc,UAAWC,EAAc,UAAWnQ,EAAMC,CAAI,EAChI,IAAIe,EAAO/F,EAAI,CAAC,EACZgG,EAAOhG,EAAI,CAAC,EAChB,GAAIA,EAAI,CAAC,EACL,MAAA+F,EAAO,EAAGC,EAAO,EACX9D,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAA8L,EAAc/F,EACdgG,EAAc/F,EACPpF,EAAmBmF,EAAMC,CAAI,CAChD,QAAkB,CACNpH,EAAK,gBAAgBkN,EAAaC,EAAa,CAAC,CAC5D,CACA,CAKI,IAAI,WAAY,CACZ,MAAM/L,EAAMpB,EAAK,8BAA8B,KAAK,SAAS,EAC7D,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAMI,IAAI,aAAc,CACd,MAAMA,EAAMpB,EAAK,gCAAgC,KAAK,SAAS,EAC/D,OAAO+H,EAAO,OAAO3G,CAAG,CAChC,CAMI,IAAI,eAAgB,CAChB,MAAMA,EAAMpB,EAAK,kCAAkC,KAAK,SAAS,EACjE,OAAOoB,IAAQ,EAAI,OAAY4G,EAAS,OAAO5G,CAAG,CAC1D,CAMI,IAAI,QAAS,CACT,MAAMA,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAOoB,IAAQ,EAAI,OAAYwM,EAAO,OAAOxM,CAAG,CACxD,CAMI,IAAI,YAAa,CACb,MAAMA,EAAMpB,EAAK,+BAA+B,KAAK,SAAS,EAC9D,OAAOoB,IAAQ,EAAI,OAAY8G,EAAW,OAAO9G,CAAG,CAC5D,CAKI,WAAY,CAER,OADYpB,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CAKI,SAAU,CAEN,OADYA,EAAK,4BAA4B,KAAK,SAAS,IAC5C,CACvB,CAKI,UAAW,CAEP,OADYA,EAAK,6BAA6B,KAAK,SAAS,IAC7C,CACvB,CAQI,qBAAsB,CAElB,OADYA,EAAK,wCAAwC,KAAK,SAAS,CAE/E,CAaI,IAAI,uBAAwB,CACxB,MAAMoB,EAAMpB,EAAK,0CAA0C,KAAK,SAAS,EACzE,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,IAAImF,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKxC,EAAyB3C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACrDpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAQI,IAAI,qBAAsB,CACtB,MAAMnF,EAAMpB,EAAK,wCAAwC,KAAK,SAAS,EACvE,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,IAAImF,EACJ,OAAInF,EAAI,CAAC,IAAM,IACXmF,EAAKxC,EAAyB3C,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,EAAE,MAAO,EACrDpB,EAAK,gBAAgBoB,EAAI,CAAC,EAAGA,EAAI,CAAC,EAAI,EAAG,CAAC,GAEvCmF,CACf,CAKI,IAAI,QAAS,CACT,IAAIoB,EACAC,EACJ,GAAI,CACA,MAAMxG,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,OAAA2H,EAAcvG,EAAI,CAAC,EACnBwG,EAAcxG,EAAI,CAAC,EACZY,EAAmBZ,EAAI,CAAC,EAAGA,EAAI,CAAC,CAAC,CACpD,QAAkB,CACNpB,EAAK,gBAAgB2H,EAAaC,EAAa,CAAC,CAC5D,CACA,CAMI,oBAAqB,CAEjB,OADY5H,EAAK,uCAAuC,KAAK,SAAS,IACvD,CACvB,CAKI,WAAY,CAER,OADYA,EAAK,8BAA8B,KAAK,SAAS,IAC9C,CACvB,CAMI,QAAS,CAEL,OADYA,EAAK,2BAA2B,KAAK,SAAS,IAC3C,CACvB,CAOI,OAAQ,CAEJ,OADYA,EAAK,0BAA0B,KAAK,SAAS,CAEjE,CASI,iBAAkB,CAEd,OADYA,EAAK,oCAAoC,KAAK,SAAS,CAE3E,CAQI,wBAAwB8R,EAAU,CAC9B9R,EAAK,4CAA4C,KAAK,UAAW8R,CAAQ,CACjF,CAMI,aAAc,CAEV,OADY9R,EAAK,gCAAgC,KAAK,SAAS,IAChD,CACvB,CAaI,kBAAkBuK,EAAS,CACvB,MAAMpE,EAAOvC,EAAwB2G,EAASvK,EAAK,iBAAiB,EAC9DoG,EAAOjG,EACPiB,EAAMpB,EAAK,sCAAsC,KAAK,UAAWmG,EAAMC,CAAI,EACjF,GAAIhF,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAkBI,QAAS,CACL,MAAMA,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAQI,QAAS,CACL,MAAMA,EAAMpB,EAAK,2BAA2B,KAAK,SAAS,EAC1D,GAAIoB,EAAI,CAAC,EACL,MAAMkC,EAAwBlC,EAAI,CAAC,CAAC,EAExC,OAAOkC,EAAwBlC,EAAI,CAAC,CAAC,CAC7C,CAOI,UAAW,CAEP,OADYpB,EAAK,6BAA6B,KAAK,SAAS,CAEpE,CAQI,gBAAiB,CAEb,OADYA,EAAK,mCAAmC,KAAK,SAAS,CAE1E,CAOI,WAAW+O,EAAM,CACb,OAAAvL,EAAauL,EAAM0E,CAAU,EACjBzT,EAAK,+BAA+B,KAAK,UAAW+O,EAAK,SAAS,CAEtF,CACA,CAEA,MAAMwH,GAAwB,OAAO,qBAAyB,IACxD,CAAE,SAAU,IAAM,GAAI,WAAY,IAAM,CAAE,CAAA,EAC1C,IAAI,qBAAqBxV,GAAOf,EAAK,oBAAoBe,IAAQ,EAAG,CAAC,CAAC,EAIrE,MAAMsD,EAAS,CAElB,OAAO,OAAOtD,EAAK,CACfA,EAAMA,IAAQ,EACd,MAAMS,EAAM,OAAO,OAAO6C,GAAS,SAAS,EAC5C,OAAA7C,EAAI,UAAYT,EAChBwV,GAAqB,SAAS/U,EAAKA,EAAI,UAAWA,CAAG,EAC9CA,CACf,CAEI,oBAAqB,CACjB,MAAMT,EAAM,KAAK,UACjB,YAAK,UAAY,EACjBwV,GAAqB,WAAW,IAAI,EAC7BxV,CACf,CAEI,MAAO,CACH,MAAMA,EAAM,KAAK,mBAAoB,EACrCf,EAAK,oBAAoBe,EAAK,CAAC,CACvC,CAKI,IAAI,WAAY,CAEZ,OADYf,EAAK,6BAA6B,KAAK,SAAS,CAEpE,CAKI,IAAI,mBAAoB,CAEpB,OADYA,EAAK,qCAAqC,KAAK,SAAS,CAE5E,CAKI,IAAI,SAAU,CAEV,OADYA,EAAK,2BAA2B,KAAK,SAAS,CAElE,CAMI,IAAI,iBAAkB,CAElB,OADYA,EAAK,mCAAmC,KAAK,SAAS,CAE1E,CACA,CAEO,SAASwW,GAA8BlU,EAAMC,EAAM,CACtD,MAAMnB,EAAM,OAAOmB,CAAI,EACjB0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASwP,GAA8BnU,EAAMC,EAAM,CACtD,MAAMnB,EAAM,OAAOmB,CAAI,EACjB0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASyP,GAA8BpU,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAASqU,GAAyCrU,EAAM,CAE3D,OADYA,EAAK,iBAErB,CAEO,SAASsU,GAA2BtU,EAAMC,EAAM,CAEnD,OADYD,EAAK,IAAIC,CAAI,CAE7B,CAEO,SAASsU,IAA6B,CAAE,OAAOnV,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE1F,OADYlC,EAAK,IAAIC,EAAMiC,CAAI,CAEnC,EAAG,SAAS,CAAC,CAEN,SAASsS,GAA0BxU,EAAMC,EAAM,CAElD,OADYD,EAAK,GAAGC,CAAI,CAE5B,CAEO,SAASwU,GAAqBzU,EAAM,CAEvC,OADYkF,GAAW,OAAOlF,CAAI,CAEtC,CAEO,SAAS0U,IAA+B,CAAE,OAAOtV,EAAY,SAAUY,EAAMC,EAAM,CAEtF,OADY,YAAY,MAAMD,EAAMC,CAAI,CAE5C,EAAG,SAAS,CAAC,CAEN,SAAS0U,IAA+B,CAAE,OAAOvV,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAM,CAElG,OADY,YAAY,MAAMxC,EAAMC,EAAMiC,IAAS,EAAGM,IAAS,CAAC,CAEpE,EAAG,SAAS,CAAC,CAEN,SAASoS,GAA8B5U,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAAS6U,IAA8B,CAAE,OAAOzV,EAAY,SAAUY,EAAMC,EAAM,CAErF,OADYD,EAAK,KAAKC,CAAI,CAE9B,EAAG,SAAS,CAAC,CAEN,SAAS6U,IAA8B,CAAE,OAAO1V,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE3F,OADYlC,EAAK,KAAKC,EAAMiC,CAAI,CAEpC,EAAG,SAAS,CAAC,CAEN,SAAS6S,IAA8B,CAAE,OAAO3V,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAM,CAEjG,OADYxC,EAAK,KAAKC,EAAMiC,EAAMM,CAAI,CAE1C,EAAG,SAAS,CAAC,CAEN,SAASwS,IAA8B,CAAE,OAAO5V,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAMyS,EAAM,CAEvG,OADYjV,EAAK,KAAKC,EAAMiC,EAAMM,EAAMyS,CAAI,CAEhD,EAAG,SAAS,CAAC,CAEN,SAASC,GAAoClV,EAAM,CAEtD,OADY,aAAaA,CAAI,CAEjC,CAEO,SAASmV,IAA+B,CAAE,OAAO/V,EAAY,SAAUY,EAAM,CAEhF,OADYA,EAAK,MAAO,CAE5B,EAAG,SAAS,CAAC,CAEN,SAASoV,GAA6BpV,EAAM,CAC/CA,EAAK,MAAO,CAChB,CAEO,SAASqV,GAA4BrV,EAAM,CAE9C,OADYA,EAAK,IAErB,CAEO,SAASsV,IAAkC,CAAE,OAAOlW,EAAY,SAAUY,EAAM,CACnFA,EAAK,SAAU,CACnB,EAAG,SAAS,CAAC,CAEN,SAASuV,IAA+B,CAAE,OAAOnW,EAAY,SAAUY,EAAM,CAEhF,OADYA,EAAK,MAAO,CAE5B,EAAG,SAAS,CAAC,CAEN,SAASwV,IAA+B,CAAE,OAAOpW,EAAY,SAAUY,EAAM,CAEhF,OADYA,EAAK,MAAO,CAE5B,EAAG,SAAS,CAAC,CAEN,SAASyV,IAAqC,CAAE,OAAOrW,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAMyS,EAAM,CAE9G,OADYjV,EAAK,YAAYN,EAAmBO,EAAMiC,CAAI,EAAGM,EAAMyS,CAAI,CAE3E,EAAG,SAAS,CAAC,CAEN,SAASS,IAAqC,CAAE,OAAOtW,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAM,CAExG,OADYxC,EAAK,YAAYN,EAAmBO,EAAMiC,CAAI,EAAGM,CAAI,CAErE,EAAG,SAAS,CAAC,CAEN,SAASmT,IAA2C,CAAE,OAAOvW,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAExG,OADYlC,EAAK,kBAAkBN,EAAmBO,EAAMiC,CAAI,CAAC,CAErE,EAAG,SAAS,CAAC,CAEN,SAAS0T,GAAwC5V,EAAM,CAE1D,OADYqG,GAA8B,OAAOrG,CAAI,CAEzD,CAEO,SAAS6V,GAAgC7V,EAAM,CAElD,OADYyG,GAAsB,OAAOzG,CAAI,CAEjD,CAEO,SAAS8V,GAA6B9V,EAAM,CAE/C,OADY2G,GAAmB,OAAO3G,CAAI,CAE9C,CAEO,SAAS+V,GAA8B/V,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAASgW,GAA6BhW,EAAM,CAC/C,QAAQ,MAAMA,CAAI,CACtB,CAEO,SAASiW,GAA6BjW,EAAMC,EAAM,CACrDD,EAAK,MAAMC,CAAI,CACnB,CAEO,SAASiW,GAA6BlW,EAAM,CAE/C,OADY+G,GAAmB,OAAO/G,CAAI,CAE9C,CAEO,SAASmW,GAA2BnW,EAAM,CAE7C,OADYsH,GAAiB,OAAOtH,CAAI,CAE5C,CAEO,SAASoW,GAA8BpW,EAAM,CAEhD,OADYyH,EAAoB,OAAOzH,CAAI,CAE/C,CAEO,SAASqW,IAA2C,CAAE,OAAOjX,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CACxGlC,EAAK,kBAAkBN,EAAmBO,EAAMiC,CAAI,CAAC,CACzD,EAAG,SAAS,CAAC,CAEN,SAASoU,IAAgC,CAAE,OAAOlX,EAAY,SAAUY,EAAMC,EAAM,CAEvF,OADYD,EAAK,OAAOC,CAAI,CAEhC,EAAG,SAAS,CAAC,CAEN,SAASsW,IAAgC,CAAE,OAAOnX,EAAY,SAAUY,EAAM,CAEjF,OADYA,EAAK,OAAQ,CAE7B,EAAG,SAAS,CAAC,CAEN,SAASwW,GAAiBxW,EAAM,CAEnC,OADYgI,EAAO,OAAOhI,CAAI,CAElC,CAEO,SAASyW,GAAmBzW,EAAM,CAErC,OADY0F,EAAS,OAAO1F,CAAI,CAEpC,CAEO,SAAS0W,GAAoB1W,EAAM,CAEtC,OADYsI,EAAU,OAAOtI,CAAI,CAErC,CAEO,SAAS2W,GAAsB3W,EAAM,CAExC,OADY+I,EAAY,OAAO/I,CAAI,CAEvC,CAEO,SAAS4W,GAA4B5W,EAAM,CAE9C,OADYA,EAAK,IAErB,CAEO,SAAS6W,GAAgB7W,EAAM,CAElC,OADY+J,GAAM,OAAO/J,CAAI,CAEjC,CAEO,SAAS8W,GAAyB9W,EAAM,CAE3C,OADYoK,GAAe,OAAOpK,CAAI,CAE1C,CAEO,SAAS+W,GAA+B/W,EAAM,CAEjD,OADY,OAAO,QAAQA,CAAI,CAEnC,CAEO,SAASgX,GAA+BhX,EAAM,CAEjD,OADYA,EAAK,QAAS,CAE9B,CAEO,SAASiX,GAA6BjX,EAAM,CAC/C,QAAQ,MAAMA,CAAI,CACtB,CAEO,SAASkX,GAA6BlX,EAAMC,EAAM,CACrD,IAAIkX,EACAC,EACJ,GAAI,CACAD,EAAcnX,EACdoX,EAAcnX,EACd,QAAQ,MAAMP,EAAmBM,EAAMC,CAAI,CAAC,CACpD,QAAc,CACNvC,EAAK,gBAAgByZ,EAAaC,EAAa,CAAC,CACxD,CACA,CAEO,SAASC,GAA6BrX,EAAMC,EAAM,CACrDD,EAAK,MAAMC,CAAI,CACnB,CAEO,SAASqX,IAA+B,CAAE,OAAOlY,EAAY,SAAUY,EAAM,CAChF,MAAMlB,EAAMkB,EAAK,MACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,EAAG,SAAS,CAAC,CAEN,SAASyY,GAA4BvX,EAAM,CAE9C,OADY,MAAM,KAAKA,CAAI,CAE/B,CAEO,SAASwX,IAAoC,CAAE,OAAOpY,EAAY,SAAUY,EAAM,CAErF,OADYA,EAAK,WAAY,CAEjC,EAAG,SAAS,CAAC,CAEN,SAASyX,IAAgC,CAAE,OAAOrY,EAAY,SAAUY,EAAM,CAEjF,OADYA,EAAK,OAAQ,CAE7B,EAAG,SAAS,CAAC,CAEN,SAAS0X,IAAgC,CAAE,OAAOtY,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE7F,OADYlC,EAAK,OAAOC,EAAMiC,IAAS,CAAC,CAE5C,EAAG,SAAS,CAAC,CAEN,SAASyV,IAAgC,CAAE,OAAOvY,EAAY,SAAUY,EAAMC,EAAM,CAEvF,OADYD,EAAK,OAAOC,CAAI,CAEhC,EAAG,SAAS,CAAC,CAEN,SAAS2X,IAAyC,CAAE,OAAOxY,EAAY,SAAUY,EAAMC,EAAM,CAChGD,EAAK,gBAAgBC,CAAI,CAC7B,EAAG,SAAS,CAAC,CAEN,SAAS4X,GAA+B7X,EAAM,CAEjD,OADYA,EAAK,QAAS,CAE9B,CAEO,SAAS8X,IAA6B,CAAE,OAAO1Y,EAAY,SAAUY,EAAMC,EAAM,CAEpF,OADY,QAAQ,IAAID,EAAMC,CAAI,CAEtC,EAAG,SAAS,CAAC,CAEN,SAAS8X,IAA6B,CAAE,OAAO3Y,EAAY,SAAUY,EAAMC,EAAM,CAEpF,OADYD,EAAK,IAAIC,CAAI,CAE7B,EAAG,SAAS,CAAC,CAEN,SAAS+X,IAA6B,CAAE,OAAO5Y,EAAY,SAAUY,EAAMC,EAAM,CAEpF,OADYD,EAAK,IAAIC,CAAI,CAE7B,EAAG,SAAS,CAAC,CAEN,SAASgY,GAA2BjY,EAAMC,EAAM,CAEnD,OADYD,EAAKC,IAAS,CAAC,CAE/B,CAEO,SAASiY,GAAqClY,EAAMC,EAAM,CAE7D,OADYD,EAAKC,CAAI,CAEzB,CAEO,SAASkY,GAAqCnY,EAAMC,EAAM,CAE7D,OADYD,EAAKC,CAAI,CAEzB,CAEO,SAASmY,GAA8BpY,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAASqY,GAA8BrY,EAAM,CAEhD,OADYqL,GAAoB,OAAOrL,CAAI,CAE/C,CAEO,SAASsY,IAA+B,CAAE,OAAOlZ,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE5F,OADYlC,EAAK,MAAMN,EAAmBO,EAAMiC,CAAI,CAAC,CAEzD,EAAG,SAAS,CAAC,CAEN,SAASqW,IAAmC,CAAE,OAAOnZ,EAAY,SAAUY,EAAM,CACpF,MAAMlB,EAAMkB,EAAK,UACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,EAAG,SAAS,CAAC,CAEN,SAAS0Z,IAAmC,CAAE,OAAOpZ,EAAY,SAAUY,EAAM,CACpF,MAAMlB,EAAMkB,EAAK,UACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,EAAG,SAAS,CAAC,CAEN,SAAS2Z,IAAmC,CAAE,OAAOrZ,EAAY,SAAUY,EAAM,CACpF,MAAMlB,EAAMkB,EAAK,UACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,EAAG,SAAS,CAAC,CAEN,SAAS4Z,GAA4B1Y,EAAMC,EAAM,CACpDD,EAAK,KAAKC,CAAI,CAClB,CAEO,SAAS0Y,GAA4B3Y,EAAM,CAC9C,QAAQ,KAAKA,CAAI,CACrB,CAEO,SAAS4Y,GAA8C5Y,EAAM,CAChE,IAAI0B,EACJ,GAAI,CACAA,EAAS1B,aAAgB,WAC5B,MAAW,CACR0B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASmX,GAAsC7Y,EAAM,CACxD,IAAI0B,EACJ,GAAI,CACAA,EAAS1B,aAAgB,GAC5B,MAAW,CACR0B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASoX,GAA0C9Y,EAAM,CAC5D,IAAI0B,EACJ,GAAI,CACAA,EAAS1B,aAAgB,OAC5B,MAAW,CACR0B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASqX,GAA6C/Y,EAAM,CAC/D,IAAI0B,EACJ,GAAI,CACAA,EAAS1B,aAAgB,UAC5B,MAAW,CACR0B,EAAS,EACjB,CAEI,OADYA,CAEhB,CAEO,SAASsX,GAA+BhZ,EAAM,CAEjD,OADY,MAAM,QAAQA,CAAI,CAElC,CAEO,SAASiZ,GAAqCjZ,EAAM,CAEvD,OADY,OAAO,cAAcA,CAAI,CAEzC,CAEO,SAASkZ,GAA4BlZ,EAAMC,EAAMiC,EAAM,CAC1D,MAAMpD,EAAMmB,EAAK,KAAKiC,IAAS,CAAC,EAChC,IAAIyC,EAAOhF,EAAWb,CAAG,EAAI,EAAIR,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EACnGkH,EAAO/G,EACXmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASwU,IAAkC,CAE9C,OADY,OAAO,QAEvB,CAEO,SAASC,IAA6B,CAAE,OAAOha,EAAY,SAAUY,EAAM,CAE9E,OADYA,EAAK,GAErB,EAAG,SAAS,CAAC,CAEN,SAASqZ,GAA4BrZ,EAAM,CAE9C,OADYwL,GAAkB,OAAOxL,CAAI,CAE7C,CAEO,SAASsZ,GAA2BtZ,EAAM,CAE7C,OADY4L,GAAiB,OAAO5L,CAAI,CAE5C,CAEO,SAASuZ,GAA2BvZ,EAAM,CAE7C,OADY8L,EAAiB,OAAO9L,CAAI,CAE5C,CAEO,SAASwZ,GAA4BxZ,EAAM,CAE9C,OADYgM,GAAkB,OAAOhM,CAAI,CAE7C,CAEO,SAASyZ,GAA8BzZ,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAAS0Z,GAA8B1Z,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAAS2Z,GAA8B3Z,EAAM,CAEhD,OADYA,EAAK,MAErB,CAEO,SAAS4Z,IAAoC,CAAE,OAAOxa,EAAY,SAAUY,EAAMC,EAAM,CAE3F,OADY,YAAY,WAAWD,EAAMC,IAAS,CAAC,CAEvD,EAAG,SAAS,CAAC,CAEN,SAAS4Z,GAAyB7Z,EAAM,CAE3C,OADYkM,EAAe,OAAOlM,CAAI,CAE1C,CAEO,SAAS8Z,GAAgC9Z,EAAM,CAElD,OADYqM,GAAsB,OAAOrM,CAAI,CAEjD,CAEO,SAAS+Z,GAA+B/Z,EAAMC,EAAM,CACvD,MAAMnB,EAAMmB,EAAK,QACX0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASqV,GAAgCha,EAAM,CAElD,OADYA,EAAK,QAErB,CAEO,SAASia,GAA4Bja,EAAMC,EAAM,CACpD,MAAMnB,EAAMmB,EAAK,KACX0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASuV,GAA2Bla,EAAMC,EAAM,CACnD,GAAI,CACA,IAAIka,EAAS,CAAC,EAAGna,EAAM,EAAGC,CAAI,EAC1Bma,EAAM,CAACpa,EAAMC,IAAS,CACtB,MAAMG,EAAI+Z,EAAO,EACjBA,EAAO,EAAI,EACX,GAAI,CACA,OAAO5X,GAAkBnC,EAAG+Z,EAAO,EAAGna,EAAMC,CAAI,CAChE,QAAsB,CACNka,EAAO,EAAI/Z,CAC3B,CACS,EAED,OADY,IAAI,QAAQga,CAAG,CAEnC,QAAc,CACND,EAAO,EAAIA,EAAO,EAAI,CAC9B,CACA,CAEO,SAASE,GAA2Bra,EAAM,CAE7C,OADY,IAAI,KAAKA,CAAI,CAE7B,CAEO,SAASsa,IAA6B,CAEzC,OADY,IAAI,MAEpB,CAEO,SAASC,IAA6B,CAEzC,OADY,IAAI,GAEpB,CAEO,SAASC,IAA6B,CAEzC,OADY,IAAI,KAEpB,CAEO,SAASC,GAA2Bza,EAAM,CAE7C,OADY,IAAI,kBAAkBA,CAAI,CAE1C,CAEO,SAAS0a,IAA6B,CAEzC,OADY,IAAI,KAEpB,CAEO,SAASC,GAA2B3a,EAAM,CAE7C,OADY,IAAI,WAAWA,CAAI,CAEnC,CAEO,SAAS4a,GAA2B5a,EAAM,CAE7C,OADY,IAAI,IAAIA,CAAI,CAE5B,CAEO,SAAS6a,GAAiC7a,EAAMC,EAAM,CAEzD,OADY,IAAI,SAASP,EAAmBM,EAAMC,CAAI,CAAC,CAE3D,CAEO,SAAS6a,GAAkD9a,EAAMC,EAAMiC,EAAM,CAEhF,OADY,IAAI,kBAAkBlC,EAAMC,IAAS,EAAGiC,IAAS,CAAC,CAElE,CAEO,SAAS6Y,GAAkD/a,EAAMC,EAAMiC,EAAM,CAEhF,OADY,IAAI,WAAWlC,EAAMC,IAAS,EAAGiC,IAAS,CAAC,CAE3D,CAEO,SAAS8Y,GAAqChb,EAAM,CAEvD,OADY,IAAI,WAAWA,IAAS,CAAC,CAEzC,CAEO,SAASib,GAAqCjb,EAAM,CAEvD,OADY,IAAI,kBAAkBA,IAAS,CAAC,CAEhD,CAEO,SAASkb,IAAwC,CAAE,OAAO9b,EAAY,SAAUY,EAAMC,EAAM,CAE/F,OADY,IAAI,aAAaP,EAAmBM,EAAMC,CAAI,CAAC,CAE/D,EAAG,SAAS,CAAC,CAEN,SAASkb,GAA4Bnb,EAAM,CAE9C,OADYA,EAAK,IAErB,CAEO,SAASob,IAA8B,CAAE,OAAOhc,EAAY,SAAUY,EAAM,CAE/E,OADYA,EAAK,KAAM,CAE3B,EAAG,SAAS,CAAC,CAEN,SAASqb,GAA4Brb,EAAM,CAE9C,OADYA,EAAK,IAErB,CAEO,SAASsb,GAA2Btb,EAAM,CAE7C,OADYA,EAAK,IAAK,CAE1B,CAEO,SAASub,IAA6B,CAEzC,OADY,KAAK,IAAK,CAE1B,CAEO,SAASC,GAAwCxb,EAAM,CAE1D,OADYA,EAAK,gBAErB,CAEO,SAASyb,IAAqC,CAAE,OAAOrc,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAElG,OADYlC,EAAK,YAAYN,EAAmBO,EAAMiC,CAAI,CAAC,CAE/D,EAAG,SAAS,CAAC,CAEN,SAASwZ,GAAkC1b,EAAM,CAEpD,OADYA,EAAK,UAErB,CAEO,SAAS2b,GAAqB3b,EAAM,CAEvC,OADY+M,GAAW,OAAO/M,CAAI,CAEtC,CAEO,SAAS4b,IAAoC,CAAE,OAAOxc,EAAY,SAAUY,EAAM,CAErF,OADYA,EAAK,WAAY,CAEjC,EAAG,SAAS,CAAC,CAEN,SAAS6b,IAAoC,CAAE,OAAOzc,EAAY,SAAUY,EAAM,CAErF,OADYA,EAAK,WAAY,CAEjC,EAAG,SAAS,CAAC,CAEN,SAAS8b,IAAoC,CAAE,OAAO1c,EAAY,SAAUY,EAAMC,EAAM,CAE3F,OADYD,EAAK,WAAWC,CAAI,CAEpC,EAAG,SAAS,CAAC,CAEN,SAAS8b,IAA8B,CAAE,OAAO3c,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE3F,OADYlC,EAAK,KAAKN,EAAmBO,EAAMiC,CAAI,CAAC,CAExD,EAAG,SAAS,CAAC,CAEN,SAAS8Z,IAA8B,CAAE,OAAO5c,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAM,CAEjG,OADYxC,EAAK,KAAKN,EAAmBO,EAAMiC,CAAI,EAAGM,IAAS,CAAC,CAEpE,EAAG,SAAS,CAAC,CAEN,SAASyZ,GAA4Bjc,EAAM,CAE9C,OADY6P,GAAkB,OAAO7P,CAAI,CAE7C,CAEO,SAASkc,GAA0Blc,EAAM,CAE5C,OADYiQ,GAAgB,OAAOjQ,CAAI,CAE3C,CAEO,SAASmc,IAA+B,CAAE,OAAO/c,EAAY,SAAUY,EAAMC,EAAM,CAEtF,OADY,KAAK,MAAMP,EAAmBM,EAAMC,CAAI,CAAC,CAEzD,EAAG,SAAS,CAAC,CAEN,SAASmc,GAAmCpc,EAAM,CAErD,OADYA,EAAK,WAErB,CAEO,SAASqc,GAAwCrc,EAAM,CAE1D,OADYmQ,GAA2B,SAASnQ,CAAI,CAExD,CAEO,SAASsc,GAA4Btc,EAAM,CAE9C,OADYsQ,GAAe,SAAStQ,CAAI,CAE5C,CAEO,SAASuc,GAA+Bvc,EAAM,CAEjD,OADYA,EAAK,OAErB,CAEO,SAASwc,GAA4Bxc,EAAMC,EAAM,CAEpD,OADYD,EAAK,KAAKC,CAAI,CAE9B,CAEO,SAASwc,IAA6B,CAAE,OAAOrd,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAE1F,OADYlC,EAAK,IAAIC,EAAMiC,CAAI,CAEnC,EAAG,SAAS,CAAC,CAEN,SAASwa,GAAqC1c,EAAM,CAEvD,OADYwQ,GAA2B,OAAOxQ,CAAI,CAEtD,CAEO,SAAS2c,GAAa3c,EAAM,CAE/B,OADY0Q,GAAG,OAAO1Q,CAAI,CAE9B,CAEO,SAAS4c,GAAsC5c,EAAM,CACxD,eAAeA,CAAI,CACvB,CAEO,SAAS6c,GAAsC7c,EAAM,CAExD,OADYA,EAAK,cAErB,CAEO,SAAS8c,IAAwC,CAAE,OAAO1d,EAAY,SAAUY,EAAMC,EAAM,CAC/FD,EAAK,eAAeC,CAAI,CAC5B,EAAG,SAAS,CAAC,CAEN,SAAS8c,GAAkC/c,EAAM,CACpD,MAAMlB,EAAMkB,EAAK,WACjB,OAAQyD,GAAqC,QAAQ3E,CAAG,EAAI,GAAK,GAAK,CAC1E,CAEO,SAASke,GAA2Bhd,EAAM,CAE7C,OADYsR,GAAiB,OAAOtR,CAAI,CAE5C,CAEO,SAASid,IAAiC,CAAE,OAAO7d,EAAY,UAAY,CAE9E,OADY,OAAO,OAEvB,EAAG,SAAS,CAAC,CAEN,SAAS8d,GAA+Bld,EAAM,CAEjD,OADY,QAAQ,QAAQA,CAAI,CAEpC,CAEO,SAASmd,IAAgC,CAAE,OAAO/d,EAAY,SAAUY,EAAM,CAEjF,OADYA,EAAK,MAErB,EAAG,SAAS,CAAC,CAEN,SAASod,GAAoBpd,EAAM,CAEtC,OADYsL,EAAO,SAAStL,CAAI,CAEpC,CAEO,SAASqd,GAAwBrd,EAAM,CAE1C,OADYyR,GAAc,OAAOzR,CAAI,CAEzC,CAEO,SAASsd,GAA8Btd,EAAM,CAEhD,OADY2R,GAAoB,OAAO3R,CAAI,CAE/C,CAEO,SAASud,GAAsBvd,EAAM,CAExC,OADY6R,GAAY,OAAO7R,CAAI,CAEvC,CAEO,SAASwd,GAA8Bxd,EAAM,CAEhD,OADY+R,GAAoB,OAAO/R,CAAI,CAE/C,CAEO,SAASyd,GAA6Bzd,EAAM,CAE/C,OADYiS,GAAmB,OAAOjS,CAAI,CAE9C,CAEO,SAAS0d,GAAuB1d,EAAM,CAEzC,OADY2P,EAAa,OAAO3P,CAAI,CAExC,CAEO,SAAS2d,GAAc3d,EAAM,CAEhC,OADYqS,GAAI,OAAOrS,CAAI,CAE/B,CAEO,SAAS4d,GAAwB5d,EAAM,CAE1C,OADYgO,EAAc,OAAOhO,CAAI,CAEzC,CAEO,SAAS6d,IAAoC,CAAE,OAAOze,EAAY,SAAUY,EAAMC,EAAM,CAE3F,OADY,WAAWD,EAAMC,CAAI,CAErC,EAAG,SAAS,CAAC,CAEN,SAAS6d,GAA2B9d,EAAMC,EAAMiC,EAAM,CACzDlC,EAAKC,IAAS,CAAC,EAAIiC,CACvB,CAEO,SAAS6b,GAA2B/d,EAAMC,EAAMiC,EAAM,CACzDlC,EAAKC,CAAI,EAAIiC,CACjB,CAEO,SAAS8b,GAA2Bhe,EAAMC,EAAMiC,EAAM,CACzDlC,EAAKC,CAAI,EAAIiC,CACjB,CAEO,SAAS+b,GAA2Bje,EAAMC,EAAMiC,EAAM,CACzDlC,EAAK,IAAIC,EAAMiC,IAAS,CAAC,CAC7B,CAEO,SAASgc,GAA2Ble,EAAMC,EAAMiC,EAAM,CACzDlC,EAAK,IAAIC,EAAMiC,IAAS,CAAC,CAC7B,CAEO,SAASic,GAA2Bne,EAAMC,EAAMiC,EAAM,CAEzD,OADYlC,EAAK,IAAIC,EAAMiC,CAAI,CAEnC,CAEO,SAASkc,GAAkCpe,EAAMC,EAAM,CAC1DD,EAAK,QAAUC,CACnB,CAEO,SAASoe,GAAoCre,EAAMC,EAAM,CAC5DD,EAAK,UAAYC,CACrB,CAEO,SAASqe,GAAqCte,EAAMC,EAAM,CAC7DD,EAAK,WAAaC,CACtB,CAEO,SAASse,GAAkCve,EAAMC,EAAM,CAC1DD,EAAK,QAAUC,CACnB,CAEO,SAASue,GAAkCxe,EAAMC,EAAM,CAC1DD,EAAK,QAAUC,CACnB,CAEO,SAASwe,GAAoCze,EAAMC,EAAM,CAC5DD,EAAK,UAAYC,CACrB,CAEO,SAASye,GAA0C1e,EAAMC,EAAM,CAClED,EAAK,gBAAkBC,CAC3B,CAEO,SAAS0e,GAA0C3e,EAAMC,EAAM,CAClED,EAAK,gBAAkBC,CAC3B,CAEO,SAAS2e,GAAiC5e,EAAMC,EAAM,CACzDD,EAAK,OAASC,IAAS,CAC3B,CAEO,SAAS4e,GAAqB7e,EAAM,CAEvC,OADYwI,GAAW,OAAOxI,CAAI,CAEtC,CAEO,SAAS8e,GAAiC9e,EAAM,CAEnD,OADYuG,EAAuB,OAAOvG,CAAI,CAElD,CAEO,SAAS+e,GAAgC/e,EAAM,CAElD,OADY8S,GAAsB,OAAO9S,CAAI,CAEjD,CAEO,SAASgf,GAA6Bhf,EAAMC,EAAM,CACrD,MAAMnB,EAAMmB,EAAK,MACX0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAASsa,IAAgD,CAC5D,MAAMngB,EAAM,OAAO,OAAW,IAAc,KAAO,OACnD,OAAOa,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAASogB,IAAqD,CACjE,MAAMpgB,EAAM,OAAO,WAAe,IAAc,KAAO,WACvD,OAAOa,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAASqgB,IAA8C,CAC1D,MAAMrgB,EAAM,OAAO,KAAS,IAAc,KAAO,KACjD,OAAOa,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAASsgB,IAAgD,CAC5D,MAAMtgB,EAAM,OAAO,OAAW,IAAc,KAAO,OACnD,OAAOa,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAASugB,GAAsBrf,EAAM,CAExC,OADY4M,EAAY,OAAO5M,CAAI,CAEvC,CAEO,SAASsf,IAAmC,CAAE,OAAOlgB,EAAY,SAAUY,EAAM,CAEpF,OADY,KAAK,UAAUA,CAAI,CAEnC,EAAG,SAAS,CAAC,CAEN,SAASuf,GAAgCvf,EAAMC,EAAMiC,EAAM,CAE9D,OADYlC,EAAK,SAASC,IAAS,EAAGiC,IAAS,CAAC,CAEpD,CAEO,SAASsd,GAA8Bxf,EAAM,CAChD,MAAMlB,EAAMkB,EAAK,OACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAAS2gB,GAA4Bzf,EAAMC,EAAM,CAEpD,OADYD,EAAK,KAAKC,CAAI,CAE9B,CAEO,SAASyf,GAA4B1f,EAAMC,EAAMiC,EAAM,CAE1D,OADYlC,EAAK,KAAKC,EAAMiC,CAAI,CAEpC,CAEO,SAASyd,GAA0B3f,EAAM,CAE5C,OADYqT,GAAgB,OAAOrT,CAAI,CAE3C,CAEO,SAAS4f,IAAqC,CAAE,OAAOxgB,EAAY,SAAUY,EAAMC,EAAMiC,EAAMM,EAAM,CAExG,OADYxC,EAAK,YAAYN,EAAmBO,EAAMiC,CAAI,EAAGwB,GAAmClB,CAAI,CAAC,CAEzG,EAAG,SAAS,CAAC,CAEN,SAASqd,IAAqC,CAAE,OAAOzgB,EAAY,SAAUY,EAAMC,EAAMiC,EAAM,CAElG,OADYlC,EAAK,YAAYC,EAAMyD,GAAmCxB,CAAI,CAAC,CAE/E,EAAG,SAAS,CAAC,CAEN,SAAS4d,GAAmC9f,EAAM,CACrD,MAAMlB,EAAMkB,EAAK,YACjB,OAAOL,EAAWb,CAAG,EAAI,EAAIG,EAAqBH,CAAG,CACzD,CAEO,SAASihB,IAAgC,CAAE,OAAO3gB,EAAY,SAAUY,EAAMC,EAAM,CAEvF,OADYD,EAAK,OAAOC,CAAI,CAEhC,EAAG,SAAS,CAAC,CAEN,SAAS+f,GAAsBhgB,EAAM,CAExC,OADY2T,GAAY,OAAO3T,CAAI,CAEvC,CAEO,SAASigB,GAAiBjgB,EAAM,CAEnC,OADYyF,EAAO,OAAOzF,CAAI,CAElC,CAEO,SAASkgB,GAAoBlgB,EAAM,CAEtC,OADYyF,EAAO,SAASzF,CAAI,CAEpC,CAEO,SAASmgB,IAA+B,CAAE,OAAO/gB,EAAY,SAAUY,EAAM,CAEhF,OADYA,EAAK,KAErB,EAAG,SAAS,CAAC,CAEN,SAASogB,GAA6BpgB,EAAM,CAE/C,OADYA,EAAK,KAErB,CAEO,SAASqgB,GAA8BrgB,EAAM,CAEhD,OADYA,EAAK,OAAQ,CAE7B,CAEO,SAASsgB,GAA8BtgB,EAAM,CAEhD,OADYwO,EAAoB,OAAOxO,CAAI,CAE/C,CAEO,SAASugB,GAA+BvgB,EAAM,CAEjD,OADYA,EAAK,OAErB,CAEO,SAASwgB,GAAgCxgB,EAAM,CAElD,OADYA,EAAK,QAErB,CAEO,SAASygB,GAA4BzgB,EAAM,CAC9C,QAAQ,KAAKA,CAAI,CACrB,CAEO,SAAS0gB,GAA4B1gB,EAAMC,EAAM,CACpDD,EAAK,KAAKC,CAAI,CAClB,CAEO,SAAS0gB,GAAqB3gB,EAAM,CAEvC,MADY,CAACA,CAEjB,CAEO,SAAS4gB,GAA2B5gB,EAAM,CAE7C,OADYA,CAEhB,CAEO,SAAS6gB,GAA2B7gB,EAAM,CAE7C,OADY,OAAO,QAAQ,GAAIA,CAAI,CAEvC,CAEO,SAAS8gB,GAA6B9gB,EAAMC,EAAM,CACrD,MAAM8gB,EAAI9gB,EACJnB,EAAM,OAAOiiB,GAAO,SAAWA,EAAI,OACzC/hB,EAAoB,EAAC,YAAYgB,EAAO,EAAI,EAAGL,EAAWb,CAAG,EAAI,OAAO,CAAC,EAAIA,EAAK,EAAI,EACtFE,EAAoB,EAAC,SAASgB,EAAO,EAAI,EAAG,CAACL,EAAWb,CAAG,EAAG,EAAI,CACtE,CAEO,SAASkiB,GAAuBhhB,EAAM,CACzC,MAAM+gB,EAAI/gB,EAEV,OADY,OAAO+gB,GAAO,UAAaA,EAAI,EAAI,EAAK,CAExD,CAEO,SAASE,GAAmBjhB,EAAM,CACrC,MAAMd,EAAMc,EAAK,SACjB,OAAId,EAAI,OAAS,GACbA,EAAI,EAAI,EACD,IAEC,EAEhB,CAEO,SAASgiB,GAA+BlhB,EAAMC,EAAMiC,EAAM,CAE7D,OADYnC,GAAeC,EAAMC,EAAM,GAAIgC,EAAgB,CAE/D,CAEO,SAASkf,GAA+BnhB,EAAMC,EAAMiC,EAAM,CAE7D,OADYnC,GAAeC,EAAMC,EAAM,IAAKkC,EAAgB,CAEhE,CAEO,SAASif,GAA+BphB,EAAMC,EAAMiC,EAAM,CAE7D,OADYnC,GAAeC,EAAMC,EAAM,IAAKmC,EAAgB,CAEhE,CAEO,SAASif,GAA+BrhB,EAAMC,EAAMiC,EAAM,CAE7D,OADY7B,GAAYL,EAAMC,EAAM,IAAKoC,EAAgB,CAE7D,CAEO,SAASif,GAA+BthB,EAAMC,EAAMiC,EAAM,CAE7D,OADY7B,GAAYL,EAAMC,EAAM,IAAKqC,EAAgB,CAE7D,CAEO,SAASif,GAAwBvhB,EAAMC,EAAM,CAChD,MAAMnB,EAAMwB,GAAYL,CAAI,EACtB0E,EAAOrG,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EAC7EkH,EAAO/G,EACbmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAAS6c,GAAqBxhB,EAAMC,EAAM,CAE7C,OADY,IAAI,MAAMP,EAAmBM,EAAMC,CAAI,CAAC,CAExD,CAEO,SAASwhB,GAAczhB,EAAMC,EAAM,CAEtC,OADYD,KAAQC,CAExB,CAEO,SAASyhB,IAAkC,CAC9C,MAAMC,EAAQjkB,EAAK,oBACbkB,EAAS+iB,EAAM,KAAK,CAAC,EAC3BA,EAAM,IAAI,EAAG,MAAS,EACtBA,EAAM,IAAI/iB,EAAS,EAAG,MAAS,EAC/B+iB,EAAM,IAAI/iB,EAAS,EAAG,IAAI,EAC1B+iB,EAAM,IAAI/iB,EAAS,EAAG,EAAI,EAC1B+iB,EAAM,IAAI/iB,EAAS,EAAG,EAAK,CAE/B,CAEO,SAASgjB,GAAoB5hB,EAAM,CAEtC,OADY,MAAM,QAAQA,CAAI,CAElC,CAEO,SAAS6hB,GAAqB7hB,EAAM,CAEvC,OADY,OAAOA,GAAU,QAEjC,CAEO,SAAS8hB,GAAuB9hB,EAAM,CAEzC,OADY,OAAOA,GAAU,UAEjC,CAEO,SAAS+hB,GAAmB/hB,EAAM,CAErC,OADYA,IAAS,IAEzB,CAEO,SAASgiB,GAAqBhiB,EAAM,CACvC,MAAMpC,EAAMoC,EAEZ,OADY,OAAOpC,GAAS,UAAYA,IAAQ,IAEpD,CAEO,SAASqkB,GAAqBjiB,EAAM,CAEvC,OADY,OAAOA,GAAU,QAEjC,CAEO,SAASkiB,GAAwBliB,EAAM,CAE1C,OADYA,IAAS,MAEzB,CAEO,SAASmiB,GAAoBniB,EAAMC,EAAM,CAE5C,OADYD,IAASC,CAEzB,CAEO,SAASmiB,GAA0BpiB,EAAMC,EAAM,CAElD,OADYD,GAAQC,CAExB,CAEO,SAASoiB,IAAoB,CAEhC,OADY3kB,EAAK,MAErB,CAEO,SAAS4kB,GAAsBtiB,EAAMC,EAAM,CAC9C,MAAMf,EAAMe,EACNnB,EAAM,OAAOI,GAAS,SAAWA,EAAM,OAC7CF,IAAqB,WAAWgB,EAAO,EAAI,EAAGL,EAAWb,CAAG,EAAI,EAAIA,EAAK,EAAI,EAC7EE,EAAoB,EAAC,SAASgB,EAAO,EAAI,EAAG,CAACL,EAAWb,CAAG,EAAG,EAAI,CACtE,CAEO,SAASyjB,GAAsBviB,EAAM,CAExC,OADYA,CAEhB,CAEO,SAASwiB,GAAsBxiB,EAAMC,EAAM,CAC9C,MAAMf,EAAMe,EACNnB,EAAM,OAAOI,GAAS,SAAWA,EAAM,OAC7C,IAAIyF,EAAOhF,EAAWb,CAAG,EAAI,EAAIR,EAAkBQ,EAAKpB,EAAK,kBAAmBA,EAAK,kBAAkB,EACnGkH,EAAO/G,EACXmB,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG4E,EAAM,EAAI,EACtD5F,EAAkB,EAAG,SAASgB,EAAO,EAAI,EAAG2E,EAAM,EAAI,CAC1D,CAEO,SAAS8d,GAAsBziB,EAAMC,EAAM,CAE9C,OADYP,EAAmBM,EAAMC,CAAI,CAE7C,CAEO,SAASyiB,GAAiB1iB,EAAMC,EAAM,CACzC,MAAM,IAAI,MAAMP,EAAmBM,EAAMC,CAAI,CAAC,CAClD,CAEO,SAAS0iB,GAA2B3iB,EAAM,CAC7C,IAAI0B,EACJ,GAAI,CAAEA,EAAS,CAAC1B,CAAI,OAAUT,EAAG,CAAEmC,EAASnC,CAAC,CAE7C,OADYmC,CAEhB,iiSC5xUMkhB,GAAY,IAAgE,IAAA,GAAA,IAAA,IAAA,0CAAA,YAAA,GAAA,EAAA,KAAA,YAAA,GAAA,EASlFC,GACI,IAAI,MACA,CAAE,EACF,CACI,KAAM,CACF,MAAM,IAAI,MACN,gGACH,CACJ,CACJ,CACJ,CACL,EAMA,IAAIC,GAAa,KAOjB,eAAeC,IAAkB,CAC7B,KAAM,CAAE,SAAA5hB,CAAQ,EAAK,MAAM,YAAY,qBAAqB,MAAMyhB,EAAS,EAAG,CAE1E,iCAAkCI,EAC1C,CAAK,EAEDH,GAAwB1hB,EAAS,OAAO,EAExCA,EAAS,QAAQ,iBAAkB,CACvC,CASO,eAAe8hB,IAAY,CACzBH,KAAYA,GAAaC,GAAiB,GAC/C,MAAMD,EACV","x_google_ignoreList":[0,1]}