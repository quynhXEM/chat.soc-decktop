{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/7014.js","mappings":"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","sources":["webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/editing.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/createMessageContent.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/message.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/isContentModified.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { EventStatus, type MatrixClient } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { type IRoomState } from \"../../../../structures/RoomView\";\r\nimport dis from \"../../../../../dispatcher/dispatcher\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\n\r\nexport function endEditing(roomContext: Pick<IRoomState, \"timelineRenderingType\">): void {\r\n    // todo local storage\r\n    // localStorage.removeItem(this.editorRoomKey);\r\n    // localStorage.removeItem(this.editorStateKey);\r\n\r\n    // close the event editing and focus composer\r\n    dis.dispatch({\r\n        action: Action.EditEvent,\r\n        event: null,\r\n        timelineRenderingType: roomContext.timelineRenderingType,\r\n    });\r\n    dis.dispatch({\r\n        action: Action.FocusSendMessageComposer,\r\n        context: roomContext.timelineRenderingType,\r\n    });\r\n}\r\n\r\nexport function cancelPreviousPendingEdit(mxClient: MatrixClient, editorStateTransfer: EditorStateTransfer): void {\r\n    const originalEvent = editorStateTransfer.getEvent();\r\n    const previousEdit = originalEvent.replacingEvent();\r\n    if (previousEdit && (previousEdit.status === EventStatus.QUEUED || previousEdit.status === EventStatus.NOT_SENT)) {\r\n        mxClient.cancelPendingEvent(previousEdit);\r\n    }\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { richToPlain, plainToRich } from \"@vector-im/matrix-wysiwyg\";\r\nimport { type IContent, type IEventRelation, MatrixEvent, MsgType } from \"matrix-js-sdk/src/matrix\";\r\nimport {\r\n    type ReplacementEvent,\r\n    type RoomMessageEventContent,\r\n    type RoomMessageTextEventContent,\r\n} from \"matrix-js-sdk/src/types\";\r\n\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport { parsePermalink } from \"../../../../../utils/permalinks/Permalinks\";\r\nimport { addReplyToMessageContent } from \"../../../../../utils/Reply\";\r\nimport { isNotNull } from \"../../../../../Typeguards\";\r\n\r\nexport const EMOTE_PREFIX = \"/me \";\r\n\r\n// Merges favouring the given relation\r\nfunction attachRelation(content: IContent, relation?: IEventRelation): void {\r\n    if (relation) {\r\n        content[\"m.relates_to\"] = {\r\n            ...(content[\"m.relates_to\"] || {}),\r\n            ...relation,\r\n        };\r\n    }\r\n}\r\n\r\ninterface CreateMessageContentParams {\r\n    relation?: IEventRelation;\r\n    replyToEvent?: MatrixEvent;\r\n    editedEvent?: MatrixEvent;\r\n}\r\n\r\nconst isMatrixEvent = (e: MatrixEvent | undefined): e is MatrixEvent => e instanceof MatrixEvent;\r\n\r\nexport async function createMessageContent(\r\n    message: string,\r\n    isHTML: boolean,\r\n    { relation, replyToEvent, editedEvent }: CreateMessageContentParams,\r\n): Promise<RoomMessageEventContent> {\r\n    const isEditing = isMatrixEvent(editedEvent);\r\n\r\n    const isEmote = message.startsWith(EMOTE_PREFIX);\r\n    if (isEmote) {\r\n        // if we are dealing with an emote we want to remove the prefix so that `/me` does not\r\n        // appear after the `* <userName>` text in the timeline\r\n        message = message.slice(EMOTE_PREFIX.length);\r\n    }\r\n    if (message.startsWith(\"//\")) {\r\n        // if user wants to enter a single slash at the start of a message, this\r\n        // is how they have to do it (due to it clashing with commands), so here we\r\n        // remove the first character to make sure //word displays as /word\r\n        message = message.slice(1);\r\n    }\r\n\r\n    // if we're editing rich text, the message content is pure html\r\n    // BUT if we're not, the message content will be plain text where we need to convert the mentions\r\n    const body = isHTML ? await richToPlain(message, false) : convertPlainTextToBody(message);\r\n\r\n    const content = {\r\n        msgtype: isEmote ? MsgType.Emote : MsgType.Text,\r\n        body: isEditing ? `* ${body}` : body,\r\n    } as RoomMessageTextEventContent & ReplacementEvent<RoomMessageTextEventContent>;\r\n\r\n    // TODO markdown support\r\n\r\n    const isMarkdownEnabled = SettingsStore.getValue(\"MessageComposerInput.useMarkdown\");\r\n    const formattedBody = isHTML ? message : isMarkdownEnabled ? await plainToRich(message, true) : null;\r\n\r\n    if (formattedBody) {\r\n        content.format = \"org.matrix.custom.html\";\r\n        content.formatted_body = isEditing ? `* ${formattedBody}` : formattedBody;\r\n    }\r\n\r\n    if (isEditing) {\r\n        content[\"m.new_content\"] = {\r\n            msgtype: content.msgtype,\r\n            body: body,\r\n        };\r\n\r\n        if (formattedBody) {\r\n            content[\"m.new_content\"].format = \"org.matrix.custom.html\";\r\n            content[\"m.new_content\"][\"formatted_body\"] = formattedBody;\r\n        }\r\n    }\r\n\r\n    const newRelation = isEditing ? { ...relation, rel_type: \"m.replace\", event_id: editedEvent.getId() } : relation;\r\n\r\n    // TODO Do we need to attach mentions here?\r\n    // TODO Handle editing?\r\n    attachRelation(content, newRelation);\r\n\r\n    if (!isEditing && replyToEvent) {\r\n        addReplyToMessageContent(content, replyToEvent);\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\n/**\r\n * Without a model, we need to manually amend mentions in uncontrolled message content\r\n * to make sure that mentions meet the matrix specification.\r\n *\r\n * @param content - the output from the `MessageComposer` state when in plain text mode\r\n * @returns - a string formatted with the mentions replaced as required\r\n */\r\nfunction convertPlainTextToBody(content: string): string {\r\n    const document = new DOMParser().parseFromString(content, \"text/html\");\r\n    const mentions = Array.from(document.querySelectorAll(\"a[data-mention-type]\"));\r\n\r\n    mentions.forEach((mention) => {\r\n        const mentionType = mention.getAttribute(\"data-mention-type\");\r\n        switch (mentionType) {\r\n            case \"at-room\": {\r\n                mention.replaceWith(\"@room\");\r\n                break;\r\n            }\r\n            case \"user\": {\r\n                const innerText = mention.innerHTML;\r\n                mention.replaceWith(innerText);\r\n                break;\r\n            }\r\n            case \"room\": {\r\n                // for this case we use parsePermalink to try and get the mx id\r\n                const href = mention.getAttribute(\"href\");\r\n\r\n                // if the mention has no href attribute, leave it alone\r\n                if (href === null) break;\r\n\r\n                // otherwise, attempt to parse the room alias or id from the href\r\n                const permalinkParts = parsePermalink(href);\r\n\r\n                // then if we have permalink parts with a valid roomIdOrAlias, replace the\r\n                // room mention with that text\r\n                if (isNotNull(permalinkParts) && isNotNull(permalinkParts.roomIdOrAlias)) {\r\n                    mention.replaceWith(permalinkParts.roomIdOrAlias);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    return document.body.innerHTML;\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022, 2023 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type Composer as ComposerEvent } from \"@matrix-org/analytics-events/types/typescript/Composer\";\r\nimport {\r\n    type IEventRelation,\r\n    type MatrixEvent,\r\n    type ISendEventResponse,\r\n    type MatrixClient,\r\n    THREAD_RELATION_TYPE,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { type RoomMessageEventContent } from \"matrix-js-sdk/src/types\";\r\n\r\nimport { PosthogAnalytics } from \"../../../../../PosthogAnalytics\";\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport { decorateStartSendingTime, sendRoundTripMetric } from \"../../../../../sendTimePerformanceMetrics\";\r\nimport { doMaybeLocalRoomAction } from \"../../../../../utils/local-room\";\r\nimport { CHAT_EFFECTS } from \"../../../../../effects\";\r\nimport { containsEmoji } from \"../../../../../effects/utils\";\r\nimport { type IRoomState } from \"../../../../structures/RoomView\";\r\nimport dis from \"../../../../../dispatcher/dispatcher\";\r\nimport { createRedactEventDialog } from \"../../../dialogs/ConfirmRedactDialog\";\r\nimport { endEditing, cancelPreviousPendingEdit } from \"./editing\";\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\nimport { createMessageContent, EMOTE_PREFIX } from \"./createMessageContent\";\r\nimport { isContentModified } from \"./isContentModified\";\r\nimport { CommandCategories, getCommand } from \"../../../../../SlashCommands\";\r\nimport { runSlashCommand, shouldSendAnyway } from \"../../../../../editor/commands\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { addReplyToMessageContent } from \"../../../../../utils/Reply\";\r\nimport { attachRelation } from \"../../SendMessageComposer\";\r\n\r\nexport interface SendMessageParams {\r\n    mxClient: MatrixClient;\r\n    relation?: IEventRelation;\r\n    replyToEvent?: MatrixEvent;\r\n    roomContext: Pick<IRoomState, \"timelineRenderingType\" | \"room\">;\r\n}\r\n\r\nexport async function sendMessage(\r\n    message: string,\r\n    isHTML: boolean,\r\n    { roomContext, mxClient, ...params }: SendMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const { relation, replyToEvent } = params;\r\n    const { room } = roomContext;\r\n    const roomId = room?.roomId;\r\n\r\n    if (!roomId) {\r\n        return;\r\n    }\r\n\r\n    const posthogEvent: ComposerEvent = {\r\n        eventName: \"Composer\",\r\n        isEditing: false,\r\n        messageType: \"Text\",\r\n        isReply: Boolean(replyToEvent),\r\n        // TODO thread\r\n        inThread: relation?.rel_type === THREAD_RELATION_TYPE.name,\r\n    };\r\n\r\n    // TODO thread\r\n    /*if (posthogEvent.inThread) {\r\n        const threadRoot = room.findEventById(relation?.event_id);\r\n        posthogEvent.startsThread = threadRoot?.getThread()?.events.length === 1;\r\n    }*/\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>(posthogEvent);\r\n\r\n    let content: RoomMessageEventContent | null = null;\r\n\r\n    // Slash command handling here approximates what can be found in SendMessageComposer.sendMessage()\r\n    // but note that the /me and // special cases are handled by the call to createMessageContent\r\n    if (message.startsWith(\"/\") && !message.startsWith(\"//\") && !message.startsWith(EMOTE_PREFIX)) {\r\n        const { cmd, args } = getCommand(message);\r\n        if (cmd) {\r\n            const threadId = relation?.rel_type === THREAD_RELATION_TYPE.name ? relation?.event_id : null;\r\n            let commandSuccessful: boolean;\r\n            [content, commandSuccessful] = await runSlashCommand(mxClient, cmd, args, roomId, threadId ?? null);\r\n\r\n            if (!commandSuccessful) {\r\n                return; // errored\r\n            }\r\n\r\n            if (\r\n                content &&\r\n                (cmd.category === CommandCategories.messages || cmd.category === CommandCategories.effects)\r\n            ) {\r\n                attachRelation(content, relation);\r\n                if (replyToEvent) {\r\n                    addReplyToMessageContent(content, replyToEvent);\r\n                }\r\n            } else {\r\n                // instead of setting shouldSend to false as in SendMessageComposer, just return\r\n                return;\r\n            }\r\n        } else {\r\n            const sendAnyway = await shouldSendAnyway(message);\r\n            // re-focus the composer after QuestionDialog is closed\r\n            dis.dispatch({\r\n                action: Action.FocusAComposer,\r\n                context: roomContext.timelineRenderingType,\r\n            });\r\n            // if !sendAnyway bail to let the user edit the composer and try again\r\n            if (!sendAnyway) return;\r\n        }\r\n    }\r\n\r\n    // if content is null, we haven't done any slash command processing, so generate some content\r\n    content ??= await createMessageContent(message, isHTML, params);\r\n\r\n    // TODO replace emotion end of message ?\r\n\r\n    // TODO quick reaction\r\n\r\n    // don't bother sending an empty message\r\n    if (!content.body.trim()) {\r\n        return;\r\n    }\r\n\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        decorateStartSendingTime(content);\r\n    }\r\n\r\n    const threadId = relation?.event_id && relation?.rel_type === THREAD_RELATION_TYPE.name ? relation.event_id : null;\r\n\r\n    const prom = doMaybeLocalRoomAction(\r\n        roomId,\r\n        (actualRoomId: string) => mxClient.sendMessage(actualRoomId, threadId, content!),\r\n        mxClient,\r\n    );\r\n\r\n    if (replyToEvent) {\r\n        // Clear reply_to_event as we put the message into the queue\r\n        // if the send fails, retry will handle resending.\r\n        dis.dispatch({\r\n            action: \"reply_to_event\",\r\n            event: null,\r\n            context: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    dis.dispatch({ action: \"message_sent\" });\r\n    CHAT_EFFECTS.forEach((effect) => {\r\n        if (content && containsEmoji(content, effect.emojis)) {\r\n            // For initial threads launch, chat effects are disabled\r\n            // see #19731\r\n            const isNotThread = relation?.rel_type !== THREAD_RELATION_TYPE.name;\r\n            if (isNotThread) {\r\n                dis.dispatch({ action: `effects.${effect.command}` });\r\n            }\r\n        }\r\n    });\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        prom.then((resp) => {\r\n            sendRoundTripMetric(mxClient, roomId, resp.event_id);\r\n        });\r\n    }\r\n\r\n    // TODO save history\r\n    // TODO save local state\r\n\r\n    //if (shouldSend && SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n    if (SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n        dis.dispatch({\r\n            action: \"scroll_to_bottom\",\r\n            timelineRenderingType: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    return prom;\r\n}\r\n\r\ninterface EditMessageParams {\r\n    mxClient: MatrixClient;\r\n    roomContext: Pick<IRoomState, \"timelineRenderingType\">;\r\n    editorStateTransfer: EditorStateTransfer;\r\n}\r\n\r\nexport async function editMessage(\r\n    html: string,\r\n    { roomContext, mxClient, editorStateTransfer }: EditMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const editedEvent = editorStateTransfer.getEvent();\r\n\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>({\r\n        eventName: \"Composer\",\r\n        isEditing: true,\r\n        messageType: \"Text\",\r\n        inThread: Boolean(editedEvent?.getThread()),\r\n        isReply: Boolean(editedEvent.replyEventId),\r\n    });\r\n\r\n    // TODO emoji\r\n    // Replace emoticon at the end of the message\r\n    /*    if (SettingsStore.getValue('MessageComposerInput.autoReplaceEmoji')) {\r\n        const caret = this.editorRef.current?.getCaret();\r\n        const position = this.model.positionForOffset(caret.offset, caret.atNodeEnd);\r\n        this.editorRef.current?.replaceEmoticon(position, REGEX_EMOTICON);\r\n    }*/\r\n    const editContent = await createMessageContent(html, true, { editedEvent });\r\n    const newContent = editContent[\"m.new_content\"]!;\r\n\r\n    const shouldSend = true;\r\n\r\n    if (newContent?.body === \"\") {\r\n        cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n        createRedactEventDialog({\r\n            mxEvent: editedEvent,\r\n            onCloseDialog: () => {\r\n                endEditing(roomContext);\r\n            },\r\n        });\r\n        return;\r\n    }\r\n\r\n    let response: Promise<ISendEventResponse> | undefined;\r\n\r\n    const roomId = editedEvent.getRoomId();\r\n\r\n    // If content is modified then send an updated event into the room\r\n    if (isContentModified(newContent, editorStateTransfer) && roomId) {\r\n        // TODO Slash Commands\r\n\r\n        if (shouldSend) {\r\n            cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n\r\n            const event = editorStateTransfer.getEvent();\r\n            const threadId = event.threadRootId || null;\r\n\r\n            response = mxClient.sendMessage(roomId, threadId, editContent);\r\n            dis.dispatch({ action: \"message_sent\" });\r\n        }\r\n    }\r\n\r\n    endEditing(roomContext);\r\n    return response;\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RoomMessageEventContent, type RoomMessageTextEventContent } from \"matrix-js-sdk/src/types\";\r\n\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\n\r\nexport function isContentModified(\r\n    newContent: RoomMessageEventContent,\r\n    editorStateTransfer: EditorStateTransfer,\r\n): boolean {\r\n    // if nothing has changed then bail\r\n    const oldContent = editorStateTransfer.getEvent().getContent<RoomMessageEventContent>();\r\n    if (\r\n        oldContent[\"msgtype\"] === newContent[\"msgtype\"] &&\r\n        oldContent[\"body\"] === newContent[\"body\"] &&\r\n        (<RoomMessageTextEventContent>oldContent)[\"format\"] === (<RoomMessageTextEventContent>newContent)[\"format\"] &&\r\n        (<RoomMessageTextEventContent>oldContent)[\"formatted_body\"] ===\r\n            (<RoomMessageTextEventContent>newContent)[\"formatted_body\"]\r\n    ) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"names":["endEditing","roomContext","dis","dispatch","action","Action","EditEvent","event","timelineRenderingType","FocusSendMessageComposer","context","cancelPreviousPendingEdit","mxClient","editorStateTransfer","previousEdit","getEvent","replacingEvent","status","EventStatus","QUEUED","NOT_SENT","cancelPendingEvent","EMOTE_PREFIX","isMatrixEvent","e","MatrixEvent","async","createMessageContent","message","isHTML","relation","replyToEvent","editedEvent","isEditing","isEmote","startsWith","slice","length","body","richToPlain","content","document","DOMParser","parseFromString","Array","from","querySelectorAll","forEach","mention","getAttribute","replaceWith","innerText","innerHTML","href","permalinkParts","parsePermalink","isNotNull","roomIdOrAlias","convertPlainTextToBody","msgtype","MsgType","Emote","Text","isMarkdownEnabled","SettingsStore","getValue","formattedBody","plainToRich","format","formatted_body","_objectSpread","attachRelation","rel_type","event_id","getId","addReplyToMessageContent","sendMessage","_ref","params","_objectWithoutProperties","_excluded","room","roomId","posthogEvent","eventName","messageType","isReply","Boolean","inThread","THREAD_RELATION_TYPE","name","PosthogAnalytics","instance","trackEvent","cmd","args","getCommand","threadId","commandSuccessful","runSlashCommand","category","CommandCategories","messages","effects","sendAnyway","shouldSendAnyway","FocusAComposer","trim","decorateStartSendingTime","prom","doMaybeLocalRoomAction","actualRoomId","CHAT_EFFECTS","effect","containsEmoji","emojis","command","then","resp","sendRoundTripMetric","editMessage","html","getThread","replyEventId","editContent","newContent","createRedactEventDialog","mxEvent","onCloseDialog","response","getRoomId","oldContent","getContent","isContentModified","threadRootId"],"sourceRoot":""}