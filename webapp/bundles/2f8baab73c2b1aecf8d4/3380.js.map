{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/3380.js","mappings":"u8BA+BA,MACI,IAAIA,MACA,CAAC,EACD,CACI,GAAAC,GACI,MAAM,IAAIC,MACN,iGAER,KASZ,IAAIC,EAAa,KAsBVC,eAAeC,IACbF,IAAYA,EAhBrBC,iBAGI,MAAME,QAAa,iHACnB,MAAwBA,GACxBA,EAAKC,kBACT,CAUkCC,UACxBL,CACV,C,iGCzEA,IAAIG,EACG,SAASG,EAAeC,GAC3BJ,EAAOI,CACX,C,w9FAGA,IAAIC,EAAkB,EAElBC,EAA0B,KAE9B,SAASC,IAIL,OAHgC,OAA5BD,GAA2E,IAAvCA,EAAwBE,aAC5DF,EAA0B,IAAIG,WAAWT,EAAKU,OAAOC,SAElDL,CACX,CAIA,IAAIM,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIC,OAAOC,SAAS,QAAQF,YAAcA,aAE3D,SAEzC,MAAMG,EAAwD,mBAAjCJ,EAAkBK,WACzC,SAAUC,EAAKC,GACjB,OAAOP,EAAkBK,WAAWC,EAAKC,EAC7C,EACM,SAAUD,EAAKC,GACjB,MAAMC,EAAMR,EAAkBS,OAAOH,GAErC,OADAC,EAAKG,IAAIF,GACF,CACHG,KAAML,EAAIM,OACVC,QAASL,EAAII,OAErB,EAEA,SAASE,EAAkBR,EAAKS,EAAQC,GAEpC,QAAgBC,IAAZD,EAAuB,CACvB,MAAMR,EAAMR,EAAkBS,OAAOH,GAC/BY,EAAMH,EAAOP,EAAII,OAAQ,KAAO,EAGtC,OAFAjB,IAAuBwB,SAASD,EAAKA,EAAMV,EAAII,QAAQF,IAAIF,GAC3Df,EAAkBe,EAAII,OACfM,CACX,CAEA,IAAIE,EAAMd,EAAIM,OACVM,EAAMH,EAAOK,EAAK,KAAO,EAE7B,MAAMC,EAAM1B,IAEZ,IAAI2B,EAAS,EAEb,KAAOA,EAASF,EAAKE,IAAU,CAC3B,MAAMC,EAAOjB,EAAIkB,WAAWF,GAC5B,GAAIC,EAAO,IAAM,MACjBF,EAAIH,EAAMI,GAAUC,CACxB,CAEA,GAAID,IAAWF,EAAK,CACD,IAAXE,IACAhB,EAAMA,EAAImB,MAAMH,IAEpBJ,EAAMF,EAAQE,EAAKE,EAAKA,EAAME,EAAsB,EAAbhB,EAAIM,OAAY,KAAO,EAC9D,MAAML,EAAOZ,IAAuBwB,SAASD,EAAMI,EAAQJ,EAAME,GAGjEE,GAFYlB,EAAaE,EAAKC,GAEhBM,QACdK,EAAMF,EAAQE,EAAKE,EAAKE,EAAQ,KAAO,CAC3C,CAGA,OADA7B,EAAkB6B,EACXJ,CACX,CAEA,IAAIQ,EAAwB,KAE5B,SAASC,IAIL,OAH8B,OAA1BD,IAA4E,IAA1CA,EAAsB3B,OAAO6B,eAAgEX,IAA1CS,EAAsB3B,OAAO6B,UAA0BF,EAAsB3B,SAAWX,EAAKU,OAAOC,UACzL2B,EAAwB,IAAIG,SAASzC,EAAKU,OAAOC,SAE9C2B,CACX,CAEA,SAASI,EAAqBC,GAC1B,MAAMC,EAAM5C,EAAK6C,0BAEjB,OADA7C,EAAK8C,oBAAoBxB,IAAIsB,EAAKD,GAC3BC,CACX,CAEA,SAASG,EAAYC,EAAGC,GACpB,IACI,OAAOD,EAAEE,MAAMC,KAAMF,EACzB,CAAE,MAAOG,GACL,MAAMR,EAAMF,EAAqBU,GACjCpD,EAAKqD,qBAAqBT,EAC9B,CACJ,CAIA,IAAIU,EAAoB,IAFoB,oBAAhBC,aAA8B,EAAIzC,OAAOC,SAAS,QAAQwC,YAAcA,aAE3D,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAI5E,SAASC,EAAmB5B,EAAKE,GAE7B,OADAF,KAAc,EACPwB,EAAkBK,OAAOpD,IAAuBwB,SAASD,EAAKA,EAAME,GAC/E,CAEA,SAAS4B,EAAWC,GAChB,OAAOA,OACX,CATAP,EAAkBK,SAWlB,MAAMG,EAAiD,oBAAzBC,qBACxB,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBG,IAC3BlE,EAAKmE,oBAAoBxE,IAAIuE,EAAME,KAAnCpE,CAAyCkE,EAAMG,EAAGH,EAAMI,EAAC,IAG7D,SAASC,EAAeC,EAAMC,EAAML,EAAMpB,GACtC,MAAMkB,EAAQ,CAAEG,EAAGG,EAAMF,EAAGG,EAAMC,IAAK,EAAGN,QACpCO,EAAO,IAAI1B,KAIbiB,EAAMQ,MACN,MAAML,EAAIH,EAAMG,EAChBH,EAAMG,EAAI,EACV,IACI,OAAOrB,EAAEqB,EAAGH,EAAMI,KAAMrB,EAC5B,CAAE,QACsB,KAAdiB,EAAMQ,KACR1E,EAAKmE,oBAAoBxE,IAAIuE,EAAME,KAAnCpE,CAAyCqE,EAAGH,EAAMI,GAClDR,EAAcG,WAAWC,IAEzBA,EAAMG,EAAIA,CAElB,GAIJ,OAFAM,EAAKC,SAAWV,EAChBJ,EAAcE,SAASW,EAAMT,EAAOA,GAC7BS,CACX,CAEA,SAASE,EAAYL,EAAMC,EAAML,EAAMpB,GACnC,MAAMkB,EAAQ,CAAEG,EAAGG,EAAMF,EAAGG,EAAMC,IAAK,EAAGN,QACpCO,EAAO,IAAI1B,KAIbiB,EAAMQ,MACN,IACI,OAAO1B,EAAEkB,EAAMG,EAAGH,EAAMI,KAAMrB,EAClC,CAAE,QACsB,KAAdiB,EAAMQ,MACR1E,EAAKmE,oBAAoBxE,IAAIuE,EAAME,KAAnCpE,CAAyCkE,EAAMG,EAAGH,EAAMI,GACxDJ,EAAMG,EAAI,EACVP,EAAcG,WAAWC,GAEjC,GAIJ,OAFAS,EAAKC,SAAWV,EAChBJ,EAAcE,SAASW,EAAMT,EAAOA,GAC7BS,CACX,CAEA,SAASG,EAAY1E,GAEjB,MAAM2E,SAAc3E,EACpB,GAAY,UAAR2E,GAA4B,WAARA,GAA4B,MAAP3E,EACzC,MAAQ,GAAGA,IAEf,GAAY,UAAR2E,EACA,MAAO,IAAI3E,KAEf,GAAY,UAAR2E,EAAkB,CAClB,MAAMC,EAAc5E,EAAI4E,YACxB,OAAmB,MAAfA,EACO,SAEA,UAAUA,IAEzB,CACA,GAAY,YAARD,EAAoB,CACpB,MAAME,EAAO7E,EAAI6E,KACjB,MAAmB,iBAARA,GAAoBA,EAAKzD,OAAS,EAClC,YAAYyD,KAEZ,UAEf,CAEA,GAAIC,MAAMC,QAAQ/E,GAAM,CACpB,MAAMoB,EAASpB,EAAIoB,OACnB,IAAI4D,EAAQ,IACR5D,EAAS,IACT4D,GAASN,EAAY1E,EAAI,KAE7B,IAAI,IAAIiF,EAAI,EAAGA,EAAI7D,EAAQ6D,IACvBD,GAAS,KAAON,EAAY1E,EAAIiF,IAGpC,OADAD,GAAS,IACFA,CACX,CAEA,MAAME,EAAiB,sBAAsBC,KAAKC,SAASC,KAAKrF,IAChE,IAAIsF,EACJ,KAAIJ,GAAkBA,EAAe9D,OAAS,GAI1C,OAAOgE,SAASC,KAAKrF,GAEzB,GALIsF,EAAYJ,EAAe,GAKd,UAAbI,EAIA,IACI,MAAO,UAAYC,KAAKC,UAAUxF,GAAO,GAC7C,CAAE,MAAOyF,GACL,MAAO,QACX,CAGJ,OAAIzF,aAAeR,MACR,GAAGQ,EAAI6E,SAAS7E,EAAI0F,YAAY1F,EAAI2F,QAGxCL,CACX,CAEA,SAASM,EAAkB9E,EAAKS,GAC5B,MAAMG,EAAMH,EAAoB,EAAbT,EAAIM,OAAY,KAAO,EAG1C,OAFAjB,IAAuBe,IAAIJ,EAAKY,EAAM,GACtCzB,EAAkBa,EAAIM,OACfM,CACX,CAEA,SAASmE,EAAwBrD,GAC7B,MAAMsD,EAAQlG,EAAK8C,oBAAoBnD,IAAIiD,GAE3C,OADA5C,EAAKmG,0BAA0BvD,GACxBsD,CACX,CAEA,SAASE,EAAaC,EAAUC,GAC5B,KAAMD,aAAoBC,GACtB,MAAM,IAAI1G,MAAM,wBAAwB0G,EAAMrB,OAEtD,CAEA,SAASsB,EAAoBzE,EAAKE,GAE9B,OADAF,KAAc,EACPvB,IAAuBwB,SAASD,EAAM,EAAGA,EAAM,EAAIE,EAC9D,CAEA,SAASwE,EAAwBC,EAAO9E,GACpC,MAAMG,EAAMH,EAAsB,EAAf8E,EAAMjF,OAAY,KAAO,EAC5C,IAAK,IAAI6D,EAAI,EAAGA,EAAIoB,EAAMjF,OAAQ6D,IAAK,CACnC,MAAMqB,EAAMhE,EAAqB+D,EAAMpB,IACvC9C,IAAqBoE,UAAU7E,EAAM,EAAIuD,EAAGqB,GAAK,EACrD,CAEA,OADArG,EAAkBoG,EAAMjF,OACjBM,CACX,CAEA,SAAS8E,EAAyB9E,EAAKE,GACnCF,KAAc,EACd,MAAMG,EAAMM,IACNsE,EAAS,GACf,IAAK,IAAIxB,EAAIvD,EAAKuD,EAAIvD,EAAM,EAAIE,EAAKqD,GAAK,EACtCwB,EAAOC,KAAK9G,EAAK8C,oBAAoBnD,IAAIsC,EAAI8E,UAAU1B,GAAG,KAG9D,OADArF,EAAKgH,uBAAuBlF,EAAKE,GAC1B6E,CACX,CAEA,IAAII,EAA2B,KAS/B,SAASC,EAAqBpF,EAAKE,GAE/B,OADAF,KAAc,GAPmB,OAA7BmF,GAA6E,IAAxCA,EAAyBzG,aAC9DyG,EAA2B,IAAIE,YAAYnH,EAAKU,OAAOC,SAEpDsG,GAKwBlF,SAASD,EAAM,EAAGA,EAAM,EAAIE,EAC/D,CAKO,SAASoF,IACZ,MAAMC,EAAMrH,EAAKoH,cACjB,OAAOE,GAASC,OAAOF,EAC3B,CAaA,SAASG,EAAiBhD,EAAMC,EAAMgD,GAClC,MAAMJ,EAAMrH,EAAK0H,yCAAyClD,EAAMC,EAAMgD,GACtE,GAAIJ,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,GAE1C,CAEA,SAASM,EAAiBnD,EAAMC,GAC5BzE,EAAK4H,2HAA2HpD,EAAMC,EAC1I,CAEA,SAASoD,EAAiBrD,EAAMC,EAAMgD,GAClCzH,EAAK8H,0BAA0BtD,EAAMC,EAAMgD,EAC/C,CAEA,SAASM,EAAiBvD,EAAMC,EAAMgD,GAClCzH,EAAKgI,0BAA0BxD,EAAMC,EAAMgD,EAC/C,CAEA,SAASQ,EAAiBzD,EAAMC,GAC5BzE,EAAKkI,wHAAwH1D,EAAMC,EACvI,CAUO,MAAM0D,EAAsBC,OAAOC,OAAO,CAI7CC,eAAgB,EAAG,EAAK,iBAIxBC,oBAAqB,EAAG,EAAK,sBAM7BC,uBAAwB,EAAG,EAAK,yBAIhCC,oBAAqB,EAAG,EAAK,sBAI7BC,qBAAsB,EAAG,EAAK,uBAI9BC,oCAAqC,EAAG,EAAK,sCAI7CC,gBAAiB,EAAG,EAAK,oBA+ChBC,GAzCyBT,OAAOC,OAAO,CAIhDS,QAAS,EAAG,EAAK,UAIjBC,WAAY,EAAG,EAAK,aAIpBC,QAAS,EAAG,EAAK,YAUQZ,OAAOC,OAAO,CAIvCU,WAAY,EAAG,EAAK,aAIpBD,QAAS,EAAG,EAAK,UAIjBE,QAAS,EAAG,EAAK,YAOcZ,OAAOC,OAAO,CAI7CY,uBAAwB,EAAG,EAAK,yBAIhCC,gBAAiB,EAAG,EAAK,kBAOzBF,QAAS,EAAG,EAAK,aAMRG,EAAoBf,OAAOC,OAAO,CAQ3Ce,QAAS,EAAG,EAAK,UAQjBC,OAAQ,EAAG,EAAK,SAOhBC,OAAQ,EAAG,EAAK,SAMhBC,cAAe,EAAG,EAAK,kBAMdC,EAAapB,OAAOC,OAAO,CAIpCoB,SAAU,EAAG,EAAK,WAIlBC,YAAa,EAAG,EAAK,cAIrBC,QAAS,EAAG,EAAK,UAIjBC,MAAO,EAAG,EAAK,UAMNC,EAAczB,OAAOC,OAAO,CAOrCyB,MAAO,EAAG,EAAK,QAMfC,MAAO,EAAG,EAAK,QAMfC,KAAM,EAAG,EAAK,OAMdC,KAAM,EAAG,EAAK,OAMdrK,MAAO,EAAG,EAAK,UAYNsK,EAAa9B,OAAOC,OAAO,CAIpC8B,MAAO,EAAG,EAAK,QAIfC,YAAa,EAAG,EAAK,gBAMZC,EAAUjC,OAAOC,OAAO,CAOjCiC,QAAS,EAAG,EAAK,UAMjBC,QAAS,EAAG,EAAK,UAKjBC,UAAW,EAAG,EAAK,YAUnBC,aAAc,EAAG,EAAK,eAKtBC,KAAM,EAAG,EAAK,OAIdC,UAAW,EAAG,EAAK,cAyCVC,GAnCcxC,OAAOC,OAAO,CAIrCwC,WAAY,EAAG,EAAK,aAIpBC,UAAW,EAAG,EAAK,YAInBC,UAAW,EAAG,EAAK,YAInBC,SAAU,EAAG,EAAK,WAIlBC,gBAAiB,EAAG,EAAK,kBAIzBC,YAAa,EAAG,EAAK,cAIrBC,WAAY,EAAG,EAAK,eAOG/C,OAAOC,OAAO,CAIrC+C,IAAK,EAAG,EAAK,MAIbC,KAAM,EAAG,EAAK,OAIdC,KAAM,EAAG,EAAK,UAMLC,EAAkBnD,OAAOC,OAAO,CAIzCmD,0BAA2B,EAAG,EAAK,4BAInCC,cAAe,EAAG,EAAK,gBAIvBC,eAAgB,EAAG,EAAK,iBAIxBC,mBAAoB,EAAG,EAAK,qBAI5BC,YAAa,EAAG,EAAK,cAIrBC,sBAAuB,EAAG,EAAK,0BA8BtBC,GAxBiB1D,OAAOC,OAAO,CAIxC0D,QAAS,EAAG,EAAK,UAIjBC,QAAS,EAAG,EAAK,UAKjBC,mBAAoB,EAAG,EAAK,qBAK5BC,gBAAiB,EAAG,EAAK,oBAMG9D,OAAOC,OAAO,CAI1C8D,UAAW,EAAG,EAAK,YAInBC,oBAAqB,EAAG,EAAK,sBAI7BC,YAAa,EAAG,EAAK,iBAMZC,EAAqBlE,OAAOC,OAAO,CAM5CkE,MAAO,EAAG,EAAK,QAIfC,aAAc,EAAG,EAAK,eAItBC,aAAc,EAAG,EAAK,eAItBC,cAAe,EAAG,EAAK,kBAMdC,EAA2BvE,OAAOC,OAAO,CAIlDiC,QAAS,EAAG,EAAK,UAIjBsC,UAAW,EAAG,EAAK,YAInBC,MAAO,EAAG,EAAK,QAMfC,aAAc,EAAG,EAAK,eAItBpC,KAAM,EAAG,EAAK,OAIdC,UAAW,EAAG,EAAK,cAGjBoC,EAAuC,CAAC,UAAW,QAEnDC,EAAqC,CAAC,WAAY,YAAa,gBAAiB,iBAAkB,WAExC,oBAAzBjJ,sBAEjC,IAAIA,sBAAqBjC,GAAO9B,EAAKiN,sBAAsBnL,IAAQ,EAAG,KA8D5E,MAAMoL,EAAmE,oBAAzBnJ,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmN,+BAA+BrL,IAAQ,EAAG,KAI9E,MAAMsL,EAET,aAAO7F,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOD,EAAoBE,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChBoL,EAAgClJ,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBL,EAAgCjJ,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmN,+BAA+BrL,EAAK,EAC7C,CAKA,sBAAO4L,GACH,MAAMrG,EAAMrH,EAAK2N,sCACjB,OAAOP,EAAoB7F,OAAOF,EACtC,CAMA,iBAAOuG,CAAWC,GACd,MAAMC,EAAOpM,EAAkBmM,EAAK7N,EAAK+N,kBAAmB/N,EAAKgO,oBAC3DC,EAAO5N,EACPgH,EAAMrH,EAAKkO,+BAA+BJ,EAAMG,GACtD,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAO+F,EAAoB7F,OAAOF,EAAI,GAC1C,CAKA,QAAA8G,GAEI,OADYnO,EAAKoO,6BAA6BjL,KAAKoK,UAEvD,CAKA,qBAAIc,GACA,MAAMhH,EAAMrH,EAAKsO,sCAAsCnL,KAAKoK,WAC5D,OAAOgB,GAAkBhH,OAAOF,EACpC,CASA,SAAAmH,CAAUC,EAAeC,EAAKC,GAC1B,IAAIC,EACAC,EACJ,IACI,MAAMf,EAAOpM,EAAkB+M,EAAezO,EAAK+N,kBAAmB/N,EAAKgO,oBACrEC,EAAO5N,EACPyO,EAAOpN,EAAkBgN,EAAK1O,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACP2O,EAAOtN,EAAkBiN,EAAY3O,EAAK+N,kBAAmB/N,EAAKgO,oBAClEiB,EAAO5O,EACPgH,EAAMrH,EAAKkP,8BAA8B/L,KAAKoK,UAAWO,EAAMG,EAAMa,EAAMC,EAAMC,EAAMC,GAC7F,IAAIE,EAAO9H,EAAI,GACX+H,EAAO/H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA8H,EAAO,EAAGC,EAAO,EACXnJ,EAAwBoB,EAAI,IAItC,OAFAuH,EAAcO,EACdN,EAAcO,EACP1L,EAAmByL,EAAMC,EACpC,CAAE,QACEpP,EAAKqP,gBAAgBT,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMS,EAA0D,oBAAzBvL,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKuP,sBAAsBzN,IAAQ,EAAG,KAIrE,MAAM0N,EAET,aAAOjI,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOmC,EAAWlC,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChBwN,EAAuBtL,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+B,EAAuBrL,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKuP,sBAAsBzN,EAAK,EACpC,CAKA,iBAAI2N,GACA,MAAMpI,EAAMrH,EAAK0P,mCAAmCvM,KAAKoK,WACzD,OAAe,IAARlG,OAAYxF,EAAYuL,EAAoB7F,OAAOF,EAC9D,CAKA,iBAAIoI,CAAcjL,GACd,IAAIsJ,EAAO,EACNlK,EAAWY,KACZ4B,EAAa5B,EAAM4I,GACnBU,EAAOtJ,EAAKgJ,sBAEhBxN,EAAK2P,mCAAmCxM,KAAKoK,UAAWO,EAC5D,CAKA,iBAAI8B,GACA,MAAMvI,EAAMrH,EAAK6P,mCAAmC1M,KAAKoK,WACzD,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,iBAAIF,CAAcpL,GACd,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAK+P,mCAAmC5M,KAAKoK,UAAWO,EAAMG,EAClE,CAOA,uBAAI+B,GAEA,OADYhQ,EAAKiQ,+BAA+B9M,KAAKoK,UAEzD,EAGJ,MAAM2C,GAAmE,oBAAzBnM,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmQ,+BAA+BrO,IAAQ,EAAG,KAI9E,MAAMsO,GAET,aAAO7I,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+C,GAAoB9C,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChBoO,GAAgClM,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2C,GAAgCjM,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmQ,+BAA+BrO,EAAK,EAC7C,CAKA,OAAI+L,GACA,IAAIwC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKuQ,kCAAkCpN,KAAKoK,WAGxD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,OAAIzC,CAAIrJ,GACJ,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,CAKA,kBAAIwC,GACA,IAAIJ,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK0Q,6CAA6CvN,KAAKoK,WAGnE,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,kBAAIG,CAAejM,GACf,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAK2Q,6CAA6CxN,KAAKoK,UAAWO,EAAMG,EAC5E,EAGJ,MAAM2C,GAAiE,oBAAzB7M,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK6Q,6BAA6B/O,IAAQ,EAAG,KAM5E,MAAMgP,GAET,kBAAAtD,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBqD,GAA8B3M,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK6Q,6BAA6B/O,EAAK,EAC3C,CAKA,UAAIiP,GACA,MAAM1J,EAAMrH,EAAKgR,mCAAmC7N,KAAKoK,WACzD,OAAe,IAARlG,OAAYxF,EAAYoP,GAAO1J,OAAOF,EACjD,CAKA,UAAI0J,CAAOvM,GACP,IAAIsJ,EAAO,EACNlK,EAAWY,KACZ4B,EAAa5B,EAAMyM,IACnBnD,EAAOtJ,EAAKgJ,sBAEhBxN,EAAKkR,mCAAmC/N,KAAKoK,UAAWO,EAC5D,CAKA,YAAIqD,GACA,MAAM9J,EAAMrH,EAAKoR,qCAAqCjO,KAAKoK,WAC3D,OAAe,IAARlG,OAAYxF,EAAYwP,GAAS9J,OAAOF,EACnD,CAKA,YAAI8J,CAAS3M,GACT,IAAIsJ,EAAO,EACNlK,EAAWY,KACZ4B,EAAa5B,EAAM6M,IACnBvD,EAAOtJ,EAAKgJ,sBAEhBxN,EAAKsR,qCAAqCnO,KAAKoK,UAAWO,EAC9D,CAMA,kBAAIyD,GACA,IAAIlB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKwR,2CAA2CrO,KAAKoK,WAGjE,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,kBAAIiB,CAAe/M,GACf,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,CAKA,iBAAI2B,GACA,MAAMvI,EAAMrH,EAAKyR,0CAA0CtO,KAAKoK,WAChE,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,iBAAIF,CAAcpL,GACd,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAK0R,0CAA0CvO,KAAKoK,UAAWO,EAAMG,EACzE,CAKA,qBAAI0D,GACA,MAAMtK,EAAMrH,EAAK4R,8CAA8CzO,KAAKoK,WACpE,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,qBAAI6B,CAAkBnN,GAClB,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAK6R,8CAA8C1O,KAAKoK,UAAWO,EAAMG,EAC7E,CAKA,gCAAI6D,GACA,MAAMzK,EAAMrH,EAAK+R,yDAAyD5O,KAAKoK,WAC/E,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,gCAAIgC,CAA6BtN,GAC7B,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAKgS,yDAAyD7O,KAAKoK,UAAWO,EAAMG,EACxF,CAKA,qCAAIgE,GACA,MAAM5K,EAAMrH,EAAKkS,8DAA8D/O,KAAKoK,WACpF,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,qCAAImC,CAAkCzN,GAClC,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAKmS,8DAA8DhP,KAAKoK,UAAWO,EAAMG,EAC7F,CAKA,qCAAImE,GACA,MAAM/K,EAAMrH,EAAKqS,8DAA8DlP,KAAKoK,WACpF,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,qCAAIsC,CAAkC5N,GAClC,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAKsS,8DAA8DnP,KAAKoK,UAAWO,EAAMG,EAC7F,CAIA,WAAAsE,GACI,MAAMlL,EAAMrH,EAAKwS,wBAGjB,OAFArP,KAAKoK,UAAYlG,IAAQ,EACzBuJ,GAA8B5M,SAASb,KAAMA,KAAKoK,UAAWpK,MACtDA,IACX,EAGJ,MAAMsP,GAA0D,oBAAzB1O,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK0S,sBAAsB5Q,IAAQ,EAAG,KAKrE,MAAM6Q,GAET,aAAOpL,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOsF,GAAWrF,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChB2Q,GAAuBzO,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBkF,GAAuBxO,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK0S,sBAAsB5Q,EAAK,EACpC,CAKA,MAAA8Q,GAEI,OADY5S,EAAK6S,kBAAkB1P,KAAKoK,UAE5C,CAMA,UAAAuF,GACI,IAAIzC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK+S,sBAAsB5P,KAAKoK,WAG5C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,aAAA0C,GAEI,OAAe,IADHhT,EAAKiT,yBAAyB9P,KAAKoK,UAEnD,EAGJ,MAAM2F,GAAyD,oBAAzBnP,qBAChC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmT,qBAAqBrR,IAAQ,EAAG,KAiBpE,MAAMsR,GAET,aAAO7L,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+F,GAAU9F,WAGpC,OAFA3K,EAAI4K,UAAYzL,EAChBoR,GAAsBlP,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC5CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2F,GAAsBjP,WAAWd,MAC1BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmT,qBAAqBrR,EAAK,EACnC,CAQA,QAAAuR,GACI,MAAMhM,EAAMrH,EAAKsT,mBAAmBnQ,KAAKoK,WACzC,IAAIuC,EAAKvJ,EAAoBc,EAAI,GAAIA,EAAI,IAAIhF,QAE7C,OADArC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,GAClCyI,CACX,CAQA,QAAAyD,GAEI,OADYvT,EAAKwT,mBAAmBrQ,KAAKoK,UAE7C,EAGJ,MAAMkG,GAA+D,oBAAzB1P,qBACtC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK0T,2BAA2B5R,IAAQ,EAAG,KAK1E,MAAM6R,GAET,aAAOpM,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOsG,GAAgBrG,WAG1C,OAFA3K,EAAI4K,UAAYzL,EAChB2R,GAA4BzP,SAASrB,EAAKA,EAAI4K,UAAW5K,GAClDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBkG,GAA4BxP,WAAWd,MAChCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK0T,2BAA2B5R,EAAK,EACzC,CAMA,EAAA8R,CAAGC,GACCzN,EAAayN,EAAOF,IAEpB,OAAe,IADH3T,EAAK8T,mBAAmB3Q,KAAKoK,UAAWsG,EAAMtG,UAE9D,CAUA,0BAAOwG,CAAoBC,EAA4BC,GACnD,MAAM5M,EAAMrH,EAAKkU,oCAAoCF,EAA4BC,GACjF,OAAON,GAAgBpM,OAAOF,EAClC,CAKA,iBAAO8M,GACH,MAAM9M,EAAMrH,EAAKoU,6BACjB,OAAOT,GAAgBpM,OAAOF,EAClC,CAeA,mCAAOgN,GACH,MAAMhN,EAAMrH,EAAKsU,+CACjB,OAAOX,GAAgBpM,OAAOF,EAClC,CAOA,4BAAOkN,GACH,MAAMlN,EAAMrH,EAAKwU,wCACjB,OAAOb,GAAgBpM,OAAOF,EAClC,CAWA,yBAAOoN,GACH,MAAMpN,EAAMrH,EAAK0U,qCACjB,OAAOf,GAAgBpM,OAAOF,EAClC,EAGJ,MAAMsN,GAA6E,oBAAzB5Q,qBACpD,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK4U,yCAAyC9S,IAAQ,EAAG,KAKxF,MAAM+S,GAET,aAAOtN,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOwH,GAA8BvH,WAGxD,OAFA3K,EAAI4K,UAAYzL,EAChB6S,GAA0C3Q,SAASrB,EAAKA,EAAI4K,UAAW5K,GAChEA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBoH,GAA0C1Q,WAAWd,MAC9CrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK4U,yCAAyC9S,EAAK,EACvD,CAWA,qBAAIgT,GAEA,OADY9U,EAAK+U,0DAA0D5R,KAAKoK,UAEpF,CAOA,4BAAIyH,GACA,MAAM3N,EAAMrH,EAAKiV,iEAAiE9R,KAAKoK,WACvF,OAAO2H,GAAyB3N,OAAOF,EAC3C,CAQA,2BAAI8N,GACA,MAAM9N,EAAMrH,EAAKoV,gEAAgEjS,KAAKoK,WACtF,OAAO8H,GAAuB9N,OAAOF,EACzC,EAGJ,MAAMiO,GAAqE,oBAAzBvR,qBAC5C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKuV,iCAAiCzT,IAAQ,EAAG,KAKhF,MAAM0T,GAET,aAAOjO,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOmI,GAAsBlI,WAGhD,OAFA3K,EAAI4K,UAAYzL,EAChBwT,GAAkCtR,SAASrB,EAAKA,EAAI4K,UAAW5K,GACxDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+H,GAAkCrR,WAAWd,MACtCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKuV,iCAAiCzT,EAAK,EAC/C,CAKA,aAAI2T,GACA,MAAMpO,EAAMrH,EAAK0V,gCAAgCvS,KAAKoK,WACtD,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,oBAAI6F,GACA,MAAMtO,EAAMrH,EAAK4V,uCAAuCzS,KAAKoK,WAC7D,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,kBAAI+F,GACA,MAAMxO,EAAMrH,EAAK8V,qCAAqC3S,KAAKoK,WAC3D,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,EAGJ,MAAMiG,GAAkE,oBAAzBhS,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKgW,8BAA8BlU,IAAQ,EAAG,KAK7E,MAAMmU,GAET,aAAO1O,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO4I,GAAmB3I,WAG7C,OAFA3K,EAAI4K,UAAYzL,EAChBiU,GAA+B/R,SAASrB,EAAKA,EAAI4K,UAAW5K,GACrDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBwI,GAA+B9R,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKgW,8BAA8BlU,EAAK,EAC5C,CAKA,aAAIoU,GAEA,OAAe,IADHlW,EAAKmW,6BAA6BhT,KAAKoK,UAEvD,CAMA,kBAAI6I,GAEA,OAAe,IADHpW,EAAKqW,kCAAkClT,KAAKoK,UAE5D,CAMA,kBAAI+I,GAEA,OAAe,IADHtW,EAAKuW,kCAAkCpT,KAAKoK,UAE5D,EAGJ,MAAMiJ,GAAmE,oBAAzBzS,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKyW,+BAA+B3U,IAAQ,EAAG,KAI9E,MAAM4U,GAET,aAAOnP,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqJ,GAAoBpJ,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChB0U,GAAgCxS,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBiJ,GAAgCvS,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKyW,+BAA+B3U,EAAK,EAC7C,CAKA,WAAAyQ,CAAY1E,GACR,MAAMC,EAAOpM,EAAkBmM,EAAK7N,EAAK+N,kBAAmB/N,EAAKgO,oBAC3DC,EAAO5N,EACPgH,EAAMrH,EAAK2W,wBAAwB7I,EAAMG,GAC/C,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5BmP,GAAgCxS,SAASb,KAAMA,KAAKoK,UAAWpK,MACxDA,IACX,CAKA,UAAI3B,GAEA,OADYxB,EAAK4W,2BAA2BzT,KAAKoK,aAClC,CACnB,CAMA,QAAAY,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK6W,6BAA6B1T,KAAKoK,WAGnD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMwG,GAAkE,oBAAzB/S,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+W,8BAA8BjV,IAAQ,EAAG,KAI7E,MAAMkV,GAET,aAAOzP,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2J,GAAmB1J,WAG7C,OAFA3K,EAAI4K,UAAYzL,EAChBgV,GAA+B9S,SAASrB,EAAKA,EAAI4K,UAAW5K,GACrDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBuJ,GAA+B7S,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+W,8BAA8BjV,EAAK,EAC5C,CAKA,SAAImV,GAEA,OADYjX,EAAKkX,mCAAmC/T,KAAKoK,UAE7D,CAMA,UAAI4J,GACA,MAAM9P,EAAMrH,EAAKoX,0BAA0BjU,KAAKoK,WAChD,OAAe,IAARlG,OAAYxF,EAAYoP,GAAO1J,OAAOF,EACjD,CAOA,gBAAIgQ,GACA,MAAMhQ,EAAMrH,EAAKsX,gCAAgCnU,KAAKoK,WACtD,OAAe,IAARlG,OAAYxF,EAAYwP,GAAS9J,OAAOF,EACnD,CAMA,uBAAIkQ,GAEA,OADYvX,EAAKwX,uCAAuCrU,KAAKoK,UAEjE,CAMA,2BAAIkK,GAEA,OADYzX,EAAK0X,2CAA2CvU,KAAKoK,UAErE,CAYA,gCAAIoK,GAEA,OADY3X,EAAK4X,gDAAgDzU,KAAKoK,UAE1E,CASA,WAAAsK,CAAYC,GACR,MAAMzQ,EAAMrH,EAAK+X,+BAA+B5U,KAAKoK,UAAWuK,GAChE,OAAe,IAARzQ,OAAYxF,EAAYmW,GAAYzQ,OAAOF,EACtD,EAGJ,MAAM4Q,GAAkE,oBAAzBlU,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKkY,8BAA8BpW,IAAQ,EAAG,KAI7E,MAAMqW,GAET,kBAAA3K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB0K,GAA+BhU,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKkY,8BAA8BpW,EAAK,EAC5C,CAKA,mCAAIsW,GAEA,OADYpY,EAAKqY,6DAA6DlV,KAAKoK,UAEvF,CAKA,mCAAI6K,CAAgC5T,GAChCxE,EAAKsY,6DAA6DnV,KAAKoK,UAAW/I,EACtF,CAKA,WAAA+N,CAAY6F,GACR,MAAM/Q,EAAMrH,EAAKuY,uBAAuBH,GAGxC,OAFAjV,KAAKoK,UAAYlG,IAAQ,EACzB4Q,GAA+BjU,SAASb,KAAMA,KAAKoK,UAAWpK,MACvDA,IACX,EAGJ,MAAMqV,GAAgE,oBAAzBzU,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKyY,4BAA4B3W,IAAQ,EAAG,KAI3E,MAAM4W,GAET,aAAOnR,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqL,GAAiBpL,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChB0W,GAA6BxU,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBiL,GAA6BvU,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKyY,4BAA4B3W,EAAK,EAC1C,CAOA,aAAA6W,CAAcC,EAA6BC,GACvCzS,EAAayS,EAAuBC,IAEpC,OADY9Y,EAAK+Y,+BAA+B5V,KAAKoK,UAAWqL,EAA6BC,EAAsBtL,UAEvH,EAGJ,MAAMyL,GAAmE,oBAAzBjV,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKiZ,+BAA+BnX,IAAQ,EAAG,KAI9E,MAAMgX,GAET,aAAOvR,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOyL,GAAoBxL,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChBkX,GAAgChV,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjByL,GAAgC/U,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKiZ,+BAA+BnX,EAAK,EAC7C,CAKA,sBAAO4L,GACH,MAAMrG,EAAMrH,EAAKkZ,sCACjB,GAAI7R,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOyR,GAAoBvR,OAAOF,EAAI,GAC1C,CAMA,yBAAO8R,CAAmB1S,GACtB,MAAMY,EAAMrH,EAAKoZ,uCAAuC3S,GACxD,GAAIY,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOyR,GAAoBvR,OAAOF,EAAI,GAC1C,CAKA,QAAA8G,GAEI,OADYnO,EAAKqZ,6BAA6BlW,KAAKoK,UAEvD,EAGJ,MAAM+L,GAAiE,oBAAzBvV,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKuZ,6BAA6BzX,IAAQ,EAAG,KAI5E,MAAM0X,GAET,aAAOjS,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOmM,GAAkBlM,WAG5C,OAFA3K,EAAI4K,UAAYzL,EAChBwX,GAA8BtV,SAASrB,EAAKA,EAAI4K,UAAW5K,GACpDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+L,GAA8BrV,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKuZ,6BAA6BzX,EAAK,EAC3C,CAMA,MAAAuL,GAEI,OADYrN,EAAKyZ,yBAAyBtW,KAAKoK,UAEnD,CAQA,SAAAmM,CAAUb,EAAuBc,EAAWC,GACxCxT,EAAayS,EAAuBC,IACpC1S,EAAauT,EAAWtI,IACxB,MAAMvD,EAAOpM,EAAkBkY,EAAa5Z,EAAK+N,kBAAmB/N,EAAKgO,oBACnEC,EAAO5N,EAEb,OADYL,EAAK6Z,4BAA4B1W,KAAKoK,UAAWsL,EAAsBtL,UAAWoM,EAAUpM,UAAWO,EAAMG,EAE7H,CAQA,sBAAA6L,GAEI,OADY9Z,EAAK+Z,yCAAyC5W,KAAKoK,UAEnE,CAMA,uBAAAyM,CAAwBnB,GACpBzS,EAAayS,EAAuBC,IAEpC,OADY9Y,EAAKia,0CAA0C9W,KAAKoK,UAAWsL,EAAsBtL,UAErG,CAKA,yBAAA2M,GAEI,OADYla,EAAKma,4CAA4ChX,KAAKoK,UAEtE,EAGJ,MAAM6M,GAAsD,oBAAzBrW,qBAC7B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKqa,kBAAkBvY,IAAQ,EAAG,KAIjE,MAAMwY,GAET,aAAO/S,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOiN,GAAOhN,WAGjC,OAFA3K,EAAI4K,UAAYzL,EAChBsY,GAAmBpW,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzCA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB6M,GAAmBnW,WAAWd,MACvBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKqa,kBAAkBvY,EAAK,EAChC,CAQA,mBAAAyY,CAAoBC,GAChB,IAAI1M,EAAOlK,EAAW4W,GAAW,EAAIhU,EAAwBgU,EAASxa,EAAK+N,mBACvEE,EAAO5N,EACX,MAAMgH,EAAMrH,EAAKya,2BAA2BtX,KAAKoK,UAAWO,EAAMG,GAClE,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAuBA,oBAAAqT,CAAqBC,EAAYC,GAC7B,MAAM9M,EAAOpM,EAAkBiZ,EAAY3a,EAAK+N,kBAAmB/N,EAAKgO,oBAClEC,EAAO5N,EAEb,OADYL,EAAK6a,4BAA4B1X,KAAKoK,UAAWO,EAAMG,EAAM2M,EAE7E,CASA,UAAAE,GAEI,OAAe,IADH9a,EAAK+a,kBAAkB5X,KAAKoK,UAE5C,CAKA,qBAAAyN,GAEI,OAAe,IADHhb,EAAKib,6BAA6B9X,KAAKoK,UAEvD,CAKA,oBAAA2N,GAEI,OAAe,IADHlb,EAAKmb,4BAA4BhY,KAAKoK,UAEtD,CAYA,aAAA6N,CAAcC,GAEV,OADYrb,EAAKsb,qBAAqBnY,KAAKoK,UAAW8N,EAE1D,CAKA,UAAItK,GACA,MAAM1J,EAAMrH,EAAKub,cAAcpY,KAAKoK,WACpC,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,YAAI8J,GACA,MAAM9J,EAAMrH,EAAKwb,gBAAgBrY,KAAKoK,WACtC,OAAO8D,GAAS9J,OAAOF,EAC3B,CAKA,eAAIoU,GACA,MAAMpU,EAAMrH,EAAK0b,mBAAmBvY,KAAKoK,WACzC,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAMA,MAAA6L,CAAOC,GACH,MAAMvU,EAAMrH,EAAK6b,cAAc1Y,KAAKoK,UAAWqO,GAC/C,GAAIvU,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAkB,IAAXA,EAAI,QAAWxF,EAAYia,GAAUvU,OAAOF,EAAI,GAC3D,CAKA,iBAAI0U,GACA,MAAM1U,EAAMrH,EAAKgc,qBAAqB7Y,KAAKoK,WAC3C,OAAe,IAARlG,OAAYxF,EAAY6U,GAAoBnP,OAAOF,EAC9D,CAKA,cAAI4U,GACA,MAAM5U,EAAMrH,EAAKkc,kBAAkB/Y,KAAKoK,WACxC,OAAe,IAARlG,OAAYxF,EAAYsa,GAAiB5U,OAAOF,EAC3D,CAKA,QAAI+U,GAEA,OADYpc,EAAKqc,YAAYlZ,KAAKoK,UAEtC,CAOA,cAAI+O,GAEA,OADYtc,EAAKuc,kBAAkBpZ,KAAKoK,UAE5C,CAKA,cAAIiP,GACA,MAAMnV,EAAMrH,EAAKyc,kBAAkBtZ,KAAKoK,WACxC,OAAOmP,GAAWnV,OAAOF,EAC7B,CAKA,mBAAIsV,GAEA,OADY3c,EAAK4c,uBAAuBzZ,KAAKoK,UAEjD,CAKA,gBAAAsP,GAEI,OAAe,IADH7c,EAAK8c,wBAAwB3Z,KAAKoK,UAElD,CAOA,aAAAwP,GAEI,OAAe,IADH/c,EAAKgd,qBAAqB7Z,KAAKoK,UAE/C,CAKA,SAAA0P,GAEI,OAAe,IADHjd,EAAKkd,iBAAiB/Z,KAAKoK,UAE3C,CAMA,aAAA4P,GACI,MAAM9V,EAAMrH,EAAKod,qBAAqBja,KAAKoK,WAC3C,OAAO8P,OAAOC,QAAQ,GAAIjW,EAC9B,CAQA,MAAAkW,GAEI,OADYvd,EAAKwd,cAAcra,KAAKoK,UAExC,CAKA,gBAAIkQ,GAEA,OAAe,IADHzd,EAAK0d,oBAAoBva,KAAKoK,UAE9C,EAGJ,MAAMoQ,GAAwD,oBAAzB5Z,qBAC/B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK4d,oBAAoB9b,IAAQ,EAAG,KAOnE,MAAMuP,GAET,aAAO9J,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOgE,GAAS/D,WAGnC,OAFA3K,EAAI4K,UAAYzL,EAChB6b,GAAqB3Z,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC3CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBoQ,GAAqB1Z,WAAWd,MACzBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK4d,oBAAoB9b,EAAK,EAClC,CAKA,WAAAyQ,CAAYsL,GACR,MAAM/P,EAAOpM,EAAkBmc,EAAI7d,EAAK+N,kBAAmB/N,EAAKgO,oBAC1DC,EAAO5N,EACPgH,EAAMrH,EAAK8d,aAAahQ,EAAMG,GAGpC,OAFA9K,KAAKoK,UAAYlG,IAAQ,EACzBsW,GAAqB3Z,SAASb,KAAMA,KAAKoK,UAAWpK,MAC7CA,IACX,CAKA,QAAAqC,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK+d,kBAAkB5a,KAAKoK,WAGxC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM0N,GAAyD,oBAAzBja,qBAChC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKie,qBAAqBnc,IAAQ,EAAG,KAQpE,MAAMga,GAET,aAAOvU,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOyO,GAAUxO,WAGpC,OAFA3K,EAAI4K,UAAYzL,EAChBkc,GAAsBha,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC5CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjByQ,GAAsB/Z,WAAWd,MAC1BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKie,qBAAqBnc,EAAK,EACnC,CAKA,QAAImD,GAEA,OADYjF,EAAKke,eAAe/a,KAAKoK,UAEzC,CAKA,cAAI4Q,GACA,MAAM9W,EAAMrH,EAAKoe,qBAAqBjb,KAAKoK,WAC3C,OAAe,IAARlG,OAAYxF,EAAY6U,GAAoBnP,OAAOF,EAC9D,CAKA,WAAIgX,GACA,MAAMhX,EAAMrH,EAAKse,kBAAkBnb,KAAKoK,WACxC,OAAe,IAARlG,OAAYxF,EAAYsa,GAAiB5U,OAAOF,EAC3D,CAKA,WAAIkX,GACA,MAAMlX,EAAMrH,EAAKwe,kBAAkBrb,KAAKoK,WACxC,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,QAAA3B,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKye,mBAAmBtb,KAAKoK,WAGzC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMoO,GAAkE,oBAAzB3a,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK2e,8BAA8B7c,IAAQ,EAAG,KAI7E,MAAM8c,GAET,aAAOrX,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOuR,GAAmBtR,WAG7C,OAFA3K,EAAI4K,UAAYzL,EAChB4c,GAA+B1a,SAASrB,EAAKA,EAAI4K,UAAW5K,GACrDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBmR,GAA+Bza,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK2e,8BAA8B7c,EAAK,EAC5C,CAOA,QAAImD,GAEA,OADYjF,EAAK6e,wBAAwB1b,KAAKoK,UAElD,CAKA,QAAA/H,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK8e,4BAA4B3b,KAAKoK,WAGlD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMyO,GAA2D,oBAAzBhb,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKgf,uBAAuBld,IAAQ,EAAG,KAMtE,MAAMmd,GAET,aAAO1X,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO4R,GAAY3R,WAGtC,OAFA3K,EAAI4K,UAAYzL,EAChBid,GAAwB/a,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC9CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBwR,GAAwB9a,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKgf,uBAAuBld,EAAK,EACrC,CAKA,WAAAyQ,CAAYsL,GACR,MAAM/P,EAAOpM,EAAkBmc,EAAI7d,EAAK+N,kBAAmB/N,EAAKgO,oBAC1DC,EAAO5N,EACPgH,EAAMrH,EAAKkf,gBAAgBpR,EAAMG,GACvC,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5B0X,GAAwB/a,SAASb,KAAMA,KAAKoK,UAAWpK,MAChDA,IACX,CAKA,aAAIyY,GACA,MAAMvU,EAAMrH,EAAKmf,sBAAsBhc,KAAKoK,WAC5C,OAAOqR,GAAmBrX,OAAOF,EACrC,CAKA,YAAI8J,GACA,MAAM9J,EAAMrH,EAAKof,qBAAqBjc,KAAKoK,WAC3C,OAAO8D,GAAS9J,OAAOF,EAC3B,CAKA,QAAA7B,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKqf,qBAAqBlc,KAAKoK,WAG3C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMgP,GAA2D,oBAAzBvb,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKuf,uBAAuBzd,IAAQ,EAAG,KAItE,MAAM0d,GAET,kBAAAhS,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+R,GAAwBrb,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKuf,uBAAuBzd,EAAK,EACrC,CAWA,WAAAyQ,CAAYkN,EAASC,GACjB,IAAI5R,EAAOlK,EAAW6b,GAAW,EAAIjZ,EAAwBiZ,EAASzf,EAAK+N,mBACvEE,EAAO5N,EACPyO,EAAOlL,EAAW8b,GAAQ,EAAIlZ,EAAwBkZ,EAAM1f,EAAK+N,mBACjEgB,EAAO1O,EACX,MAAMgH,EAAMrH,EAAK2f,gBAAgB7R,EAAMG,EAAMa,EAAMC,GACnD,GAAI1H,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5BiY,GAAwBtb,SAASb,KAAMA,KAAKoK,UAAWpK,MAChDA,IACX,CAKA,OAAAyc,GAEI,OAAe,IADH5f,EAAK6f,oBAAoB1c,KAAKoK,UAE9C,CAOA,WAAIkS,GACA,MAAMpY,EAAMrH,EAAK8f,oBAAoB3c,KAAKoK,WAC1C,IAAIuC,EAAKlJ,EAAyBS,EAAI,GAAIA,EAAI,IAAIhF,QAElD,OADArC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,GAClCyI,CACX,CAMA,QAAI4P,GACA,MAAMrY,EAAMrH,EAAK+f,iBAAiB5c,KAAKoK,WACvC,IAAIuC,EAAKlJ,EAAyBS,EAAI,GAAIA,EAAI,IAAIhF,QAElD,OADArC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,GAClCyI,CACX,EAGJ,MAAMkQ,GAAqD,oBAAzBjc,qBAC5B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKigB,iBAAiBne,IAAQ,EAAG,KAIhE,MAAMoe,GAET,kBAAA1S,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjByS,GAAkB/b,WAAWd,MACtBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKigB,iBAAiBne,EAAK,EAC/B,CAQA,WAAAyQ,GACI,MAAMlL,EAAMrH,EAAKmgB,YAGjB,OAFAhd,KAAKoK,UAAYlG,IAAQ,EACzB2Y,GAAkBhc,SAASb,KAAMA,KAAKoK,UAAWpK,MAC1CA,IACX,CAQA,UAAAid,GACI,MAAM/Y,EAAMrH,EAAKqgB,iBAAiBld,KAAKoK,WACvC,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAOA,yBAAAiZ,CAA0BC,GACtB,MAAMzS,EAAOpM,EAAkB6e,EAAiBvgB,EAAK+N,kBAAmB/N,EAAKgO,oBACvEC,EAAO5N,EACPgH,EAAMrH,EAAKwgB,gCAAgCrd,KAAKoK,UAAWO,EAAMG,GACvE,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOoZ,GAAsBlZ,OAAOF,EAAI,GAC5C,CAYA,0BAAAqZ,CAA2BN,EAAYG,GACnCna,EAAaga,EAAY1J,IACzB,MAAM5I,EAAOpM,EAAkB6e,EAAiBvgB,EAAK+N,kBAAmB/N,EAAKgO,oBACvEC,EAAO5N,EACPgH,EAAMrH,EAAK2gB,iCAAiCxd,KAAKoK,UAAW6S,EAAW7S,UAAWO,EAAMG,GAC9F,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOuZ,GAAuBrZ,OAAOF,EAAI,GAC7C,EAGJ,MAAMwZ,GAAgE,oBAAzB9c,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK8gB,4BAA4Bhf,IAAQ,EAAG,KAI3E,MAAMqa,GAET,aAAO5U,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO8O,GAAiB7O,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChB+e,GAA6B7c,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBsT,GAA6B5c,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK8gB,4BAA4Bhf,EAAK,EAC1C,CAKA,UAAIN,GAEA,OADYxB,EAAK+gB,wBAAwB5d,KAAKoK,aAC/B,CACnB,CAMA,QAAAY,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKghB,0BAA0B7d,KAAKoK,WAGhD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM2Q,GAAgE,oBAAzBld,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKkhB,4BAA4Bpf,IAAQ,EAAG,KAK3E,MAAMqf,GAET,aAAO5Z,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO8T,GAAiB7T,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChBmf,GAA6Bjd,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB0T,GAA6Bhd,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKkhB,4BAA4Bpf,EAAK,EAC1C,CAMA,WAAAyQ,CAAY6O,GACR,MAAMtT,EAAOpM,EAAkB0f,EAAWphB,EAAK+N,kBAAmB/N,EAAKgO,oBACjEC,EAAO5N,EACPgH,EAAMrH,EAAKqhB,qBAAqBvT,EAAMG,GAC5C,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5B4Z,GAA6Bjd,SAASb,KAAMA,KAAKoK,UAAWpK,MACrDA,IACX,CAMA,QAAAgL,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKshB,0BAA0Bne,KAAKoK,WAGhD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMiR,GAAqD,oBAAzBxd,qBAC5B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKwhB,iBAAiB1f,IAAQ,EAAG,KAUhE,MAAM2f,GAET,aAAOla,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOoU,GAAMnU,WAGhC,OAFA3K,EAAI4K,UAAYzL,EAChByf,GAAkBvd,SAASrB,EAAKA,EAAI4K,UAAW5K,GACxCA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBgU,GAAkBtd,WAAWd,MACtBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKwhB,iBAAiB1f,EAAK,EAC/B,CAMA,UAAI4f,GAEA,OADY1hB,EAAK2hB,aAAaxe,KAAKoK,UAEvC,CAKA,eAAIvI,GAEA,OADYhF,EAAK4hB,kBAAkBze,KAAKoK,UAE5C,EAGqE,oBAAzBxJ,sBAE1C,IAAIA,sBAAqBjC,GAAO9B,EAAK6hB,+BAA+B/f,IAAQ,EAAG,KA+FrF,MAAMggB,GAA8D,oBAAzB/d,qBACrC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+hB,0BAA0BjgB,IAAQ,EAAG,KAIzE,MAAMkgB,GAET,aAAOza,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2U,GAAe1U,WAGzC,OAFA3K,EAAI4K,UAAYzL,EAChBggB,GAA2B9d,SAASrB,EAAKA,EAAI4K,UAAW5K,GACjDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBuU,GAA2B7d,WAAWd,MAC/BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+hB,0BAA0BjgB,EAAK,EACxC,CAMA,UAAIqV,GACA,MAAM9P,EAAMrH,EAAKiiB,sBAAsB9e,KAAKoK,WAC5C,OAAO0D,GAAO1J,OAAOF,EACzB,CAOA,gBAAIgQ,GACA,MAAMhQ,EAAMrH,EAAKkiB,4BAA4B/e,KAAKoK,WAClD,OAAe,IAARlG,OAAYxF,EAAYwP,GAAS9J,OAAOF,EACnD,CAMA,uBAAIkQ,GAEA,OADYvX,EAAKmiB,mCAAmChf,KAAKoK,UAE7D,CAMA,2BAAIkK,GAEA,OADYzX,EAAKoiB,uCAAuCjf,KAAKoK,UAEjE,CAgBA,WAAAsK,CAAYC,GACR,MAAMzQ,EAAMrH,EAAKqiB,2BAA2Blf,KAAKoK,UAAWuK,GAC5D,OAAOE,GAAYzQ,OAAOF,EAC9B,EAGJ,MAAMib,GAAkE,oBAAzBve,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKuiB,8BAA8BzgB,IAAQ,EAAG,KAO7E,MAAM0gB,GAET,kBAAAhV,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+U,GAA+Bre,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKuiB,8BAA8BzgB,EAAK,EAC5C,CAKA,aAAI8Z,GAEA,OADY5b,EAAKyiB,uCAAuCtf,KAAKoK,UAEjE,CAKA,aAAIqO,CAAUpX,GACVxE,EAAK0iB,uCAAuCvf,KAAKoK,UAAW/I,EAChE,CAMA,kBAAIme,GACA,MAAMtb,EAAMrH,EAAK4iB,4CAA4Czf,KAAKoK,WAClE,OAAO8P,OAAOC,QAAQ,GAAIjW,EAC9B,CAMA,kBAAIsb,CAAene,GACfxE,EAAK6iB,4CAA4C1f,KAAKoK,UAAW/I,EACrE,CAKA,0BAAIse,GACA,MAAMzb,EAAMrH,EAAK+iB,oDAAoD5f,KAAKoK,WAC1E,OAAO8P,OAAOC,QAAQ,GAAIjW,EAC9B,CAKA,0BAAIyb,CAAuBte,GACvBxE,EAAKgjB,oDAAoD7f,KAAKoK,UAAW/I,EAC7E,CAMA,qBAAIye,GAEA,OADYjjB,EAAKkjB,+CAA+C/f,KAAKoK,UAEzE,CAMA,qBAAI0V,CAAkBze,GAClBxE,EAAKmjB,+CAA+ChgB,KAAKoK,UAAW/I,EACxE,CAMA,mBAAI4e,GACA,MAAM/b,EAAMrH,EAAKqjB,6CAA6ClgB,KAAKoK,WACnE,OAAOoG,GAAgBpM,OAAOF,EAClC,CAMA,mBAAI+b,CAAgB5e,GAChB4B,EAAa5B,EAAMmP,IACnB,IAAI7F,EAAOtJ,EAAKgJ,qBAChBxN,EAAKsjB,6CAA6CngB,KAAKoK,UAAWO,EACtE,CAIA,WAAAyE,GACI,MAAMlL,EAAMrH,EAAKujB,yBAGjB,OAFApgB,KAAKoK,UAAYlG,IAAQ,EACzBib,GAA+Bte,SAASb,KAAMA,KAAKoK,UAAWpK,MACvDA,IACX,EAGJ,MAAMqgB,GAAgE,oBAAzBzf,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKyjB,4BAA4B3hB,IAAQ,EAAG,KAO3E,MAAM4hB,GAET,aAAOnc,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqW,GAAiBpW,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChB0hB,GAA6Bxf,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBiW,GAA6Bvf,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKyjB,4BAA4B3hB,EAAK,EAC1C,CAQA,UAAAse,GACI,MAAM/Y,EAAMrH,EAAK2jB,4BAA4BxgB,KAAKoK,WAClD,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAMA,OAAAuc,CAAQ9d,GACJ,IAAI+d,EACAC,EACJ,IACI,MAAMhW,EAAOpM,EAAkBoE,EAAS9F,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EACPgH,EAAMrH,EAAK+jB,yBAAyB5gB,KAAKoK,UAAWO,EAAMG,GAGhE,OAFA4V,EAAcxc,EAAI,GAClByc,EAAczc,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAMA,OAAAE,CAAQle,GACJ,IAAIme,EACAC,EACJ,IACI,MAAMpW,EAAOpM,EAAkBoE,EAAS9F,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EACPgH,EAAMrH,EAAKmkB,yBAAyBhhB,KAAKoK,UAAWO,EAAMG,GAChE,IAAIe,EAAO3H,EAAI,GACX4H,EAAO5H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA2H,EAAO,EAAGC,EAAO,EACXhJ,EAAwBoB,EAAI,IAItC,OAFA4c,EAAcjV,EACdkV,EAAcjV,EACPvL,EAAmBsL,EAAMC,EACpC,CAAE,QACEjP,EAAKqP,gBAAgB4U,EAAaC,EAAa,EACnD,CACJ,CASA,UAAAE,GACI,MAAM/c,EAAMrH,EAAKqkB,4BAA4BlhB,KAAKoK,WAClD,OAAO6F,GAAU7L,OAAOF,EAC5B,EAGJ,MAAMid,GAAuD,oBAAzBvgB,qBAC9B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKukB,mBAAmBziB,IAAQ,EAAG,KASlE,MAAM0iB,GAET,kBAAAhX,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB+W,GAAoBrgB,WAAWd,MACxBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKukB,mBAAmBziB,EAAK,EACjC,CAKA,WAAAyQ,CAAYsL,GACR,MAAM/P,EAAOpM,EAAkBmc,EAAI7d,EAAK+N,kBAAmB/N,EAAKgO,oBAC1DC,EAAO5N,EACPgH,EAAMrH,EAAKykB,YAAY3W,EAAMG,GACnC,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5Bid,GAAoBtgB,SAASb,KAAMA,KAAKoK,UAAWpK,MAC5CA,IACX,CAKA,aAAIuhB,GACA,IAAIrU,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK2kB,kBAAkBxhB,KAAKoK,WAGxC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,cAAIsU,GACA,MAAMvd,EAAMrH,EAAK6kB,mBAAmB1hB,KAAKoK,WACzC,OAAe,IAARlG,OAAYxF,EAAYijB,GAAWvd,OAAOF,EACrD,CAKA,QAAA7B,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK+kB,iBAAiB5hB,KAAKoK,WAGvC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM0U,GAA4D,oBAAzBjhB,qBACnC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKilB,wBAAwBnjB,IAAQ,EAAG,KAIvE,MAAMojB,GAET,aAAO3d,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO6X,GAAa5X,WAGvC,OAFA3K,EAAI4K,UAAYzL,EAChBkjB,GAAyBhhB,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC/CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjByX,GAAyB/gB,WAAWd,MAC7BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKilB,wBAAwBnjB,EAAK,EACtC,CAKA,WAAIuc,GACA,MAAMhX,EAAMrH,EAAKmlB,+BAA+BhiB,KAAKoK,WACrD,OAAO4O,GAAiB5U,OAAOF,EACnC,CAKA,WAAIgX,CAAQ7Z,GACR4B,EAAa5B,EAAM2X,IACnB,IAAIrO,EAAOtJ,EAAKgJ,qBAChBxN,EAAKolB,+BAA+BjiB,KAAKoK,UAAWO,EACxD,CAKA,cAAIqQ,GACA,MAAM9W,EAAMrH,EAAKqlB,kCAAkCliB,KAAKoK,WACxD,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAKA,cAAI8W,CAAW3Z,GACX4B,EAAa5B,EAAMkS,IACnB,IAAI5I,EAAOtJ,EAAKgJ,qBAChBxN,EAAKslB,kCAAkCniB,KAAKoK,UAAWO,EAC3D,EAGJ,MAAMyX,GAAqE,oBAAzBxhB,qBAC5C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKwlB,iCAAiC1jB,IAAQ,EAAG,KAIhF,MAAM2e,GAET,aAAOlZ,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOoT,GAAsBnT,WAGhD,OAFA3K,EAAI4K,UAAYzL,EAChByjB,GAAkCvhB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACxDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBgY,GAAkCthB,WAAWd,MACtCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKwlB,iCAAiC1jB,EAAK,EAC/C,CAKA,WAAI2jB,GACA,MAAMpe,EAAMrH,EAAK0lB,wCAAwCviB,KAAKoK,WAC9D,OAAOmW,GAAiBnc,OAAOF,EACnC,CAKA,WAAIoe,CAAQjhB,GACR4B,EAAa5B,EAAMkf,IACnB,IAAI5V,EAAOtJ,EAAKgJ,qBAChBxN,EAAK2lB,wCAAwCxiB,KAAKoK,UAAWO,EACjE,CAKA,WAAIhI,GACA,IAAIuK,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK4lB,wCAAwCziB,KAAKoK,WAG9D,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,WAAIxK,CAAQtB,GACR,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,EAGJ,MAAM4X,GAAmE,oBAAzB9hB,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK8lB,+BAA+BhkB,IAAQ,EAAG,KAO9E,MAAMikB,GAET,aAAOxe,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO0Y,GAAoBzY,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChB+jB,GAAgC7hB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBsY,GAAgC5hB,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK8lB,+BAA+BhkB,EAAK,EAC7C,CAKA,UAAIkkB,GACA,MAAM3e,EAAMrH,EAAKimB,2BAA2B9iB,KAAKoK,WACjD,OAAO2Y,GAAO3e,OAAOF,EACzB,CAMA,aAAI8e,GACA,MAAM9e,EAAMrH,EAAKomB,8BAA8BjjB,KAAKoK,WACpD,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAKA,aAAIgf,GACA,IAAIhW,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKsmB,8BAA8BnjB,KAAKoK,WAGpD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,eAAAiW,GAEI,OAAe,IADHvmB,EAAKwmB,oCAAoCrjB,KAAKoK,UAE9D,EAGJ,MAAMkZ,GAAiE,oBAAzB1iB,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK0mB,6BAA6B5kB,IAAQ,EAAG,KAO5E,MAAM6kB,GAET,aAAOpf,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOsZ,GAAkBrZ,WAG5C,OAFA3K,EAAI4K,UAAYzL,EAChB2kB,GAA8BziB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACpDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBkZ,GAA8BxiB,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK0mB,6BAA6B5kB,EAAK,EAC3C,CAKA,MAAI+b,GAEA,OADY7d,EAAK4mB,+BAA+BzjB,KAAKoK,UAEzD,CAOA,QAAIsZ,GAEA,OADY7mB,EAAK8mB,iCAAiC3jB,KAAKoK,UAE3D,CAKA,WAAIwZ,GAEA,OADY/mB,EAAKgnB,oCAAoC7jB,KAAKoK,UAE9D,CAOA,WAAAgF,CAAYsL,EAAIgJ,EAAME,GAClB,MAAM1f,EAAMrH,EAAKinB,sBAAsBpJ,EAAIgJ,EAAME,GAGjD,OAFA5jB,KAAKoK,UAAYlG,IAAQ,EACzBof,GAA8BziB,SAASb,KAAMA,KAAKoK,UAAWpK,MACtDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKknB,uBAAuB/jB,KAAKoK,UAEjD,EAGJ,MAAM4Z,GAAgE,oBAAzBpjB,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKonB,4BAA4BtlB,IAAQ,EAAG,KAU3E,MAAMulB,GAET,aAAO9f,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOga,GAAiB/Z,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChBqlB,GAA6BnjB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB4Z,GAA6BljB,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKonB,4BAA4BtlB,EAAK,EAC1C,CAKA,MAAI+b,GAEA,OADY7d,EAAKsnB,8BAA8BnkB,KAAKoK,UAExD,CAQA,QAAIsZ,GAEA,OADY7mB,EAAKunB,gCAAgCpkB,KAAKoK,UAE1D,CAMA,WAAAgF,CAAYsL,EAAIgJ,GACZ,MAAMxf,EAAMrH,EAAKwnB,qBAAqB3J,EAAIgJ,GAG1C,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzB8f,GAA6BnjB,SAASb,KAAMA,KAAKoK,UAAWpK,MACrDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKynB,sBAAsBtkB,KAAKoK,UAEhD,EAGJ,MAAMma,GAAgE,oBAAzB3jB,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK2nB,4BAA4B7lB,IAAQ,EAAG,KAS3E,MAAM8lB,GAET,aAAOrgB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOua,GAAiBta,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChB4lB,GAA6B1jB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBma,GAA6BzjB,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK2nB,4BAA4B7lB,EAAK,EAC1C,CAKA,MAAI+b,GAEA,OADY7d,EAAK6nB,8BAA8B1kB,KAAKoK,UAExD,CAQA,QAAIsZ,GAEA,OADY7mB,EAAK8nB,gCAAgC3kB,KAAKoK,UAE1D,CAMA,WAAAgF,CAAYsL,EAAIgJ,GACZ,MAAMxf,EAAMrH,EAAK+nB,qBAAqBlK,EAAIgJ,GAG1C,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzBqgB,GAA6B1jB,SAASb,KAAMA,KAAKoK,UAAWpK,MACrDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKgoB,sBAAsB7kB,KAAKoK,UAEhD,EAGJ,MAAM0a,GAAiE,oBAAzBlkB,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKkoB,6BAA6BpmB,IAAQ,EAAG,KAU5E,MAAMqmB,GAET,aAAO5gB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO8a,GAAkB7a,WAG5C,OAFA3K,EAAI4K,UAAYzL,EAChBmmB,GAA8BjkB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACpDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB0a,GAA8BhkB,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKkoB,6BAA6BpmB,EAAK,EAC3C,CAKA,MAAI+b,GAEA,OADY7d,EAAKooB,+BAA+BjlB,KAAKoK,UAEzD,CAQA,QAAIsZ,GAEA,OADY7mB,EAAKqoB,iCAAiCllB,KAAKoK,UAE3D,CAMA,WAAAgF,CAAYsL,EAAIgJ,GACZ,MAAMxf,EAAMrH,EAAKsoB,sBAAsBzK,EAAIgJ,GAG3C,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzB4gB,GAA8BjkB,SAASb,KAAMA,KAAKoK,UAAWpK,MACtDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKuoB,uBAAuBplB,KAAKoK,UAEjD,EAGJ,MAAMib,GAA8D,oBAAzBzkB,qBACrC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKyoB,0BAA0B3mB,IAAQ,EAAG,KAKzE,MAAM4mB,GAET,aAAOnhB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqb,GAAepb,WAGzC,OAFA3K,EAAI4K,UAAYzL,EAChB0mB,GAA2BxkB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACjDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBib,GAA2BvkB,WAAWd,MAC/BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKyoB,0BAA0B3mB,EAAK,EACxC,CAKA,OAAA6mB,GAEI,OAAe,IADH3oB,EAAK4oB,uBAAuBzlB,KAAKoK,UAEjD,CAKA,SAAAsb,GAEI,OAAe,IADH7oB,EAAK8oB,yBAAyB3lB,KAAKoK,UAEnD,CAKA,aAAI6T,GACA,MAAM/Z,EAAMrH,EAAK+oB,yBAAyB5lB,KAAKoK,WAC/C,OAAe,IAARlG,OAAYxF,EAAYmnB,GAAUzhB,OAAOF,EACpD,CAMA,0BAAI4hB,GACA,MAAM5hB,EAAMrH,EAAKkpB,sCAAsC/lB,KAAKoK,WAC5D,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,EAGJ,MAAMqZ,GAAqE,oBAAzBplB,qBAC5C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKopB,iCAAiCtnB,IAAQ,EAAG,KAIhF,MAAMunB,GAET,aAAO9hB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOgc,GAAsB/b,WAGhD,OAFA3K,EAAI4K,UAAYzL,EAChBqnB,GAAkCnlB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACxDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB4b,GAAkCllB,WAAWd,MACtCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKopB,iCAAiCtnB,EAAK,EAC/C,CAKA,QAAIK,GAEA,OADYnC,EAAKspB,qCAAqCnmB,KAAKoK,UAE/D,CAKA,eAAIvI,GAEA,OADYhF,EAAKupB,4CAA4CpmB,KAAKoK,UAEtE,CAKA,kBAAIic,GAEA,OADYxpB,EAAKypB,+CAA+CtmB,KAAKoK,UAEzE,EAGJ,MAAMmc,GAAiE,oBAAzB3lB,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK2pB,6BAA6B7nB,IAAQ,EAAG,KAI5E,MAAMyM,GAET,aAAOhH,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOkB,GAAkBjB,WAG5C,OAFA3K,EAAI4K,UAAYzL,EAChB4nB,GAA8B1lB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACpDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBmc,GAA8BzlB,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK2pB,6BAA6B7nB,EAAK,EAC3C,CAKA,mBAAI8nB,GAEA,OADY5pB,EAAK6pB,kCAAkC1mB,KAAKoK,UAE5D,CAKA,aAAIqO,GAEA,OADY5b,EAAK8pB,4BAA4B3mB,KAAKoK,UAEtD,EAGJ,MAAMwc,GAAyD,oBAAzBhmB,qBAChC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKgqB,qBAAqBloB,IAAQ,EAAG,KAOpE,MAAMmoB,GAET,kBAAAzc,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBwc,GAAsB9lB,WAAWd,MAC1BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKgqB,qBAAqBloB,EAAK,EACnC,CAuBA,sBAAOooB,CAAgBC,EAAMC,EAAYC,GACrCjkB,EAAa+jB,EAAMrZ,IACnB1K,EAAaikB,EAAcC,IAE3B,OADYtqB,EAAKuqB,0BAA0BJ,EAAK5c,UAAW6c,EAAYC,EAAa9c,UAExF,CAyBA,yBAAOid,CAAmBC,EAAUL,EAAYC,GAC5C,MAAMvc,EAAOtH,EAAwBikB,EAAUzqB,EAAK+N,mBAC9CE,EAAO5N,EACb+F,EAAaikB,EAAcC,IAE3B,OADYtqB,EAAK0qB,6BAA6B5c,EAAMG,EAAMmc,EAAYC,EAAa9c,UAEvF,CAyBA,4BAAOod,CAAsBF,EAAUL,EAAYC,GAC/C,MAAMvc,EAAOtH,EAAwBikB,EAAUzqB,EAAK+N,mBAC9CE,EAAO5N,EACb+F,EAAaikB,EAAcC,IAE3B,OADYtqB,EAAK4qB,gCAAgC9c,EAAMG,EAAMmc,EAAYC,EAAa9c,UAE1F,EAGJ,MAAMsd,GAA0D,oBAAzB9mB,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK8qB,sBAAsBhpB,IAAQ,EAAG,KAKrE,MAAMipB,GAET,aAAOxjB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO0d,GAAWzd,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChB+oB,GAAuB7mB,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBsd,GAAuB5mB,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK8qB,sBAAsBhpB,EAAK,EACpC,CAOA,WAAAyQ,GACI,MAAMlL,EAAMrH,EAAKgrB,iBACjB,GAAI3jB,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5BwjB,GAAuB7mB,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/CA,IACX,CA6BA,iBAAO8nB,CAAWC,EAASvR,EAAWwR,EAAYC,GAC9ChlB,EAAa8kB,EAASja,IACtB7K,EAAauT,EAAWtI,IACxB,IAAIvD,EAAOlK,EAAWunB,GAAc,EAAIzpB,EAAkBypB,EAAYnrB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/FC,EAAO5N,EACPyO,EAAOlL,EAAWwnB,GAAoB,EAAI1pB,EAAkB0pB,EAAkBprB,EAAK+N,kBAAmB/N,EAAKgO,oBAC3Ge,EAAO1O,EAEX,OADYL,EAAKqrB,sBAAsBH,EAAQ3d,UAAWoM,EAAUpM,UAAWO,EAAMG,EAAMa,EAAMC,EAErG,CAmBA,oBAAOuc,CAAcJ,EAASvR,EAAW0Q,GACrCjkB,EAAa8kB,EAASja,IACtB7K,EAAauT,EAAWtI,IACxBjL,EAAaikB,EAAcC,IAE3B,OADYtqB,EAAKurB,yBAAyBL,EAAQ3d,UAAWoM,EAAUpM,UAAW8c,EAAa9c,UAEnG,CAKA,UAAIwD,GACA,MAAM1J,EAAMrH,EAAKwrB,kBAAkBroB,KAAKoK,WACxC,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,YAAI8J,GACA,MAAM9J,EAAMrH,EAAKyrB,oBAAoBtoB,KAAKoK,WAC1C,OAAO8D,GAAS9J,OAAOF,EAC3B,CAWA,wBAAIqkB,GAEA,OADY1rB,EAAK2rB,gCAAgCxoB,KAAKoK,UAE1D,CAKA,gBAAIqe,GACA,MAAMvkB,EAAMrH,EAAK6rB,wBAAwB1oB,KAAKoK,WAC9C,OAAO2X,GAAa3d,OAAOF,EAC/B,CAKA,eAAIoU,GAEA,OADYzb,EAAK8rB,uBAAuB3oB,KAAKoK,UAEjD,CASA,0BAAIwe,GAEA,OAAe,IADH/rB,EAAKgsB,kCAAkC7oB,KAAKoK,UAE5D,CAKA,0BAAIwe,CAAuBE,GACvBjsB,EAAKksB,sCAAsC/oB,KAAKoK,UAAW0e,EAC/D,CASA,4BAAIE,GAEA,OAAe,IADHnsB,EAAKosB,oCAAoCjpB,KAAKoK,UAE9D,CAKA,4BAAI4e,CAAyBF,GACzBjsB,EAAKqsB,wCAAwClpB,KAAKoK,UAAW0e,EACjE,CAUA,YAAAK,GACI,MAAMjlB,EAAMrH,EAAKusB,wBAAwBppB,KAAKoK,WAC9C,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAyBA,kBAAAmlB,CAAmBC,GACf,MAAM3e,EAAOtH,EAAwBimB,EAAOzsB,EAAK+N,mBAC3CE,EAAO5N,EAEb,OADYL,EAAK0sB,8BAA8BvpB,KAAKoK,UAAWO,EAAMG,EAEzE,CAQA,0BAAA0e,GAEI,OADY3sB,EAAK4sB,sCAAsCzpB,KAAKoK,UAEhE,CAiCA,kBAAAsf,CAAmBC,EAAkBC,EAAiBC,EAAsBC,GACxE,MAAMnf,EAAOpM,EAAkBorB,EAAkB9sB,EAAK+N,kBAAmB/N,EAAKgO,oBACxEC,EAAO5N,EACb+F,EAAa2mB,EAAiBvN,IAC9B,MAAMnY,EAAMrH,EAAKktB,8BAA8B/pB,KAAKoK,UAAWO,EAAMG,EAAM8e,EAAgBxf,UAAWyf,EAAsBppB,EAAWqpB,GAAwB,EAAIvqB,EAAqBuqB,IACxL,GAAI5lB,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAkBA,gBAAA8lB,GAEI,OADYntB,EAAKotB,4BAA4BjqB,KAAKoK,UAEtD,CAkBA,iBAAA8f,CAAkBC,EAAYC,EAAcC,GACxC,MAAM1f,EAAOpM,EAAkB4rB,EAAYttB,EAAK+N,kBAAmB/N,EAAKgO,oBAClEC,EAAO5N,EACPyO,EAAOpN,EAAkB8rB,EAAUxtB,EAAK+N,kBAAmB/N,EAAKgO,oBAChEe,EAAO1O,EACPgH,EAAMrH,EAAKytB,6BAA6BtqB,KAAKoK,UAAWO,EAAMG,EAAMsf,EAAcze,EAAMC,GAC9F,GAAI1H,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CA0CA,gBAAAqmB,CAAiBC,EAAShT,EAAYC,GAClCxU,EAAaunB,EAASzH,IACtB,MAAMpY,EAAOpM,EAAkBiZ,EAAY3a,EAAK+N,kBAAmB/N,EAAKgO,oBAClEC,EAAO5N,EACPyO,EAAOpN,EAAkBkZ,EAAS5a,EAAK+N,kBAAmB/N,EAAKgO,oBAC/De,EAAO1O,EACPgH,EAAMrH,EAAK4tB,4BAA4BzqB,KAAKoK,UAAWogB,EAAQpgB,UAAWO,EAAMG,EAAMa,EAAMC,GAClG,GAAI1H,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAkBA,gBAAAwmB,CAAiB5W,EAAO0W,EAASG,GAC7B,MAAMhgB,EAAOpM,EAAkBuV,EAAOjX,EAAK+N,kBAAmB/N,EAAKgO,oBAC7DC,EAAO5N,EACb+F,EAAaunB,EAASzH,IACtB9f,EAAa0nB,EAAqB3V,IAClC,MAAM9Q,EAAMrH,EAAK+tB,4BAA4B5qB,KAAKoK,UAAWO,EAAMG,EAAM0f,EAAQpgB,UAAWugB,EAAoBvgB,WAChH,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAsBA,0BAAA2mB,CAA2B/W,EAAO0W,GAC9B,MAAM7f,EAAOpM,EAAkBuV,EAAOjX,EAAK+N,kBAAmB/N,EAAKgO,oBAC7DC,EAAO5N,EACb+F,EAAaunB,EAASzH,IACtB,MAAM7e,EAAMrH,EAAKiuB,sCAAsC9qB,KAAKoK,UAAWO,EAAMG,EAAM0f,EAAQpgB,WAC3F,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAQA,kBAAA6mB,GAEI,OADYluB,EAAKmuB,8BAA8BhrB,KAAKoK,UAExD,CAgBA,mBAAA6gB,GAEI,OADYpuB,EAAKquB,+BAA+BlrB,KAAKoK,UAEzD,CAoBA,mBAAA+gB,CAAoBC,GAChBnoB,EAAamoB,EAAQC,IACrB,IAAI1gB,EAAOygB,EAAO/gB,qBAElB,OADYxN,EAAKyuB,+BAA+BtrB,KAAKoK,UAAWO,EAEpE,CAWA,sBAAA4gB,GAEI,OADY1uB,EAAK2uB,kCAAkCxrB,KAAKoK,UAE5D,CAYA,sBAAAqhB,CAAuBC,EAAYlZ,EAAkBmZ,GACjD,IAAIhhB,EAAOlK,EAAWirB,GAAc,EAAIntB,EAAkBmtB,EAAY7uB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/FC,EAAO5N,EACPyO,EAAOlL,EAAW+R,GAAoB,EAAIjU,EAAkBiU,EAAkB3V,EAAK+N,kBAAmB/N,EAAKgO,oBAC3Ge,EAAO1O,EACP2O,EAAOpL,EAAWkrB,GAAoB,EAAIptB,EAAkBotB,EAAkB9uB,EAAK+N,kBAAmB/N,EAAKgO,oBAC3GiB,EAAO5O,EAEX,OADYL,EAAK+uB,kCAAkC5rB,KAAKoK,UAAWO,EAAMG,EAAMa,EAAMC,EAAMC,EAAMC,EAErG,CAyBA,qBAAA+f,CAAsBC,GAElB,OADYjvB,EAAKkvB,iCAAiC/rB,KAAKoK,UAAW0hB,EAEtE,CASA,WAAAE,CAAYjE,GACR9kB,EAAa8kB,EAASja,IAEtB,OADYjR,EAAKovB,uBAAuBjsB,KAAKoK,UAAW2d,EAAQ3d,UAEpE,CAOA,IAAA8hB,CAAKvpB,GACD,MAAMgI,EAAOpM,EAAkBoE,EAAS9F,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EAEb,OADYL,EAAKsvB,gBAAgBnsB,KAAKoK,UAAWO,EAAMG,EAE3D,CAUA,sBAAAshB,CAAuB5B,GACnBvnB,EAAaunB,EAASzH,IAEtB,OADYlmB,EAAKwvB,kCAAkCrsB,KAAKoK,UAAWogB,EAAQpgB,UAE/E,CAoBA,YAAAkiB,CAAa9B,EAASlB,EAAOiD,GACzBtpB,EAAaunB,EAASzH,IACtB,MAAMpY,EAAOtH,EAAwBimB,EAAOzsB,EAAK+N,mBAC3CE,EAAO5N,EACb+F,EAAaspB,EAAqBlN,IAElC,OADYxiB,EAAK2vB,wBAAwBxsB,KAAKoK,UAAWogB,EAAQpgB,UAAWO,EAAMG,EAAMyhB,EAAoBniB,UAEhH,CAeA,iBAAAqiB,CAAkBnD,GACd,MAAM3e,EAAOtH,EAAwBimB,EAAOzsB,EAAK+N,mBAC3CE,EAAO5N,EACPgH,EAAMrH,EAAK6vB,6BAA6B1sB,KAAKoK,UAAWO,EAAMG,GACpE,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOugB,GAAiBrgB,OAAOF,EAAI,GACvC,CAiCA,kBAAAyoB,CAAmBrD,GACf,MAAM3e,EAAOtH,EAAwBimB,EAAOzsB,EAAK+N,mBAC3CE,EAAO5N,EAEb,OADYL,EAAK+vB,8BAA8B5sB,KAAKoK,UAAWO,EAAMG,EAEzE,CAsBA,cAAA+hB,CAAe9E,EAAS+E,GACpB7pB,EAAa8kB,EAASja,IAEtB,OADYjR,EAAKkwB,0BAA0B/sB,KAAKoK,UAAW2d,EAAQ3d,WAAY3J,EAAWqsB,GAAersB,EAAWqsB,GAAgB,EAAIA,EAE5I,CAyBA,SAAAE,CAAUjF,EAASvR,EAAWsW,GAC1B7pB,EAAa8kB,EAASja,IACtB7K,EAAauT,EAAWtI,IAExB,OADYrR,EAAKowB,qBAAqBjtB,KAAKoK,UAAW2d,EAAQ3d,UAAWoM,EAAUpM,WAAY3J,EAAWqsB,GAAersB,EAAWqsB,GAAgB,EAAIA,EAE5J,CAaA,eAAAI,CAAgBnF,EAASoF,GACrBlqB,EAAa8kB,EAASja,IACtB,MAAMnD,EAAOpM,EAAkB4uB,EAAStwB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EACPgH,EAAMrH,EAAKuwB,2BAA2BptB,KAAKoK,UAAW2d,EAAQ3d,UAAWO,EAAMG,GACrF,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAOA,sBAAAmpB,CAAuBtF,EAASoF,GAC5BlqB,EAAa8kB,EAASja,IACtB,MAAMnD,EAAOpM,EAAkB4uB,EAAStwB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EACPgH,EAAMrH,EAAKywB,kCAAkCttB,KAAKoK,UAAW2d,EAAQ3d,UAAWO,EAAMG,GAC5F,OAAe,IAAR5G,OAAYxF,EAAY6uB,GAAoBnpB,OAAOF,EAC9D,CAMA,uBAAAspB,CAAwBzF,GACpB9kB,EAAa8kB,EAASja,IAEtB,OADYjR,EAAK4wB,mCAAmCztB,KAAKoK,UAAW2d,EAAQ3d,UAEhF,CAUA,wBAAAsjB,CAAyB5Z,EAAO0W,GAC5B,MAAM7f,EAAOpM,EAAkBuV,EAAOjX,EAAK+N,kBAAmB/N,EAAKgO,oBAC7DC,EAAO5N,EACb+F,EAAaunB,EAASzH,IACtB,MAAM7e,EAAMrH,EAAK8wB,oCAAoC3tB,KAAKoK,UAAWO,EAAMG,EAAM0f,EAAQpgB,WACzF,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAcA,cAAA0pB,CAAeC,GAEX,OADYhxB,EAAKixB,0BAA0B9tB,KAAKoK,UAAWyjB,EAE/D,CAmBA,cAAAE,CAAeC,EAAoBC,GAC/B,MAAMtjB,EAAOpM,EAAkByvB,EAAoBnxB,EAAK+N,kBAAmB/N,EAAKgO,oBAC1EC,EAAO5N,EACPgH,EAAMrH,EAAKqxB,0BAA0BluB,KAAKoK,UAAWO,EAAMG,EAAMmjB,GACvE,GAAI/pB,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAgBA,sBAAAiqB,CAAuBH,EAAoBC,GACvC,MAAMtjB,EAAOpM,EAAkByvB,EAAoBnxB,EAAK+N,kBAAmB/N,EAAKgO,oBAC1EC,EAAO5N,EACPgH,EAAMrH,EAAKuxB,kCAAkCpuB,KAAKoK,UAAWO,EAAMG,EAAMmjB,GAC/E,GAAI/pB,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAyBA,sBAAAmqB,CAAuBC,EAAqBL,EAAmB3gB,GAC3D,MAAM3C,EAAOpM,EAAkB+O,EAAgBzQ,EAAK+N,kBAAmB/N,EAAKgO,oBACtEC,EAAO5N,EACPgH,EAAMrH,EAAK0xB,kCAAkCvuB,KAAKoK,UAAWkkB,EAAqB7tB,EAAWwtB,GAAqB,EAAI1uB,EAAqB0uB,GAAoBtjB,EAAMG,GAC3K,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAYA,uBAAAsqB,CAAwBC,EAAgB7K,GACpC3gB,EAAawrB,EAAgBxkB,GAC7B,MAAMU,EAAOpM,EAAkBqlB,EAAS/mB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/DC,EAAO5N,EAEb,OADYL,EAAK6xB,mCAAmC1uB,KAAKoK,UAAWqkB,EAAerkB,UAAWO,EAAMG,EAExG,CAMA,aAAA6jB,GAEI,OADY9xB,EAAK+xB,yBAAyB5uB,KAAKoK,UAEnD,CAsBA,YAAAykB,CAAaC,GACT,MAAM5qB,EAAMrH,EAAKkyB,wBAAwB/uB,KAAKoK,UAAW0kB,GACzD,GAAI5qB,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAeA,cAAA8qB,CAAeC,EAAoBrL,GAC/B,MAAMjZ,EAAOpM,EAAkB0wB,EAAoBpyB,EAAK+N,kBAAmB/N,EAAKgO,oBAC1EC,EAAO5N,EACPyO,EAAOpN,EAAkBqlB,EAAS/mB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/De,EAAO1O,EACPgH,EAAMrH,EAAKqyB,0BAA0BlvB,KAAKoK,UAAWO,EAAMG,EAAMa,EAAMC,GAC7E,GAAI1H,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAUA,eAAAirB,GAEI,OADYtyB,EAAKuyB,2BAA2BpvB,KAAKoK,UAErD,CAUA,aAAAilB,GAEI,OADYxyB,EAAKyyB,yBAAyBtvB,KAAKoK,UAEnD,CAQA,cAAAmlB,GAEI,OADY1yB,EAAK2yB,0BAA0BxvB,KAAKoK,UAEpD,CAMA,aAAAqlB,GAEI,OADY5yB,EAAK6yB,yBAAyB1vB,KAAKoK,UAEnD,CAiBA,8BAAOulB,CAAwB3B,EAAoB4B,EAAYC,GAC3D,IAAIC,EACAC,EACJ,IACI,MAAMplB,EAAOpM,EAAkByvB,EAAoBnxB,EAAK+N,kBAAmB/N,EAAKgO,oBAC1EC,EAAO5N,EACPyO,EAAOpN,EAAkBqxB,EAAY/yB,EAAK+N,kBAAmB/N,EAAKgO,oBAClEe,EAAO1O,EACPgH,EAAMrH,EAAKmzB,mCAAmCrlB,EAAMG,EAAMa,EAAMC,EAAMikB,GAC5E,IAAII,EAAO/rB,EAAI,GACXgsB,EAAOhsB,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA+rB,EAAO,EAAGC,EAAO,EACXptB,EAAwBoB,EAAI,IAItC,OAFA4rB,EAAcG,EACdF,EAAcG,EACP3vB,EAAmB0vB,EAAMC,EACpC,CAAE,QACErzB,EAAKqP,gBAAgB4jB,EAAaC,EAAa,EACnD,CACJ,CAWA,8BAAOI,CAAwBC,EAA8BR,GACzD,IAAIE,EACAC,EACJ,IACI,MAAMplB,EAAOpM,EAAkB6xB,EAA8BvzB,EAAK+N,kBAAmB/N,EAAKgO,oBACpFC,EAAO5N,EACPyO,EAAOpN,EAAkBqxB,EAAY/yB,EAAK+N,kBAAmB/N,EAAKgO,oBAClEe,EAAO1O,EACPgH,EAAMrH,EAAKwzB,mCAAmC1lB,EAAMG,EAAMa,EAAMC,GACtE,IAAIqkB,EAAO/rB,EAAI,GACXgsB,EAAOhsB,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA+rB,EAAO,EAAGC,EAAO,EACXptB,EAAwBoB,EAAI,IAItC,OAFA4rB,EAAcG,EACdF,EAAcG,EACP3vB,EAAmB0vB,EAAMC,EACpC,CAAE,QACErzB,EAAKqP,gBAAgB4jB,EAAaC,EAAa,EACnD,CACJ,CAUA,8BAAAO,CAA+BC,GAE3B,OADY1zB,EAAK2zB,0CAA0CxwB,KAAKoK,UAAWmmB,EAE/E,CAUA,gCAAAE,CAAiCF,GAE7B,OADY1zB,EAAK6zB,4CAA4C1wB,KAAKoK,UAAWmmB,EAEjF,CAUA,mCAAAI,CAAoCJ,GAEhC,OADY1zB,EAAK+zB,+CAA+C5wB,KAAKoK,UAAWmmB,EAEpF,CAUA,8BAAAM,CAA+BN,GAE3B,OADY1zB,EAAKi0B,0CAA0C9wB,KAAKoK,UAAWmmB,EAE/E,CA4BA,6BAAAQ,CAA8BR,GAE1B,OADY1zB,EAAKm0B,yCAAyChxB,KAAKoK,UAAWmmB,EAE9E,CAwBA,mBAAAU,CAAoBC,GAChB,MAAMvmB,EAAOpM,EAAkB2yB,EAAar0B,EAAK+N,kBAAmB/N,EAAKgO,oBACnEC,EAAO5N,EAEb,OADYL,EAAKs0B,+BAA+BnxB,KAAKoK,UAAWO,EAAMG,EAE1E,CAaA,sBAAAsmB,CAAuBF,GACnB,MAAMvmB,EAAOpM,EAAkB2yB,EAAar0B,EAAK+N,kBAAmB/N,EAAKgO,oBACnEC,EAAO5N,EAEb,OADYL,EAAKw0B,kCAAkCrxB,KAAKoK,UAAWO,EAAMG,EAE7E,CAmBA,6BAAAwmB,GAEI,OADYz0B,EAAK00B,yCAAyCvxB,KAAKoK,UAEnE,CAaA,eAAAonB,CAAgBhH,GACZvnB,EAAaunB,EAASzH,IAEtB,OADYlmB,EAAK40B,2BAA2BzxB,KAAKoK,UAAWogB,EAAQpgB,UAExE,CAeA,eAAAsnB,CAAgBlH,EAASmH,GACrB1uB,EAAaunB,EAASzH,IACtB9f,EAAa0uB,EAAeC,IAE5B,OADY/0B,EAAKg1B,2BAA2B7xB,KAAKoK,UAAWogB,EAAQpgB,UAAWunB,EAAcvnB,UAEjG,CAKA,iBAAA0nB,GACI,MAAM5tB,EAAMrH,EAAKk1B,6BAA6B/xB,KAAKoK,WACnD,OAAOiM,GAAkBjS,OAAOF,EACpC,CASA,KAAA8tB,GACI,MAAMrzB,EAAMqB,KAAKqK,qBACjBxN,EAAKo1B,iBAAiBtzB,EAC1B,EAGJ,MAAMuzB,GAAiE,oBAAzBtxB,qBACxC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKs1B,6BAA6BxzB,IAAQ,EAAG,KAW5E,MAAMyzB,GAET,aAAOhuB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOkoB,GAAkBjoB,WAG5C,OAFA3K,EAAI4K,UAAYzL,EAChBuzB,GAA8BrxB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACpDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB8nB,GAA8BpxB,WAAWd,MAClCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKs1B,6BAA6BxzB,EAAK,EAC3C,CAKA,UAAAgZ,GAEI,OAAe,IADH9a,EAAKw1B,6BAA6BryB,KAAKoK,UAEvD,CAcA,MAAAgQ,GAEI,OADYvd,EAAKy1B,yBAAyBtyB,KAAKoK,UAEnD,CASA,mBAAAgN,CAAoBoT,EAAS+H,EAAkBlb,GAC3CpU,EAAaunB,EAASzH,IACtB9f,EAAasvB,EAAkBlR,IAC/B,IAAI1W,EAAOlK,EAAW4W,GAAW,EAAIhU,EAAwBgU,EAASxa,EAAK+N,mBACvEE,EAAO5N,EACX,MAAMgH,EAAMrH,EAAK21B,sCAAsCxyB,KAAKoK,UAAWogB,EAAQpgB,UAAWmoB,EAAiBnoB,UAAWO,EAAMG,GAC5H,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOqpB,GAAoBnpB,OAAOF,EAAI,GAC1C,CAYA,0BAAAuuB,CAA2Bpb,GACvB,IAAIyJ,EACAC,EACJ,IACI,IAAIpW,EAAOlK,EAAW4W,GAAW,EAAIhU,EAAwBgU,EAASxa,EAAK+N,mBACvEE,EAAO5N,EACX,MAAMgH,EAAMrH,EAAK61B,6CAA6C1yB,KAAKoK,UAAWO,EAAMG,GACpF,IAAIe,EAAO3H,EAAI,GACX4H,EAAO5H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA2H,EAAO,EAAGC,EAAO,EACXhJ,EAAwBoB,EAAI,IAItC,OAFA4c,EAAcjV,EACdkV,EAAcjV,EACPvL,EAAmBsL,EAAMC,EACpC,CAAE,QACEjP,EAAKqP,gBAAgB4U,EAAaC,EAAa,EACnD,CACJ,CAKA,aAAIzO,GACA,IAAIoO,EACAC,EACJ,IACI,MAAMzc,EAAMrH,EAAK81B,4BAA4B3yB,KAAKoK,WAClD,IAAIuB,EAAOzH,EAAI,GACX0H,EAAO1H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADAyH,EAAO,EAAGC,EAAO,EACX9I,EAAwBoB,EAAI,IAItC,OAFAwc,EAAc/U,EACdgV,EAAc/U,EACPrL,EAAmBoL,EAAMC,EACpC,CAAE,QACE/O,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAKA,kBAAIiS,GACA,IAAIlS,EACAC,EACJ,IACI,MAAMzc,EAAMrH,EAAKg2B,iCAAiC7yB,KAAKoK,WACvD,IAAIuB,EAAOzH,EAAI,GACX0H,EAAO1H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADAyH,EAAO,EAAGC,EAAO,EACX9I,EAAwBoB,EAAI,IAItC,OAFAwc,EAAc/U,EACdgV,EAAc/U,EACPrL,EAAmBoL,EAAMC,EACpC,CAAE,QACE/O,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAKA,mBAAAmS,GAEI,OADYj2B,EAAKk2B,sCAAsC/yB,KAAKoK,UAEhE,CAeA,yBAAA4oB,GAEI,OAAe,IADHn2B,EAAKo2B,4CAA4CjzB,KAAKoK,UAEtE,CAQA,qBAAA8oB,GAEI,OAAe,IADHr2B,EAAKs2B,wCAAwCnzB,KAAKoK,UAElE,CASA,oBAAAgpB,GAEI,OADYv2B,EAAKw2B,uCAAuCrzB,KAAKoK,UAEjE,CAYA,wBAAAkpB,GAEI,OAAe,IADHz2B,EAAK02B,2CAA2CvzB,KAAKoK,UAErE,EAGJ,MAAMopB,GAAsE,oBAAzB5yB,qBAC7C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK42B,kCAAkC90B,IAAQ,EAAG,KAIjF,MAAM8e,GAET,aAAOrZ,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOuT,GAAuBtT,WAGjD,OAFA3K,EAAI4K,UAAYzL,EAChB60B,GAAmC3yB,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBopB,GAAmC1yB,WAAWd,MACvCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK42B,kCAAkC90B,EAAK,EAChD,CAKA,WAAI2jB,GACA,MAAMpe,EAAMrH,EAAK0lB,wCAAwCviB,KAAKoK,WAC9D,OAAOmW,GAAiBnc,OAAOF,EACnC,CAKA,WAAIoe,CAAQjhB,GACR4B,EAAa5B,EAAMkf,IACnB,IAAI5V,EAAOtJ,EAAKgJ,qBAChBxN,EAAK2lB,wCAAwCxiB,KAAKoK,UAAWO,EACjE,CAKA,mBAAIyS,GACA,IAAIlQ,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK62B,iDAAiD1zB,KAAKoK,WAGvE,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,mBAAIiQ,CAAgB/b,GAChB,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,EAGJ,MAAM6oB,GAA+D,oBAAzB/yB,qBACtC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+2B,2BAA2Bj1B,IAAQ,EAAG,KAM1E,MAAMk1B,GAET,aAAOzvB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2pB,GAAgB1pB,WAG1C,OAFA3K,EAAI4K,UAAYzL,EAChBg1B,GAA4B9yB,SAASrB,EAAKA,EAAI4K,UAAW5K,GAClDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBupB,GAA4B7yB,WAAWd,MAChCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+2B,2BAA2Bj1B,EAAK,EACzC,CAKA,UAAAgZ,GAEI,OAAe,IADH9a,EAAKi3B,2BAA2B9zB,KAAKoK,UAErD,CAUA,MAAAgQ,GAEI,OADYvd,EAAKk3B,uBAAuB/zB,KAAKoK,UAEjD,CAMA,mBAAAgN,CAAoBC,GAChB,IAAI1M,EAAOlK,EAAW4W,GAAW,EAAIhU,EAAwBgU,EAASxa,EAAK+N,mBACvEE,EAAO5N,EACX,MAAMgH,EAAMrH,EAAKm3B,oCAAoCh0B,KAAKoK,UAAWO,EAAMG,GAC3E,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAMA,kBAAA+vB,GAEI,OADYp3B,EAAKq3B,mCAAmCl0B,KAAKoK,UAE7D,CAKA,aAAIkI,GACA,IAAIoO,EACAC,EACJ,IACI,MAAMzc,EAAMrH,EAAKs3B,0BAA0Bn0B,KAAKoK,WAChD,IAAIuB,EAAOzH,EAAI,GACX0H,EAAO1H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADAyH,EAAO,EAAGC,EAAO,EACX9I,EAAwBoB,EAAI,IAItC,OAFAwc,EAAc/U,EACdgV,EAAc/U,EACPrL,EAAmBoL,EAAMC,EACpC,CAAE,QACE/O,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAKA,kBAAIiS,GACA,IAAIlS,EACAC,EACJ,IACI,MAAMzc,EAAMrH,EAAKu3B,+BAA+Bp0B,KAAKoK,WACrD,IAAIuB,EAAOzH,EAAI,GACX0H,EAAO1H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADAyH,EAAO,EAAGC,EAAO,EACX9I,EAAwBoB,EAAI,IAItC,OAFAwc,EAAc/U,EACdgV,EAAc/U,EACPrL,EAAmBoL,EAAMC,EACpC,CAAE,QACE/O,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAMA,kBAAIjO,GACA,IAAIgO,EACAC,EACJ,IACI,MAAMzc,EAAMrH,EAAKw3B,+BAA+Br0B,KAAKoK,WACrD,IAAIuB,EAAOzH,EAAI,GACX0H,EAAO1H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADAyH,EAAO,EAAGC,EAAO,EACX9I,EAAwBoB,EAAI,IAItC,OAFAwc,EAAc/U,EACdgV,EAAc/U,EACPrL,EAAmBoL,EAAMC,EACpC,CAAE,QACE/O,EAAKqP,gBAAgBwU,EAAaC,EAAa,EACnD,CACJ,CAOA,qBAAAuS,GAEI,OAAe,IADHr2B,EAAKy3B,sCAAsCt0B,KAAKoK,UAEhE,CASA,oBAAAgpB,GAEI,OADYv2B,EAAK03B,qCAAqCv0B,KAAKoK,UAE/D,CAYA,wBAAAkpB,GAEI,OAAe,IADHz2B,EAAK23B,yCAAyCx0B,KAAKoK,UAEnE,EAGJ,MAAMqqB,GAA0E,oBAAzB7zB,qBACjD,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK63B,sCAAsC/1B,IAAQ,EAAG,KAOrF,MAAMg2B,GAET,eAAOC,CAASC,GACZ,OAAMA,aAAmBF,GAGlBE,EAAQxqB,qBAFJ,CAGf,CAEA,kBAAAA,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBqqB,GAAuC3zB,WAAWd,MAC3CrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK63B,sCAAsC/1B,EAAK,EACpD,CAMA,UAAIm2B,GACA,IAAI5nB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKk4B,4CAA4C/0B,KAAKoK,WAGlE,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,UAAI2nB,CAAOzzB,GACP,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,CAKA,aAAIkY,GACA,IAAI9V,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKm4B,+CAA+Ch1B,KAAKoK,WAGrE,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,aAAI6V,CAAU3hB,GACV,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAK2Q,6CAA6CxN,KAAKoK,UAAWO,EAAMG,EAC5E,CAkBA,oBAAImqB,GACA,MAAM/wB,EAAMrH,EAAKq4B,sDAAsDl1B,KAAKoK,WAC5E,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAkBA,oBAAIsoB,CAAiB5zB,GACjB,IAAIsJ,EAAOlK,EAAWY,GAAQ,EAAI9C,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBACnFC,EAAO5N,EACXL,EAAK6R,8CAA8C1O,KAAKoK,UAAWO,EAAMG,EAC7E,CAQA,UAAI+X,GACA,MAAM3e,EAAMrH,EAAKs4B,4CAA4Cn1B,KAAKoK,WAClE,OAAe,IAARlG,OAAYxF,EAAYqkB,GAAO3e,OAAOF,EACjD,CAQA,UAAI2e,CAAOxhB,GACP,IAAIsJ,EAAO,EACNlK,EAAWY,KACZ4B,EAAa5B,EAAM0hB,IACnBpY,EAAOtJ,EAAKgJ,sBAEhBxN,EAAKu4B,4CAA4Cp1B,KAAKoK,UAAWO,EACrE,CAMA,YAAI0qB,GAEA,OAAe,IADHx4B,EAAKy4B,8CAA8Ct1B,KAAKoK,UAExE,CAMA,YAAIirB,CAASh0B,GACTxE,EAAK04B,8CAA8Cv1B,KAAKoK,UAAW/I,EACvE,CAKA,YAAIm0B,GAEA,OAAe,IADH34B,EAAK44B,8CAA8Cz1B,KAAKoK,UAExE,CAKA,YAAIorB,CAASn0B,GACTxE,EAAK64B,8CAA8C11B,KAAKoK,UAAW/I,EACvE,CAIA,WAAA+N,GACI,MAAMlL,EAAMrH,EAAK84B,iCAGjB,OAFA31B,KAAKoK,UAAYlG,IAAQ,EACzBuwB,GAAuC5zB,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/DA,IACX,EAGJ,MAAM41B,GAA8D,oBAAzBh1B,qBACrC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKg5B,0BAA0Bl3B,IAAQ,EAAG,KAQzE,MAAMm3B,GAET,eAAOlB,CAASC,GACZ,OAAMA,aAAmBiB,GAGlBjB,EAAQxqB,qBAFJ,CAGf,CAEA,kBAAAA,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBwrB,GAA2B90B,WAAWd,MAC/BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKg5B,0BAA0Bl3B,EAAK,EACxC,CAMA,UAAIm2B,GACA,IAAI5nB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKk5B,gCAAgC/1B,KAAKoK,WAGtD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,UAAI2nB,CAAOzzB,GACP,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAKwQ,kCAAkCrN,KAAKoK,UAAWO,EAAMG,EACjE,CAMA,aAAIkY,GACA,IAAI9V,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKm5B,mCAAmCh2B,KAAKoK,WAGzD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,aAAI6V,CAAU3hB,GACV,MAAMsJ,EAAOpM,EAAkB8C,EAAMxE,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACbL,EAAK2Q,6CAA6CxN,KAAKoK,UAAWO,EAAMG,EAC5E,CAKA,2BAAImrB,GAEA,OAAe,IADHp5B,EAAKq5B,iDAAiDl2B,KAAKoK,UAE3E,CAKA,2BAAI6rB,CAAwB50B,GACxBxE,EAAKs5B,iDAAiDn2B,KAAKoK,UAAW/I,EAC1E,CAKA,gBAAI+0B,GAEA,OADYv5B,EAAKw5B,sCAAsCr2B,KAAKoK,UAEhE,CAKA,gBAAIgsB,CAAa/0B,GACbxE,EAAKy5B,sCAAsCt2B,KAAKoK,UAAW/I,EAC/D,CAKA,eAAIk1B,GAEA,OADY15B,EAAK25B,qCAAqCx2B,KAAKoK,UAE/D,CAKA,eAAImsB,CAAYl1B,GACZxE,EAAK45B,qCAAqCz2B,KAAKoK,UAAW/I,EAC9D,CAIA,WAAA+N,GACI,MAAMlL,EAAMrH,EAAK65B,qBAGjB,OAFA12B,KAAKoK,UAAYlG,IAAQ,EACzB0xB,GAA2B/0B,SAASb,KAAMA,KAAKoK,UAAWpK,MACnDA,IACX,EAGJ,MAAM22B,GAA0E,oBAAzB/1B,qBACjD,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+5B,sCAAsCj4B,IAAQ,EAAG,KAIrF,MAAMk4B,GAET,aAAOzyB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2sB,GAA2B1sB,WAGrD,OAFA3K,EAAI4K,UAAYzL,EAChBg4B,GAAuC91B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7DA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBusB,GAAuC71B,WAAWd,MAC3CrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+5B,sCAAsCj4B,EAAK,EACpD,CAOA,QAAI+kB,GAEA,OADY7mB,EAAKi6B,0CAA0C92B,KAAKoK,UAEpE,CAKA,WAAAgF,CAAYsU,GACR,MAAMxf,EAAMrH,EAAKk6B,+BAA+BrT,GAGhD,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzByyB,GAAuC91B,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/DA,IACX,EAGJ,MAAMg3B,GAAkD,oBAAzBp2B,qBACzB,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKo6B,cAAct4B,IAAQ,EAAG,KAI7D,MAAMu4B,GAET,aAAO9yB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOgtB,GAAG/sB,WAG7B,OAFA3K,EAAI4K,UAAYzL,EAChBq4B,GAAen2B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACrCA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB4sB,GAAel2B,WAAWd,MACnBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKo6B,cAAct4B,EAAK,EAC5B,CAOA,KAAAoC,GAEI,OADYlE,EAAKs6B,SAASn3B,KAAKoK,UAEnC,CASA,cAAAgtB,GAEI,OAAe,IADHv6B,EAAKw6B,kBAAkBr3B,KAAKoK,UAE5C,CAKA,gBAAAktB,GAEI,OAAe,IADHz6B,EAAK06B,oBAAoBv3B,KAAKoK,UAE9C,CAKA,UAAIwD,GACA,MAAM1J,EAAMrH,EAAK26B,UAAUx3B,KAAKoK,WAChC,OAAO0D,GAAO1J,OAAOF,EACzB,CAMA,eAAIuzB,GACA,MAAMvzB,EAAMrH,EAAK66B,eAAe13B,KAAKoK,WACrC,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,iBAAIyzB,GACA,MAAMzzB,EAAMrH,EAAK+6B,iBAAiB53B,KAAKoK,WACvC,OAAO8D,GAAS9J,OAAOF,EAC3B,CAKA,SAAA2zB,GAEI,OAAe,IADHh7B,EAAKi7B,aAAa93B,KAAKoK,UAEvC,CAMA,UAAA2tB,GACI,MAAM7zB,EAAMrH,EAAKm7B,cAAch4B,KAAKoK,WACpC,OAAe,IAARlG,OAAYxF,EAAY8Q,GAAWpL,OAAOF,EACrD,CAKA,MAAA+zB,GAEI,OAAe,IADHp7B,EAAKq7B,UAAUl4B,KAAKoK,UAEpC,CAKA,WAAA+tB,GAEI,OAAe,IADHt7B,EAAKu7B,eAAep4B,KAAKoK,UAEzC,CAKA,kBAAAiuB,GAEI,OAAe,IADHx7B,EAAKy7B,sBAAsBt4B,KAAKoK,UAEhD,CAMA,YAAAmuB,GAEI,OAAe,IADH17B,EAAK27B,gBAAgBx4B,KAAKoK,UAE1C,CAMA,UAAIquB,GACA,IAAIvrB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK67B,UAAU14B,KAAKoK,WAGhC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,UAAI0V,GACA,MAAM3e,EAAMrH,EAAK87B,UAAU34B,KAAKoK,WAChC,OAAe,IAARlG,OAAYxF,EAAYqkB,GAAO3e,OAAOF,EACjD,CAcA,QAAA00B,GACI,MAAM10B,EAAMrH,EAAKg8B,YAAY74B,KAAKoK,WAClC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAO40B,GAAO10B,OAAOF,EAAI,GAC7B,CASA,OAAA60B,GACI,MAAM70B,EAAMrH,EAAKm8B,WAAWh5B,KAAKoK,WACjC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CASA,WAAA+0B,GACI,MAAM/0B,EAAMrH,EAAKq8B,eAAel5B,KAAKoK,WACrC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAQA,eAAAi1B,GACI,MAAMj1B,EAAMrH,EAAKu8B,mBAAmBp5B,KAAKoK,WACzC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAQA,MAAAm1B,GACI,MAAMn1B,EAAMrH,EAAKy8B,UAAUt5B,KAAKoK,WAChC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAWA,cAAAq1B,CAAev6B,GACX,MAAM2L,EAAOpM,EAAkBS,EAAMnC,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACPgH,EAAMrH,EAAK28B,kBAAkBx5B,KAAKoK,UAAWO,EAAMG,GACzD,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAQA,uBAAAu1B,CAAwBlJ,GACpB1zB,EAAK68B,2BAA2B15B,KAAKoK,UAAWmmB,EACpD,EAGJ,MAAMoJ,GAAsD,oBAAzB/4B,qBAC7B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+8B,kBAAkBj7B,IAAQ,EAAG,KAIjE,MAAMm6B,GAET,aAAO10B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO4uB,GAAO3uB,WAGjC,OAFA3K,EAAI4K,UAAYzL,EAChBg7B,GAAmB94B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzCA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBuvB,GAAmB74B,WAAWd,MACvBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+8B,kBAAkBj7B,EAAK,EAChC,CAMA,gBAAAk7B,GACI,MAAM31B,EAAMrH,EAAKi9B,wBAAwB95B,KAAKoK,WAC9C,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,EAGJ,MAAM61B,GAA0D,oBAAzBn5B,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKm9B,sBAAsBr7B,IAAQ,EAAG,KAOrE,MAAMs7B,GAET,aAAO71B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+vB,GAAW9vB,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChBo7B,GAAuBl5B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2vB,GAAuBj5B,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKm9B,sBAAsBr7B,EAAK,EACpC,CAgBA,WAAAyQ,CAAY6N,EAAYid,EAAgBC,GACpCl3B,EAAaga,EAAY1J,IACzB,IAAI5I,EAAOsS,EAAW5S,qBACtB,MAAMsB,EAAOpN,EAAkB27B,EAAgBr9B,EAAK+N,kBAAmB/N,EAAKgO,oBACtEe,EAAO1O,EACb,IAAI2O,EAAOpL,EAAW05B,GAAe,EAAI57B,EAAkB47B,EAAat9B,EAAK+N,kBAAmB/N,EAAKgO,oBACjGiB,EAAO5O,EACX,MAAMgH,EAAMrH,EAAKu9B,eAAezvB,EAAMgB,EAAMC,EAAMC,EAAMC,GACxD,GAAI5H,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5B61B,GAAuBl5B,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/CA,IACX,CAQA,gBAAOq6B,CAAUC,GACb,MAAM3vB,EAAO9H,EAAkBy3B,EAAOz9B,EAAK+N,mBACrCE,EAAO5N,EACPgH,EAAMrH,EAAK09B,qBAAqB5vB,EAAMG,GAC5C,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAO+1B,GAAW71B,OAAOF,EAAI,GACjC,CAQA,OAAA60B,GACI,MAAM70B,EAAMrH,EAAK29B,mBAAmBx6B,KAAKoK,WACzC,IAAIuC,EAAKvJ,EAAoBc,EAAI,GAAIA,EAAI,IAAIhF,QAE7C,OADArC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,GAClCyI,CACX,CAOA,iBAAOlC,CAAWuc,GACd,MAAMrc,EAAOpM,EAAkByoB,EAAMnqB,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACPgH,EAAMrH,EAAK49B,sBAAsB9vB,EAAMG,GAC7C,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAO+1B,GAAW71B,OAAOF,EAAI,GACjC,CASA,QAAA8G,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK69B,oBAAoB16B,KAAKoK,WAG1C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAUA,aAAIwtB,GACA,MAAMz2B,EAAMrH,EAAK+9B,qBAAqB56B,KAAKoK,WAC3C,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAMA,iBAAI22B,GACA,IAAI3tB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKi+B,yBAAyB96B,KAAKoK,WAG/C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CASA,cAAIsU,GACA,MAAMvd,EAAMrH,EAAKk+B,sBAAsB/6B,KAAKoK,WAC5C,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,QAAIquB,GAEA,OADYn+B,EAAKo+B,gBAAgBj7B,KAAKoK,UAE1C,EAGJ,MAAM8wB,GAA0D,oBAAzBt6B,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKs+B,sBAAsBx8B,IAAQ,EAAG,KAIrE,MAAMy8B,GAET,aAAOh3B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOkxB,GAAWjxB,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChBu8B,GAAuBr6B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB8wB,GAAuBp6B,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKs+B,sBAAsBx8B,EAAK,EACpC,CASA,gBAAO07B,CAAU78B,GACb,MAAM0G,EAAMrH,EAAKw+B,qBAAqB79B,GACtC,GAAI0G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOk3B,GAAWh3B,OAAOF,EAAI,GACjC,EAGJ,MAAMo3B,GAAgE,oBAAzB16B,qBACvC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK0+B,4BAA4B58B,IAAQ,EAAG,KAO3E,MAAM68B,GAET,aAAOp3B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOsxB,GAAiBrxB,WAG3C,OAFA3K,EAAI4K,UAAYzL,EAChB28B,GAA6Bz6B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACnDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBkxB,GAA6Bx6B,WAAWd,MACjCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK0+B,4BAA4B58B,EAAK,EAC1C,CAeA,aAAA88B,CAAc9R,GACV,MAAMhf,EAAOpM,EAAkBorB,EAAkB9sB,EAAK+N,kBAAmB/N,EAAKgO,oBACxEC,EAAO5N,EAEb,OADYL,EAAK6+B,+BAA+B17B,KAAKoK,UAAWO,EAAMG,EAE1E,EAGJ,MAAM6wB,GAAsD,oBAAzB/6B,qBAC7B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK++B,kBAAkBj9B,IAAQ,EAAG,KAMjE,MAAMokB,GAET,aAAO3e,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO6Y,GAAO5Y,WAGjC,OAFA3K,EAAI4K,UAAYzL,EAChBg9B,GAAmB96B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzCA,CACX,CAEA,eAAOo1B,CAASC,GACZ,OAAMA,aAAmB9R,GAGlB8R,EAAQxqB,qBAFJ,CAGf,CAEA,kBAAAA,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBuxB,GAAmB76B,WAAWd,MACvBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK++B,kBAAkBj9B,EAAK,EAChC,CAKA,WAAAyQ,CAAYsL,GACR,MAAM/P,EAAOpM,EAAkBmc,EAAI7d,EAAK+N,kBAAmB/N,EAAKgO,oBAC1DC,EAAO5N,EACPgH,EAAMrH,EAAKg/B,WAAWlxB,EAAMG,GAClC,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5By3B,GAAmB96B,SAASb,KAAMA,KAAKoK,UAAWpK,MAC3CA,IACX,CAKA,QAAAqC,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKi/B,gBAAgB97B,KAAKoK,WAGtC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM4uB,GAA6D,oBAAzBn7B,qBACpC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKm/B,yBAAyBr9B,IAAQ,EAAG,KAIxE,MAAMs9B,GAET,aAAO73B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+xB,GAAc9xB,WAGxC,OAFA3K,EAAI4K,UAAYzL,EAChBo9B,GAA0Bl7B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAChDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2xB,GAA0Bj7B,WAAWd,MAC9BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKm/B,yBAAyBr9B,EAAK,EACvC,CAKA,SAAIu9B,GAEA,OADYr/B,EAAKs/B,8BAA8Bn8B,KAAKoK,UAExD,CAKA,SAAI8xB,CAAM76B,GACNxE,EAAKu/B,8BAA8Bp8B,KAAKoK,UAAW/I,EACvD,CAKA,YAAIm0B,GAEA,OADY34B,EAAKw/B,iCAAiCr8B,KAAKoK,UAE3D,CAKA,YAAIorB,CAASn0B,GACTxE,EAAKy/B,iCAAiCt8B,KAAKoK,UAAW/I,EAC1D,EAGJ,MAAMk7B,GAAmE,oBAAzB37B,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK2/B,+BAA+B79B,IAAQ,EAAG,KAK9E,MAAM89B,GAET,aAAOr4B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOuyB,GAAoBtyB,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChB49B,GAAgC17B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBmyB,GAAgCz7B,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK2/B,+BAA+B79B,EAAK,EAC7C,CAKA,iBAAI+9B,GAEA,OADY7/B,EAAK8/B,4CAA4C38B,KAAKoK,aACnD,CACnB,CAKA,cAAIwyB,GAEA,OADY//B,EAAKggC,yCAAyC78B,KAAKoK,aAChD,CACnB,CASA,IAAA6O,GAEI,OADYpc,EAAKigC,yBAAyB98B,KAAKoK,UAEnD,EAGJ,MAAM2yB,GAA2D,oBAAzBn8B,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmgC,uBAAuBr+B,IAAQ,EAAG,KAItE,MAAMs+B,GAET,aAAO74B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+yB,GAAY9yB,WAGtC,OAFA3K,EAAI4K,UAAYzL,EAChBo+B,GAAwBl8B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC9CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2yB,GAAwBj8B,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmgC,uBAAuBr+B,EAAK,EACrC,CAMA,aAAI8Z,GAEA,OADY5b,EAAKqgC,sBAAsBl9B,KAAKoK,UAEhD,CAKA,UAAIyY,GACA,MAAM3e,EAAMrH,EAAKsgC,mBAAmBn9B,KAAKoK,WACzC,OAAO2Y,GAAO3e,OAAOF,EACzB,CAKA,aAAI8e,GACA,MAAM9e,EAAMrH,EAAKugC,sBAAsBp9B,KAAKoK,WAC5C,OAAOmJ,GAAoBnP,OAAOF,EACtC,CAKA,aAAIgf,GACA,IAAIhW,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKwgC,sBAAsBr9B,KAAKoK,WAG5C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAMmwB,GAAmE,oBAAzB18B,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK0gC,+BAA+B5+B,IAAQ,EAAG,KAI9E,MAAM6+B,GAET,aAAOp5B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOszB,GAAoBrzB,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChB2+B,GAAgCz8B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBkzB,GAAgCx8B,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK0gC,+BAA+B5+B,EAAK,EAC7C,CAKA,UAAIqV,GACA,MAAM9P,EAAMrH,EAAK4gC,2BAA2Bz9B,KAAKoK,WACjD,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,aAAIuU,GAEA,OADY5b,EAAK6gC,8BAA8B19B,KAAKoK,UAExD,CAMA,gBAAIuzB,GACA,IAAIzwB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAK+gC,iCAAiC59B,KAAKoK,WAGvD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,UAAI0V,GACA,MAAM3e,EAAMrH,EAAKghC,2BAA2B79B,KAAKoK,WACjD,OAAO2Y,GAAO3e,OAAOF,EACzB,CAKA,aAAIgf,GACA,IAAIhW,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKihC,8BAA8B99B,KAAKoK,WAGpD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM4wB,GAAkE,oBAAzBn9B,qBACzC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmhC,8BAA8Br/B,IAAQ,EAAG,KAO7E,MAAMs/B,GAET,aAAO75B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO+zB,GAAmB9zB,WAG7C,OAFA3K,EAAI4K,UAAYzL,EAChBo/B,GAA+Bl9B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACrDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB2zB,GAA+Bj9B,WAAWd,MACnCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmhC,8BAA8Br/B,EAAK,EAC5C,CAKA,MAAI+b,GAEA,OADY7d,EAAKqhC,gCAAgCl+B,KAAKoK,UAE1D,CAKA,WAAIogB,GAEA,OADY3tB,EAAKshC,qCAAqCn+B,KAAKoK,UAE/D,CASA,UAAIg0B,GAEA,OADYvhC,EAAKwhC,oCAAoCr+B,KAAKoK,UAE9D,CAKA,cAAIoN,GAEA,OADY3a,EAAKyhC,wCAAwCt+B,KAAKoK,UAElE,CAKA,QAAIsZ,GAEA,OADY7mB,EAAK0hC,kCAAkCv+B,KAAKoK,UAE5D,CASA,WAAAgF,CAAYsL,EAAI8P,EAAS4T,EAAQ5mB,EAAYC,GACzC,MAAMvT,EAAMrH,EAAK2hC,uBAAuB9jB,EAAI8P,EAAS4T,EAAQ5mB,EAAYC,GAGzE,OAFAzX,KAAKoK,UAAYlG,IAAQ,EACzB65B,GAA+Bl9B,SAASb,KAAMA,KAAKoK,UAAWpK,MACvDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAK4hC,wBAAwBz+B,KAAKoK,UAElD,EAGJ,MAAMs0B,GAA4D,oBAAzB99B,qBACnC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK8hC,wBAAwBhgC,IAAQ,EAAG,KAIvE,MAAMizB,GAET,aAAOxtB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO0nB,GAAaznB,WAGvC,OAFA3K,EAAI4K,UAAYzL,EAChB+/B,GAAyB79B,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC/CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBs0B,GAAyB59B,WAAWd,MAC7BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK8hC,wBAAwBhgC,EAAK,EACtC,CAOA,aAAI8Z,GAEA,OADY5b,EAAK+hC,iCAAiC5+B,KAAKoK,UAE3D,CAOA,aAAIqO,CAAUpX,GACVxE,EAAKgiC,iCAAiC7+B,KAAKoK,UAAW/I,EAC1D,CAMA,2BAAIy9B,GAEA,OAAe,IADHjiC,EAAKkiC,+CAA+C/+B,KAAKoK,UAEzE,CAMA,2BAAI00B,CAAwBz9B,GACxBxE,EAAKmiC,+CAA+Ch/B,KAAKoK,UAAW/I,EACxE,CAMA,2BAAI49B,GACA,MAAM/6B,EAAMrH,EAAKqiC,+CAA+Cl/B,KAAKoK,WACrE,OAAkB,IAAXlG,EAAI,QAAWxF,EAAYwF,EAAI,EAC1C,CAMA,2BAAI+6B,CAAwB59B,GACxBxE,EAAKsiC,+CAA+Cn/B,KAAKoK,WAAY3J,EAAWY,GAAOZ,EAAWY,GAAQ,EAAIA,EAClH,CAMA,iCAAI+9B,GACA,MAAMl7B,EAAMrH,EAAKwiC,qDAAqDr/B,KAAKoK,WAC3E,OAAkB,IAAXlG,EAAI,QAAWxF,EAAYwF,EAAI,EAC1C,CAMA,iCAAIk7B,CAA8B/9B,GAC9BxE,EAAKyiC,qDAAqDt/B,KAAKoK,WAAY3J,EAAWY,GAAOZ,EAAWY,GAAQ,EAAIA,EACxH,CAIA,WAAA+N,GACI,MAAMlL,EAAMrH,EAAK0iC,mBAGjB,OAFAv/B,KAAKoK,UAAYlG,IAAQ,EACzBw6B,GAAyB79B,SAASb,KAAMA,KAAKoK,UAAWpK,MACjDA,IACX,EAGJ,MAAMw/B,GAAmD,oBAAzB5+B,qBAC1B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK4iC,eAAe9gC,IAAQ,EAAG,KAI9D,MAAM+gC,GAET,aAAOt7B,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOw1B,GAAIv1B,WAG9B,OAFA3K,EAAI4K,UAAYzL,EAChB6gC,GAAgB3+B,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtCA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBo1B,GAAgB1+B,WAAWd,MACpBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK4iC,eAAe9gC,EAAK,EAC7B,CAKA,UAAIiP,GACA,MAAM1J,EAAMrH,EAAK8iC,WAAW3/B,KAAKoK,WACjC,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,YAAI8J,GACA,MAAM9J,EAAMrH,EAAK+iC,aAAa5/B,KAAKoK,WACnC,OAAO8D,GAAS9J,OAAOF,EAC3B,CAKA,eAAIuzB,GACA,MAAMvzB,EAAMrH,EAAKgjC,gBAAgB7/B,KAAKoK,WACtC,OAAO0D,GAAO1J,OAAOF,EACzB,CAKA,iBAAIyzB,GACA,MAAMzzB,EAAMrH,EAAKijC,kBAAkB9/B,KAAKoK,WACxC,OAAO8D,GAAS9J,OAAOF,EAC3B,CAMA,UAAIu0B,GACA,IAAIvrB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKkjC,WAAW//B,KAAKoK,WAGjC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,UAAI0V,GACA,MAAM3e,EAAMrH,EAAKmjC,WAAWhgC,KAAKoK,WACjC,OAAe,IAARlG,OAAYxF,EAAYqkB,GAAO3e,OAAOF,EACjD,CAMA,aAAA+7B,GAEI,OAAe,IADHpjC,EAAKqjC,kBAAkBlgC,KAAKoK,UAE5C,CAKA,kBAAA+1B,GAEI,OAAe,IADHtjC,EAAKujC,uBAAuBpgC,KAAKoK,UAEjD,CAMA,kBAAAiuB,GAEI,OAAe,IADHx7B,EAAKwjC,uBAAuBrgC,KAAKoK,UAEjD,CAKA,eAAAk2B,GAEI,OAAe,IADHzjC,EAAK0jC,oBAAoBvgC,KAAKoK,UAE9C,CAKA,eAAAo2B,GAEI,OAAe,IADH3jC,EAAK4jC,oBAAoBzgC,KAAKoK,UAE9C,CAMA,UAAA2tB,GACI,MAAM7zB,EAAMrH,EAAK6jC,eAAe1gC,KAAKoK,WACrC,OAAe,IAARlG,OAAYxF,EAAY8Q,GAAWpL,OAAOF,EACrD,CAMA,SAAA2zB,GAEI,OAAe,IADHh7B,EAAK8jC,cAAc3gC,KAAKoK,UAExC,CASA,MAAAw2B,GACI,MAAM18B,EAAMrH,EAAKgkC,WAAW7gC,KAAKoK,WACjC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAYA,OAAA48B,GAEI,OADYjkC,EAAKkkC,YAAY/gC,KAAKoK,UAEtC,CAQA,MAAAivB,GACI,MAAMn1B,EAAMrH,EAAKmkC,WAAWhhC,KAAKoK,WACjC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAWA,cAAAq1B,CAAev6B,GACX,MAAM2L,EAAOpM,EAAkBS,EAAMnC,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACPgH,EAAMrH,EAAKokC,mBAAmBjhC,KAAKoK,UAAWO,EAAMG,GAC1D,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAKA,QAAAg9B,GAEI,OAAe,IADHrkC,EAAKskC,aAAanhC,KAAKoK,UAEvC,CAKA,cAAAg3B,GAEI,OAAe,IADHvkC,EAAKwkC,mBAAmBrhC,KAAKoK,UAE7C,CAKA,MAAA6tB,GAEI,OAAe,IADHp7B,EAAKykC,WAAWthC,KAAKoK,UAErC,CAKA,WAAA+tB,GAEI,OAAe,IADHt7B,EAAK0kC,gBAAgBvhC,KAAKoK,UAE1C,CAQA,KAAAo3B,GACI,MAAMt9B,EAAMrH,EAAK4kC,UAAUzhC,KAAKoK,WAChC,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKlJ,EAAyBS,EAAI,GAAIA,EAAI,IAAIhF,QAC9CrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAWA,UAAA+0B,GACI,MAAMx9B,EAAMrH,EAAK8kC,eAAe3hC,KAAKoK,WACrC,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKvJ,EAAoBc,EAAI,GAAIA,EAAI,IAAIhF,QACzCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CASA,QAAAi1B,GACI,MAAM19B,EAAMrH,EAAKglC,aAAa7hC,KAAKoK,WACnC,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAK5I,EAAqBG,EAAI,GAAIA,EAAI,IAAIhF,QAC1CrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAQA,uBAAA8sB,CAAwBlJ,GACpB1zB,EAAKilC,4BAA4B9hC,KAAKoK,UAAWmmB,EACrD,EAGJ,MAAMwR,GAA6D,oBAAzBnhC,qBACpC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKmlC,yBAAyBrjC,IAAQ,EAAG,KAKxE,MAAM0sB,GAET,aAAOjnB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOmhB,GAAclhB,WAGxC,OAFA3K,EAAI4K,UAAYzL,EAChBojC,GAA0BlhC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAChDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB23B,GAA0BjhC,WAAWd,MAC9BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKmlC,yBAAyBrjC,EAAK,EACvC,CAKA,aAAI2T,GACA,IAAIpF,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKolC,wBAAwBjiC,KAAKoK,WAG9C,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,kBAAIylB,GACA,IAAI1lB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKqlC,6BAA6BliC,KAAKoK,WAGnD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,kBAAIuF,GACA,IAAIxF,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKslC,6BAA6BniC,KAAKoK,WAGnD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,gBAAIi1B,GACA,MAAMl+B,EAAMrH,EAAKwlC,2BAA2BriC,KAAKoK,WACjD,OAAe,IAARlG,OAAYxF,EAAYuO,GAAoB7I,OAAOF,EAC9D,CAKA,OAAAo+B,GACI,MAAMp+B,EAAMrH,EAAK0lC,sBAAsBviC,KAAKoK,WAC5C,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAMA,gBAAOs+B,CAAUC,GACb,MAAMv+B,EAAMrH,EAAK6lC,wBAAwBD,GACzC,GAAIv+B,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOmnB,GAAcjnB,OAAOF,EAAI,GACpC,EAGJ,MAAMy+B,GAA0D,oBAAzB/hC,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+lC,sBAAsBjkC,IAAQ,EAAG,KASrE,MAAMgjB,GAET,aAAOvd,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOyX,GAAWxX,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChBgkC,GAAuB9hC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBu4B,GAAuB7hC,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+lC,sBAAsBjkC,EAAK,EACpC,CAKA,WAAAyQ,CAAYtN,GACR,MAAM6I,EAAOpM,EAAkBuD,EAAMjF,EAAK+N,kBAAmB/N,EAAKgO,oBAC5DC,EAAO5N,EACPgH,EAAMrH,EAAKgmC,eAAel4B,EAAMG,GACtC,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5By+B,GAAuB9hC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/CA,IACX,CAQA,QAAI8iC,GACA,IAAI51B,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKkmC,gBAAgB/iC,KAAKoK,WAGtC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,QAAI61B,GACA,MAAM9+B,EAAMrH,EAAKomC,gBAAgBjjC,KAAKoK,WACtC,OAAe,WAARlG,OAAmBxF,EAAYwF,CAC1C,CAMA,WAAAg/B,GAEI,OAAe,IADHrmC,EAAKsmC,uBAAuBnjC,KAAKoK,UAEjD,EAGJ,MAAMg5B,GAA2D,oBAAzBxiC,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKwmC,uBAAuB1kC,IAAQ,EAAG,KAKtE,MAAMkW,GAET,aAAOzQ,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2K,GAAY1K,WAGtC,OAFA3K,EAAI4K,UAAYzL,EAChBykC,GAAwBviC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC9CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBg5B,GAAwBtiC,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKwmC,uBAAuB1kC,EAAK,EACrC,CAKA,SAAI2kC,GAEA,OADYzmC,EAAK0mC,4BAA4BvjC,KAAKoK,UAEtD,CAKA,SAAIk5B,CAAMjiC,GACNxE,EAAK2mC,4BAA4BxjC,KAAKoK,UAAW/I,EACrD,CAMA,QAAIrC,GACA,MAAMkF,EAAMrH,EAAK4mC,2BAA2BzjC,KAAKoK,WACjD,OAAe,IAARlG,OAAYxF,EAAYwF,CACnC,CAMA,QAAIlF,CAAKqC,GACLxE,EAAK6mC,2BAA2B1jC,KAAKoK,UAAW3J,EAAWY,GAAQ,EAAIA,EAC3E,CAKA,WAAIsB,GACA,MAAMuB,EAAMrH,EAAK8mC,oBAAoB3jC,KAAKoK,WAC1C,IAAIuC,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKpM,EAAmB2D,EAAI,GAAIA,EAAI,IAAIhF,QACxCrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,EAGJ,MAAMi3B,GAAyD,oBAAzBhjC,qBAChC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKgnC,qBAAqBllC,IAAQ,EAAG,KAKpE,MAAMknB,GAET,aAAOzhB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO2b,GAAU1b,WAGpC,OAFA3K,EAAI4K,UAAYzL,EAChBilC,GAAsB/iC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC5CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBw5B,GAAsB9iC,WAAWd,MAC1BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKgnC,qBAAqBllC,EAAK,EACnC,CAKA,WAAIuc,GACA,MAAMhX,EAAMrH,EAAKinC,kBAAkB9jC,KAAKoK,WACxC,OAAe,IAARlG,OAAYxF,EAAYsf,GAAiB5Z,OAAOF,EAC3D,CAKA,QAAA8G,GACI,IAAIkC,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKknC,mBAAmB/jC,KAAKoK,WAGzC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,EAGJ,MAAM62B,GAAsE,oBAAzBpjC,qBAC7C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKonC,kCAAkCtlC,IAAQ,EAAG,KASjF,MAAMuT,GAET,aAAO9N,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOgI,GAAuB/H,WAGjD,OAFA3K,EAAI4K,UAAYzL,EAChBqlC,GAAmCnjC,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB45B,GAAmCljC,WAAWd,MACvCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKonC,kCAAkCtlC,EAAK,EAChD,CAQA,MAAI+b,GAEA,OADY7d,EAAKqnC,oCAAoClkC,KAAKoK,UAE9D,CAOA,QAAIsZ,GAEA,OADY7mB,EAAKsnC,sCAAsCnkC,KAAKoK,UAEhE,CAMA,WAAAgF,CAAYsL,EAAI0pB,GACZ,MAAMlgC,EAAMrH,EAAKwnC,2BAA2B3pB,EAAI0pB,GAGhD,OAFApkC,KAAKoK,UAAYlG,IAAQ,EACzB8/B,GAAmCnjC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC3DA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKynC,4BAA4BtkC,KAAKoK,UAEtD,EAGJ,MAAMm6B,GAAqE,oBAAzB3jC,qBAC5C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK2nC,iCAAiC7lC,IAAQ,EAAG,KAIhF,MAAM8lC,GAET,aAAOrgC,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOu6B,GAAsBt6B,WAGhD,OAFA3K,EAAI4K,UAAYzL,EAChB4lC,GAAkC1jC,SAASrB,EAAKA,EAAI4K,UAAW5K,GACxDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBm6B,GAAkCzjC,WAAWd,MACtCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK2nC,iCAAiC7lC,EAAK,EAC/C,CAMA,eAAI+lC,GAEA,OADY7nC,EAAK8nC,kCAAkC3kC,KAAKoK,UAE5D,CAMA,aAAIw6B,GAEA,OADY/nC,EAAKgoC,gCAAgC7kC,KAAKoK,UAE1D,CAYA,OAAA06B,GAEI,OAAe,IADHjoC,EAAKkoC,8BAA8B/kC,KAAKoK,UAExD,EAGJ,MAAM46B,GAA0D,oBAAzBpkC,qBACjC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKooC,sBAAsBtmC,IAAQ,EAAG,KAIrE,MAAM4a,GAET,aAAOnV,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqP,GAAWpP,WAGrC,OAFA3K,EAAI4K,UAAYzL,EAChBqmC,GAAuBnkC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC7CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB46B,GAAuBlkC,WAAWd,MAC3BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKooC,sBAAsBtmC,EAAK,EACpC,CAIA,WAAAyQ,GACI,MAAMlL,EAAMrH,EAAKqoC,iBAGjB,OAFAllC,KAAKoK,UAAYlG,IAAQ,EACzB8gC,GAAuBnkC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC/CA,IACX,CASA,YAAAmlC,CAAaC,EAAQC,EAAQpnB,GACzBhb,EAAamiC,EAAQt3B,IACrB7K,EAAaoiC,EAAQvpB,IACrB7Y,EAAagb,EAAWD,IACxB,MAAM9Z,EAAMrH,EAAKyoC,wBAAwBtlC,KAAKoK,UAAWg7B,EAAOh7B,UAAWi7B,EAAOj7B,UAAW6T,EAAU7T,WACvG,OAAe,IAARlG,OAAYxF,EAAY6mB,GAAenhB,OAAOF,EACzD,CAQA,YAAAqhC,CAAaH,EAAQC,GACjBpiC,EAAamiC,EAAQt3B,IACrB7K,EAAaoiC,EAAQvpB,IACrB,MAAM5X,EAAMrH,EAAK2oC,wBAAwBxlC,KAAKoK,UAAWg7B,EAAOh7B,UAAWi7B,EAAOj7B,WAClF,OAAe,IAARlG,OAAYxF,EAAYsf,GAAiB5Z,OAAOF,EAC3D,CAMA,GAAA1H,CAAI4oC,GACAniC,EAAamiC,EAAQt3B,IAErB,OADYjR,EAAK4oC,eAAezlC,KAAKoK,UAAWg7B,EAAOh7B,UAE3D,CAIA,KAAAs7B,GACI7oC,EAAK8oC,iBAAiB3lC,KAAKoK,UAC/B,CAMA,OAAAqS,GAEI,OAAe,IADH5f,EAAK+oC,mBAAmB5lC,KAAKoK,UAE7C,CAKA,SAAIy7B,GAEA,OADYhpC,EAAKipC,iBAAiB9lC,KAAKoK,aACxB,CACnB,CAKA,MAAA27B,GACI,MAAM7hC,EAAMrH,EAAKmpC,kBAAkBhmC,KAAKoK,WACxC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,EAGJ,MAAM+hC,GAA2D,oBAAzBrlC,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKqpC,uBAAuBvnC,IAAQ,EAAG,KAQtE,MAAMwoB,GAET,aAAO/iB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOid,GAAYhd,WAGtC,OAFA3K,EAAI4K,UAAYzL,EAChBsnC,GAAwBplC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC9CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB67B,GAAwBnlC,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKqpC,uBAAuBvnC,EAAK,EACrC,CAqBA,WAAOwnC,CAAKne,EAAYC,GACpB,IAAItd,EAAOlK,EAAWunB,GAAc,EAAIzpB,EAAkBypB,EAAYnrB,EAAK+N,kBAAmB/N,EAAKgO,oBAC/FC,EAAO5N,EACPyO,EAAOlL,EAAWwnB,GAAoB,EAAI1pB,EAAkB0pB,EAAkBprB,EAAK+N,kBAAmB/N,EAAKgO,oBAC3Ge,EAAO1O,EAEX,OADYL,EAAKupC,iBAAiBz7B,EAAMG,EAAMa,EAAMC,EAExD,CAgBA,kBAAOy6B,CAAYre,EAAYse,GAC3B,MAAM37B,EAAOpM,EAAkBypB,EAAYnrB,EAAK+N,kBAAmB/N,EAAKgO,oBAClEC,EAAO5N,EACPyO,EAAO9I,EAAkByjC,EAAWzpC,EAAK+N,mBACzCgB,EAAO1O,EAEb,OADYL,EAAK0pC,wBAAwB57B,EAAMG,EAAMa,EAAMC,EAE/D,EAGJ,MAAM46B,GAA+D,oBAAzB5lC,qBACtC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK4pC,2BAA2B9nC,IAAQ,EAAG,KAS1E,MAAM+nC,GAET,aAAOtiC,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOw8B,GAAgBv8B,WAG1C,OAFA3K,EAAI4K,UAAYzL,EAChB6nC,GAA4B3lC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAClDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBo8B,GAA4B1lC,WAAWd,MAChCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK4pC,2BAA2B9nC,EAAK,EACzC,CAQA,MAAI+b,GAEA,OADY7d,EAAK8pC,6BAA6B3mC,KAAKoK,UAEvD,CAKA,cAAIoN,GAEA,OADY3a,EAAK+pC,qCAAqC5mC,KAAKoK,UAE/D,CAMA,UAAIg0B,GAEA,OADYvhC,EAAKgqC,iCAAiC7mC,KAAKoK,UAE3D,CAOA,QAAIsZ,GAEA,OADY7mB,EAAKiqC,+BAA+B9mC,KAAKoK,UAEzD,CAQA,WAAAgF,CAAYsL,EAAIlD,EAAY4mB,EAAQ1a,GAChC,MAAMxf,EAAMrH,EAAKkqC,oBAAoBrsB,EAAIlD,EAAY4mB,EAAQ1a,GAG7D,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzBsiC,GAA4B3lC,SAASb,KAAMA,KAAKoK,UAAWpK,MACpDA,IACX,CAKA,QAAI4B,GAEA,OADY/E,EAAKmqC,qBAAqBhnC,KAAKoK,UAE/C,EAGJ,MAAM68B,GAAuD,oBAAzBrmC,qBAC9B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKqqC,mBAAmBvoC,IAAQ,EAAG,KAIlE,MAAMwoC,GAET,kBAAA98B,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB68B,GAAoBnmC,WAAWd,MACxBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKqqC,mBAAmBvoC,EAAK,EACjC,CAOA,kBAAOyoC,GAEH,OAAe,IADHvqC,EAAKwqC,qBAErB,CAKA,WAAAj4B,CAAYk4B,GACR,MAAMpjC,EAAMrH,EAAK0qC,YAAYD,GAC7B,GAAIpjC,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5B+iC,GAAoBpmC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC5CA,IACX,CAKA,YAAIwnC,CAASF,GACT,MAAMpjC,EAAMrH,EAAK4qC,qBAAqBznC,KAAKoK,UAAWk9B,GACtD,GAAIpjC,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,GAE1C,CAKA,MAAAwjC,GACI,MAAMxjC,EAAMrH,EAAK8qC,eAAe3nC,KAAKoK,WACrC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,GAE1C,CAIA,OAAA0jC,GACI,MAAM1jC,EAAMrH,EAAKgrC,gBAAgB7nC,KAAKoK,WACtC,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,GAE1C,EAGJ,MAAM4jC,GAAwE,oBAAzBlnC,qBAC/C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKkrC,oCAAoCppC,IAAQ,EAAG,KAOnF,MAAMoT,GAET,aAAO3N,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO6H,GAAyB5H,WAGnD,OAFA3K,EAAI4K,UAAYzL,EAChBmpC,GAAqCjnC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC3DA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB09B,GAAqChnC,WAAWd,MACzCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKkrC,oCAAoCppC,EAAK,EAClD,CAQA,QAAI+kB,GAEA,OADY7mB,EAAKmrC,wCAAwChoC,KAAKoK,UAElE,CAKA,WAAAgF,CAAYsU,GACR,MAAMxf,EAAMrH,EAAKorC,6BAA6BvkB,GAG9C,OAFA1jB,KAAKoK,UAAYlG,IAAQ,EACzB4jC,GAAqCjnC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC7DA,IACX,EAGJ,MAAMkoC,GAA2D,oBAAzBtnC,qBAClC,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKsrC,uBAAuBxpC,IAAQ,EAAG,KAItE,MAAMypC,GAET,aAAOhkC,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOk+B,GAAYj+B,WAGtC,OAFA3K,EAAI4K,UAAYzL,EAChBupC,GAAwBrnC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC9CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB89B,GAAwBpnC,WAAWd,MAC5BrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKsrC,uBAAuBxpC,EAAK,EACrC,CAMA,GAAAnC,CAAIga,GACAvT,EAAauT,EAAWtI,IACxB,MAAMhK,EAAMrH,EAAKwrC,gBAAgBroC,KAAKoK,UAAWoM,EAAUpM,WAC3D,OAAe,IAARlG,OAAYxF,EAAYyY,GAAO/S,OAAOF,EACjD,CASA,aAAAokC,GAEI,OAAe,IADHzrC,EAAK0rC,0BAA0BvoC,KAAKoK,UAEpD,CAKA,IAAA6O,GAEI,OADYpc,EAAK2rC,iBAAiBxoC,KAAKoK,UAE3C,CAKA,OAAAq+B,GAEI,OADY5rC,EAAK6rC,oBAAoB1oC,KAAKoK,UAE9C,EAGJ,MAAMu+B,GAAsD,oBAAzB/nC,qBAC7B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAK+rC,kBAAkBjqC,IAAQ,EAAG,KAMjE,MAAMmP,GAET,aAAO1J,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO4D,GAAO3D,WAGjC,OAFA3K,EAAI4K,UAAYzL,EAChBgqC,GAAmB9nC,SAASrB,EAAKA,EAAI4K,UAAW5K,GACzCA,CACX,CAEA,eAAOo1B,CAASC,GACZ,OAAMA,aAAmB/mB,GAGlB+mB,EAAQxqB,qBAFJ,CAGf,CAEA,kBAAAA,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBu+B,GAAmB7nC,WAAWd,MACvBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAK+rC,kBAAkBjqC,EAAK,EAChC,CAKA,WAAAyQ,CAAYsL,GACR,MAAM/P,EAAOpM,EAAkBmc,EAAI7d,EAAK+N,kBAAmB/N,EAAKgO,oBAC1DC,EAAO5N,EACPgH,EAAMrH,EAAKgsC,WAAWl+B,EAAMG,GAClC,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAItC,OAFAlE,KAAKoK,UAAYlG,EAAI,KAAO,EAC5BykC,GAAmB9nC,SAASb,KAAMA,KAAKoK,UAAWpK,MAC3CA,IACX,CAKA,aAAIuhB,GACA,IAAIrU,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKisC,iBAAiB9oC,KAAKoK,WAGvC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAKA,cAAIsU,GACA,MAAMvd,EAAMrH,EAAKksC,kBAAkB/oC,KAAKoK,WACxC,OAAOuX,GAAWvd,OAAOF,EAC7B,CASA,YAAA8kC,GAEI,OAAe,IADHnsC,EAAKosC,oBAAoBjpC,KAAKoK,UAE9C,CAKA,QAAA/H,GACI,IAAI6K,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKqsC,gBAAgBlpC,KAAKoK,WAGtC,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAQA,KAAAg8B,GACI,MAAMjlC,EAAMrH,EAAKusC,aAAappC,KAAKoK,WACnC,OAAO0D,GAAO1J,OAAOF,EACzB,EAGJ,MAAMmlC,GAAmE,oBAAzBzoC,qBAC1C,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKysC,+BAA+B3qC,IAAQ,EAAG,KAW9E,MAAM4uB,GAET,aAAOnpB,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAOqjB,GAAoBpjB,WAG9C,OAFA3K,EAAI4K,UAAYzL,EAChB0qC,GAAgCxoC,SAASrB,EAAKA,EAAI4K,UAAW5K,GACtDA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjBi/B,GAAgCvoC,WAAWd,MACpCrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKysC,+BAA+B3qC,EAAK,EAC7C,CAYA,cAAO4qC,CAAQC,EAAaC,EAAeC,EAAeryB,GACtD,IAAIyJ,EACAC,EACJ,IACI9d,EAAaumC,EAAa17B,IAC1B7K,EAAawmC,EAAev7B,IAC5BjL,EAAaymC,EAAe57B,IAC5B,IAAInD,EAAOlK,EAAW4W,GAAW,EAAIhU,EAAwBgU,EAASxa,EAAK+N,mBACvEE,EAAO5N,EACX,MAAMgH,EAAMrH,EAAK8sC,4BAA4BH,EAAYp/B,UAAWq/B,EAAcr/B,UAAWs/B,EAAct/B,UAAWO,EAAMG,GAC5H,IAAIe,EAAO3H,EAAI,GACX4H,EAAO5H,EAAI,GACf,GAAIA,EAAI,GAEJ,MADA2H,EAAO,EAAGC,EAAO,EACXhJ,EAAwBoB,EAAI,IAItC,OAFA4c,EAAcjV,EACdkV,EAAcjV,EACPvL,EAAmBsL,EAAMC,EACpC,CAAE,QACEjP,EAAKqP,gBAAgB4U,EAAaC,EAAa,EACnD,CACJ,CAKA,aAAI6oB,GACA,MAAM1lC,EAAMrH,EAAKgtC,8BAA8B7pC,KAAKoK,WACpD,OAAO0D,GAAO1J,OAAOF,EACzB,CAMA,eAAIuzB,GACA,MAAMvzB,EAAMrH,EAAKitC,gCAAgC9pC,KAAKoK,WACtD,OAAO0D,GAAO1J,OAAOF,EACzB,CAMA,iBAAIyzB,GACA,MAAMzzB,EAAMrH,EAAKktC,kCAAkC/pC,KAAKoK,WACxD,OAAe,IAARlG,OAAYxF,EAAYwP,GAAS9J,OAAOF,EACnD,CAMA,UAAI2e,GACA,MAAM3e,EAAMrH,EAAKmtC,2BAA2BhqC,KAAKoK,WACjD,OAAe,IAARlG,OAAYxF,EAAYqkB,GAAO3e,OAAOF,EACjD,CAMA,cAAI6zB,GACA,MAAM7zB,EAAMrH,EAAKotC,+BAA+BjqC,KAAKoK,WACrD,OAAe,IAARlG,OAAYxF,EAAY8Q,GAAWpL,OAAOF,EACrD,CAKA,SAAAgmC,GAEI,OAAe,IADHrtC,EAAKstC,8BAA8BnqC,KAAKoK,UAExD,CAKA,OAAAggC,GAEI,OAAe,IADHvtC,EAAKwtC,4BAA4BrqC,KAAKoK,UAEtD,CAKA,QAAA82B,GAEI,OAAe,IADHrkC,EAAKytC,6BAA6BtqC,KAAKoK,UAEvD,CAQA,mBAAAmgC,GAEI,OADY1tC,EAAK2tC,wCAAwCxqC,KAAKoK,UAElE,CAaA,yBAAIqgC,GACA,MAAMvmC,EAAMrH,EAAK6tC,0CAA0C1qC,KAAKoK,WAChE,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,IAAIyI,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKlJ,EAAyBS,EAAI,GAAIA,EAAI,IAAIhF,QAC9CrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAQA,uBAAIg+B,GACA,MAAMzmC,EAAMrH,EAAK+tC,wCAAwC5qC,KAAKoK,WAC9D,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,IAAIyI,EAKJ,OAJe,IAAXzI,EAAI,KACJyI,EAAKlJ,EAAyBS,EAAI,GAAIA,EAAI,IAAIhF,QAC9CrC,EAAKqP,gBAAgBhI,EAAI,GAAa,EAATA,EAAI,GAAQ,IAEtCyI,CACX,CAKA,UAAI8rB,GACA,IAAIvrB,EACAC,EACJ,IACI,MAAMjJ,EAAMrH,EAAKguC,2BAA2B7qC,KAAKoK,WAGjD,OAFA8C,EAAchJ,EAAI,GAClBiJ,EAAcjJ,EAAI,GACX3D,EAAmB2D,EAAI,GAAIA,EAAI,GAC1C,CAAE,QACErH,EAAKqP,gBAAgBgB,EAAaC,EAAa,EACnD,CACJ,CAMA,kBAAAkrB,GAEI,OAAe,IADHx7B,EAAKiuC,uCAAuC9qC,KAAKoK,UAEjE,CAKA,SAAAytB,GAEI,OAAe,IADHh7B,EAAKkuC,8BAA8B/qC,KAAKoK,UAExD,CAMA,MAAA6tB,GAEI,OAAe,IADHp7B,EAAKmuC,2BAA2BhrC,KAAKoK,UAErD,CAOA,KAAA6gC,GAEI,OADYpuC,EAAKquC,0BAA0BlrC,KAAKoK,UAEpD,CASA,eAAA8iB,GAEI,OADYrwB,EAAKsuC,oCAAoCnrC,KAAKoK,UAE9D,CAQA,uBAAAqvB,CAAwBlJ,GACpB1zB,EAAKuuC,4CAA4CprC,KAAKoK,UAAWmmB,EACrE,CAMA,WAAA4H,GAEI,OAAe,IADHt7B,EAAKwuC,gCAAgCrrC,KAAKoK,UAE1D,CAaA,iBAAAkhC,CAAkBj0B,GACd,MAAM1M,EAAOtH,EAAwBgU,EAASxa,EAAK+N,mBAC7CE,EAAO5N,EACPgH,EAAMrH,EAAK0uC,sCAAsCvrC,KAAKoK,UAAWO,EAAMG,GAC7E,GAAI5G,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAkBA,MAAA08B,GACI,MAAM18B,EAAMrH,EAAK2uC,2BAA2BxrC,KAAKoK,WACjD,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAQA,MAAAm1B,GACI,MAAMn1B,EAAMrH,EAAK4uC,2BAA2BzrC,KAAKoK,WACjD,GAAIlG,EAAI,GACJ,MAAMpB,EAAwBoB,EAAI,IAEtC,OAAOpB,EAAwBoB,EAAI,GACvC,CAOA,QAAAwnC,GAEI,OADY7uC,EAAK8uC,6BAA6B3rC,KAAKoK,UAEvD,CAQA,cAAAwhC,GAEI,OADY/uC,EAAKgvC,mCAAmC7rC,KAAKoK,UAE7D,CAOA,UAAA0hC,CAAW9kB,GACP/jB,EAAa+jB,EAAMoU,IAEnB,OADYv+B,EAAKkvC,+BAA+B/rC,KAAKoK,UAAW4c,EAAK5c,UAEzE,EAGJ,MAAM4hC,GAAwD,oBAAzBprC,qBAC/B,CAAEC,SAAU,OAAUC,WAAY,QAClC,IAAIF,sBAAqBjC,GAAO9B,EAAKovC,oBAAoBttC,IAAQ,EAAG,KAInE,MAAMwF,GAET,aAAOC,CAAOzF,GACVA,KAAc,EACd,MAAMa,EAAMyF,OAAOiF,OAAO/F,GAASgG,WAGnC,OAFA3K,EAAI4K,UAAYzL,EAChBqtC,GAAqBnrC,SAASrB,EAAKA,EAAI4K,UAAW5K,GAC3CA,CACX,CAEA,kBAAA6K,GACI,MAAM1L,EAAMqB,KAAKoK,UAGjB,OAFApK,KAAKoK,UAAY,EACjB4hC,GAAqBlrC,WAAWd,MACzBrB,CACX,CAEA,IAAA2L,GACI,MAAM3L,EAAMqB,KAAKqK,qBACjBxN,EAAKovC,oBAAoBttC,EAAK,EAClC,CAKA,aAAIutC,GAEA,OADYrvC,EAAKsvC,6BAA6BnsC,KAAKoK,UAEvD,CAKA,qBAAIgiC,GAEA,OADYvvC,EAAKwvC,qCAAqCrsC,KAAKoK,UAE/D,CAKA,WAAIkiC,GAEA,OADYzvC,EAAK0vC,2BAA2BvsC,KAAKoK,UAErD,CAMA,mBAAIoiC,GAEA,OADY3vC,EAAK4vC,mCAAmCzsC,KAAKoK,UAE7D,EAGG,SAASsiC,GAA8BrrC,EAAMC,GAChD,MACMqK,EAAOpN,EADDouC,OAAOrrC,GACiBzE,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASkhC,GAA8BxrC,EAAMC,GAChD,MACMqK,EAAOpN,EADDouC,OAAOrrC,GACiBzE,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASmhC,GAA8BzrC,GAE1C,OADYA,EAAK0rC,MAErB,CAEO,SAASC,GAAyC3rC,GAErD,OADYA,EAAK4rC,iBAErB,CAEO,SAASC,GAA2B7rC,EAAMC,GAE7C,OADYD,EAAKkC,IAAIjC,EAEzB,CAEO,SAAS6rC,KAA+B,OAAOvtC,GAAY,SAAUyB,EAAMC,EAAMgD,GAEpF,OADYjD,EAAKkC,IAAIjC,EAAMgD,EAE/B,GAAG8oC,UAAW,CAEP,SAASC,GAA0BhsC,EAAMC,GAE5C,OADYD,EAAKisC,GAAGhsC,EAExB,CAEO,SAASisC,GAAqBlsC,GAEjC,OADYgL,EAAWjI,OAAO/C,EAElC,CAEO,SAASmsC,KAAiC,OAAO5tC,GAAY,SAAUyB,EAAMC,GAEhF,OADYmsC,YAAYC,MAAMrsC,EAAMC,EAExC,GAAG8rC,UAAW,CAEP,SAASO,KAAiC,OAAO/tC,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,GAE5F,OADYH,YAAYC,MAAMrsC,EAAMC,EAAe,IAATgD,EAAqB,IAATspC,EAE1D,GAAGR,UAAW,CAEP,SAASS,GAA8BxsC,GAE1C,OADYA,EAAK7D,MAErB,CAEO,SAASswC,KAAgC,OAAOluC,GAAY,SAAUyB,EAAMC,GAE/E,OADYD,EAAKiB,KAAKhB,EAE1B,GAAG8rC,UAAW,CAEP,SAASW,KAAgC,OAAOnuC,GAAY,SAAUyB,EAAMC,EAAMgD,GAErF,OADYjD,EAAKiB,KAAKhB,EAAMgD,EAEhC,GAAG8oC,UAAW,CAEP,SAASY,KAAgC,OAAOpuC,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,GAE3F,OADYvsC,EAAKiB,KAAKhB,EAAMgD,EAAMspC,EAEtC,GAAGR,UAAW,CAEP,SAASa,KAAgC,OAAOruC,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,EAAMM,GAEjG,OADY7sC,EAAKiB,KAAKhB,EAAMgD,EAAMspC,EAAMM,EAE5C,GAAGd,UAAW,CAEP,SAASe,GAAoC9sC,GAEhD,OADY+sC,aAAa/sC,EAE7B,CAEO,SAASgtC,KAAiC,OAAOzuC,GAAY,SAAUyB,GAE1E,OADYA,EAAKqkC,OAErB,GAAG0H,UAAW,CAEP,SAASkB,GAA6BjtC,GACzCA,EAAK2wB,OACT,CAEO,SAASuc,GAA4BltC,GAExC,OADYA,EAAKrC,IAErB,CAEO,SAASwvC,KAAoC,OAAO5uC,GAAY,SAAUyB,GAC7EA,EAAKotC,UACT,GAAGrB,UAAW,CAEP,SAASsB,KAAiC,OAAO9uC,GAAY,SAAUyB,GAE1E,OADYA,EAAKwkC,OAErB,GAAGuH,UAAW,CAEP,SAASuB,KAAiC,OAAO/uC,GAAY,SAAUyB,GAE1E,OADYA,EAAKwkC,OAErB,GAAGuH,UAAW,CAEP,SAASwB,KAAuC,OAAOhvC,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,EAAMM,GAExG,OADY7sC,EAAKwtC,YAAYtuC,EAAmBe,EAAMgD,GAAOspC,EAAMM,EAEvE,GAAGd,UAAW,CAEP,SAAS0B,KAAuC,OAAOlvC,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,GAElG,OADYvsC,EAAKwtC,YAAYtuC,EAAmBe,EAAMgD,GAAOspC,EAEjE,GAAGR,UAAW,CAEP,SAAS2B,KAA6C,OAAOnvC,GAAY,SAAUyB,EAAMC,EAAMgD,GAElG,OADYjD,EAAK2tC,kBAAkBzuC,EAAmBe,EAAMgD,GAEhE,GAAG8oC,UAAW,CAEP,SAAS6B,GAAwC5tC,GAEpD,OADYqQ,GAA8BtN,OAAO/C,EAErD,CAEO,SAAS6tC,GAAgC7tC,GAE5C,OADYgR,GAAsBjO,OAAO/C,EAE7C,CAEO,SAAS8tC,GAA6B9tC,GAEzC,OADYyR,GAAmB1O,OAAO/C,EAE1C,CAEO,SAAS+tC,GAA8B/tC,GAE1C,OADYA,EAAKguC,MAErB,CAEO,SAASC,GAA6BjuC,GACzCkuC,QAAQttC,MAAMZ,EAClB,CAEO,SAASmuC,GAA6BnuC,EAAMC,GAC/CD,EAAKY,MAAMX,EACf,CAEO,SAASmuC,GAA6BpuC,GAEzC,OADYwS,GAAmBzP,OAAO/C,EAE1C,CAEO,SAASquC,GAA2BruC,GAEvC,OADYkU,GAAiBnR,OAAO/C,EAExC,CAEO,SAASsuC,GAA8BtuC,GAE1C,OADYsU,GAAoBvR,OAAO/C,EAE3C,CAEO,SAASuuC,KAA6C,OAAOhwC,GAAY,SAAUyB,EAAMC,EAAMgD,GAClGjD,EAAKwuC,kBAAkBtvC,EAAmBe,EAAMgD,GACpD,GAAG8oC,UAAW,CAEP,SAAS0C,KAAkC,OAAOlwC,GAAY,SAAUyB,EAAMC,GAEjF,OADYD,EAAK0uC,OAAOzuC,EAE5B,GAAG8rC,UAAW,CAEP,SAAS4C,KAAkC,OAAOpwC,GAAY,SAAUyB,GAE3E,OADYA,EAAK0uC,QAErB,GAAG3C,UAAW,CAEP,SAAS6C,GAAiB5uC,GAE7B,OADY8V,GAAO/S,OAAO/C,EAE9B,CAEO,SAAS6uC,GAAmB7uC,GAE/B,OADY6M,GAAS9J,OAAO/C,EAEhC,CAEO,SAAS8uC,GAAoB9uC,GAEhC,OADYsX,GAAUvU,OAAO/C,EAEjC,CAEO,SAAS+uC,GAAsB/uC,GAElC,OADYya,GAAY1X,OAAO/C,EAEnC,CAEO,SAASgvC,GAA4BhvC,GAExC,OADYA,EAAKivC,IAErB,CAEO,SAASC,GAAgBlvC,GAE5B,OADYid,GAAMla,OAAO/C,EAE7B,CAEO,SAASmvC,GAAyBnvC,GAErC,OADYwd,GAAeza,OAAO/C,EAEtC,CAEO,SAASovC,GAA+BpvC,GAE3C,OADY4D,OAAOyrC,QAAQrvC,EAE/B,CAEO,SAASsvC,GAA+BtvC,GAE3C,OADYA,EAAKqvC,SAErB,CAEO,SAASE,GAA6BvvC,GACzCkuC,QAAQsB,MAAMxvC,EAClB,CAEO,SAASyvC,GAA6BzvC,EAAMC,GAC/C,IAAIyvC,EACAC,EACJ,IACID,EAAc1vC,EACd2vC,EAAc1vC,EACdiuC,QAAQsB,MAAMtwC,EAAmBc,EAAMC,GAC3C,CAAE,QACEzE,EAAKqP,gBAAgB6kC,EAAaC,EAAa,EACnD,CACJ,CAEO,SAASC,GAA6B5vC,EAAMC,GAC/CD,EAAKwvC,MAAMvvC,EACf,CAEO,SAAS4vC,KAAiC,OAAOtxC,GAAY,SAAUyB,GAC1E,MAAM6C,EAAM7C,EAAKwvC,MACjB,OAAOpwC,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,GAAGkpC,UAAW,CAEP,SAAS+D,GAA4B9vC,GAExC,OADYU,MAAMqvC,KAAK/vC,EAE3B,CAEO,SAASgwC,KAAsC,OAAOzxC,GAAY,SAAUyB,GAE/E,OADYA,EAAKiwC,YAErB,GAAGlE,UAAW,CAEP,SAASmE,KAAkC,OAAO3xC,GAAY,SAAUyB,GAE3E,OADYA,EAAKmwC,QAErB,GAAGpE,UAAW,CAEP,SAASqE,KAAkC,OAAO7xC,GAAY,SAAUyB,EAAMC,EAAMgD,GAEvF,OADYjD,EAAKmwC,OAAOlwC,EAAMgD,IAAS,EAE3C,GAAG8oC,UAAW,CAEP,SAASsE,KAAkC,OAAO9xC,GAAY,SAAUyB,EAAMC,GAEjF,OADYD,EAAKmwC,OAAOlwC,EAE5B,GAAG8rC,UAAW,CAEP,SAASuE,KAA2C,OAAO/xC,GAAY,SAAUyB,EAAMC,GAC1FD,EAAKuwC,gBAAgBtwC,EACzB,GAAG8rC,UAAW,CAEP,SAASyE,GAA+BxwC,GAE3C,OADYA,EAAKywC,SAErB,CAEO,SAASC,KAA+B,OAAOnyC,GAAY,SAAUyB,EAAMC,GAE9E,OADY0wC,QAAQx1C,IAAI6E,EAAMC,EAElC,GAAG8rC,UAAW,CAEP,SAAS6E,KAA+B,OAAOryC,GAAY,SAAUyB,EAAMC,GAE9E,OADYD,EAAK7E,IAAI8E,EAEzB,GAAG8rC,UAAW,CAEP,SAAS8E,KAA+B,OAAOtyC,GAAY,SAAUyB,EAAMC,GAE9E,OADYD,EAAK7E,IAAI8E,EAEzB,GAAG8rC,UAAW,CAEP,SAAS+E,GAA2B9wC,EAAMC,GAE7C,OADYD,EAAKC,IAAS,EAE9B,CAEO,SAAS8wC,GAAqC/wC,EAAMC,GAEvD,OADYD,EAAKC,EAErB,CAEO,SAAS+wC,GAAqChxC,EAAMC,GAEvD,OADYD,EAAKC,EAErB,CAEO,SAASgxC,GAA8BjxC,GAE1C,OADYA,EAAKkxC,MAErB,CAEO,SAASC,GAA8BnxC,GAE1C,OADYuhB,GAAoBxe,OAAO/C,EAE3C,CAEO,SAASoxC,KAAiC,OAAO7yC,GAAY,SAAUyB,EAAMC,EAAMgD,GAEtF,OADYjD,EAAKqxC,MAAMnyC,EAAmBe,EAAMgD,GAEpD,GAAG8oC,UAAW,CAEP,SAASuF,KAAqC,OAAO/yC,GAAY,SAAUyB,GAC9E,MAAM6C,EAAM7C,EAAKuxC,UACjB,OAAOnyC,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,GAAGkpC,UAAW,CAEP,SAASyF,KAAqC,OAAOjzC,GAAY,SAAUyB,GAC9E,MAAM6C,EAAM7C,EAAKuxC,UACjB,OAAOnyC,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,GAAGkpC,UAAW,CAEP,SAAS0F,KAAqC,OAAOlzC,GAAY,SAAUyB,GAC9E,MAAM6C,EAAM7C,EAAKuxC,UACjB,OAAOnyC,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,GAAGkpC,UAAW,CAEP,SAAS2F,GAA4B1xC,EAAMC,GAC9CD,EAAK2xC,KAAK1xC,EACd,CAEO,SAAS2xC,GAA4B5xC,GACxCkuC,QAAQyD,KAAK3xC,EACjB,CAEO,SAAS6xC,GAA8C7xC,GAC1D,IAAIqC,EACJ,IACIA,EAASrC,aAAgB8xC,WAC7B,CAAE,MAAOzwC,GACLgB,GAAS,CACb,CAEA,OADYA,CAEhB,CAEO,SAAS0vC,GAAsC/xC,GAClD,IAAIqC,EACJ,IACIA,EAASrC,aAAgBgyC,GAC7B,CAAE,MAAO3wC,GACLgB,GAAS,CACb,CAEA,OADYA,CAEhB,CAEO,SAAS4vC,GAA0CjyC,GACtD,IAAIqC,EACJ,IACIA,EAASrC,aAAgBkyC,OAC7B,CAAE,MAAO7wC,GACLgB,GAAS,CACb,CAEA,OADYA,CAEhB,CAEO,SAAS8vC,GAA6CnyC,GACzD,IAAIqC,EACJ,IACIA,EAASrC,aAAgB/D,UAC7B,CAAE,MAAOoF,GACLgB,GAAS,CACb,CAEA,OADYA,CAEhB,CAEO,SAAS+vC,GAA+BpyC,GAE3C,OADYU,MAAMC,QAAQX,EAE9B,CAEO,SAASqyC,GAAqCryC,GAEjD,OADYsyC,OAAOC,cAAcvyC,EAErC,CAEO,SAASwyC,GAA4BxyC,EAAMC,EAAMgD,GACpD,MAAMJ,EAAM5C,EAAKwyC,KAAKxvC,IAAS,GAC/B,IAAIqH,EAAOlL,EAAWyD,GAAO,EAAI3F,EAAkB2F,EAAKrH,EAAK+N,kBAAmB/N,EAAKgO,oBACjFe,EAAO1O,EACXkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASooC,KAEZ,OADYC,OAAOC,QAEvB,CAEO,SAASC,KAA+B,OAAOt0C,GAAY,SAAUyB,GAExE,OADYA,EAAKqJ,GAErB,GAAG0iC,UAAW,CAEP,SAAS+G,GAA4B9yC,GAExC,OADYmiB,GAAkBpf,OAAO/C,EAEzC,CAEO,SAAS+yC,GAA2B/yC,GAEvC,OADY6iB,GAAiB9f,OAAO/C,EAExC,CAEO,SAASgzC,GAA2BhzC,GAEvC,OADYojB,GAAiBrgB,OAAO/C,EAExC,CAEO,SAASizC,GAA4BjzC,GAExC,OADY2jB,GAAkB5gB,OAAO/C,EAEzC,CAEO,SAASkzC,GAA8BlzC,GAE1C,OADYA,EAAKhD,MAErB,CAEO,SAASm2C,GAA8BnzC,GAE1C,OADYA,EAAKhD,MAErB,CAEO,SAASo2C,GAA8BpzC,GAE1C,OADYA,EAAKhD,MAErB,CAEO,SAASq2C,KAAsC,OAAO90C,GAAY,SAAUyB,EAAMC,GAErF,OADYmsC,YAAYkH,WAAWtzC,EAAe,IAATC,EAE7C,GAAG8rC,UAAW,CAEP,SAASwH,GAAyBvzC,GAErC,OADYkkB,GAAenhB,OAAO/C,EAEtC,CAEO,SAASwzC,GAAgCxzC,GAE5C,OADY6kB,GAAsB9hB,OAAO/C,EAE7C,CAEO,SAASyzC,GAA+BzzC,EAAMC,GACjD,MACMqK,EAAOpN,EADD+C,EAAKqB,QACmB9F,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASopC,GAAgC1zC,GAE5C,OADYA,EAAK2zC,QAErB,CAEO,SAASC,GAA4B5zC,EAAMC,GAC9C,MACMqK,EAAOpN,EADD+C,EAAKQ,KACmBjF,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASupC,GAA2B7zC,EAAMC,GAC7C,IACI,IAAI6zC,EAAS,CAACj0C,EAAGG,EAAMF,EAAGG,GAU1B,MAAM4C,EAAM,IAAIqvC,SATN,CAAClyC,EAAMC,KACb,MAAMJ,EAAIi0C,EAAOj0C,EACjBi0C,EAAOj0C,EAAI,EACX,IACI,OA3zShB,SAA2BG,EAAMC,EAAMgD,EAAMspC,GACzC/wC,EAAKu4C,0BAA0B/zC,EAAMC,EAAMgD,EAAMspC,EACrD,CAyzSuByH,CAAkBn0C,EAAGi0C,EAAOh0C,EAAGE,EAAMC,EAChD,CAAE,QACE6zC,EAAOj0C,EAAIA,CACf,KAGJ,OAAOgD,CACX,CAAE,QACEixC,EAAOj0C,EAAIi0C,EAAOh0C,EAAI,CAC1B,CACJ,CAEO,SAASm0C,GAA2Bj0C,GAEvC,OADY,IAAIk0C,KAAKl0C,EAEzB,CAEO,SAASm0C,KAEZ,OADY,IAAIvwC,MAEpB,CAEO,SAASwwC,KAEZ,OADY,IAAIpC,GAEpB,CAEO,SAASqC,KAEZ,OADY,IAAI3zC,KAEpB,CAEO,SAAS4zC,GAA2Bt0C,GAEvC,OADY,IAAIu0C,kBAAkBv0C,EAEtC,CAEO,SAASw0C,KAEZ,OADY,IAAIp5C,KAEpB,CAEO,SAASq5C,GAA2Bz0C,GAEvC,OADY,IAAI/D,WAAW+D,EAE/B,CAEO,SAAS00C,GAA2B10C,GAEvC,OADY,IAAI20C,IAAI30C,EAExB,CAEO,SAAS40C,GAAiC50C,EAAMC,GAEnD,OADY,IAAI40C,SAAS31C,EAAmBc,EAAMC,GAEtD,CAEO,SAAS60C,GAAkD90C,EAAMC,EAAMgD,GAE1E,OADY,IAAIsxC,kBAAkBv0C,EAAMC,IAAS,EAAGgD,IAAS,EAEjE,CAEO,SAAS8xC,GAAkD/0C,EAAMC,EAAMgD,GAE1E,OADY,IAAIhH,WAAW+D,EAAMC,IAAS,EAAGgD,IAAS,EAE1D,CAEO,SAAS+xC,GAAqCh1C,GAEjD,OADY,IAAI/D,WAAW+D,IAAS,EAExC,CAEO,SAASi1C,GAAqCj1C,GAEjD,OADY,IAAIu0C,kBAAkBv0C,IAAS,EAE/C,CAEO,SAASk1C,KAA0C,OAAO32C,GAAY,SAAUyB,EAAMC,GAEzF,OADY,IAAIk1C,aAAaj2C,EAAmBc,EAAMC,GAE1D,GAAG8rC,UAAW,CAEP,SAASqJ,GAA4Bp1C,GAExC,OADYA,EAAKq1C,IAErB,CAEO,SAASC,KAAgC,OAAO/2C,GAAY,SAAUyB,GAEzE,OADYA,EAAKq1C,MAErB,GAAGtJ,UAAW,CAEP,SAASwJ,GAA4Bv1C,GAExC,OADYA,EAAKw1C,IAErB,CAEO,SAASC,GAA2Bz1C,GAEvC,OADYA,EAAK01C,KAErB,CAEO,SAASC,KAEZ,OADYzB,KAAKwB,KAErB,CAEO,SAASE,GAAwC51C,GAEpD,OADYA,EAAK61C,gBAErB,CAEO,SAASC,KAAuC,OAAOv3C,GAAY,SAAUyB,EAAMC,EAAMgD,GAE5F,OADYjD,EAAK+1C,YAAY72C,EAAmBe,EAAMgD,GAE1D,GAAG8oC,UAAW,CAEP,SAASiK,GAAkCh2C,GAE9C,OADYA,EAAKi2C,UAErB,CAEO,SAASC,GAAqBl2C,GAEjC,OADYumB,GAAWxjB,OAAO/C,EAElC,CAEO,SAASm2C,KAAsC,OAAO53C,GAAY,SAAUyB,GAE/E,OADYA,EAAKo2C,YAErB,GAAGrK,UAAW,CAEP,SAASsK,KAAsC,OAAO93C,GAAY,SAAUyB,GAE/E,OADYA,EAAKo2C,YAErB,GAAGrK,UAAW,CAEP,SAASuK,KAAsC,OAAO/3C,GAAY,SAAUyB,EAAMC,GAErF,OADYD,EAAKo2C,WAAWn2C,EAEhC,GAAG8rC,UAAW,CAEP,SAASwK,KAAgC,OAAOh4C,GAAY,SAAUyB,EAAMC,EAAMgD,GAErF,OADYjD,EAAK8kC,KAAK5lC,EAAmBe,EAAMgD,GAEnD,GAAG8oC,UAAW,CAEP,SAASyK,KAAgC,OAAOj4C,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,GAE3F,OADYvsC,EAAK8kC,KAAK5lC,EAAmBe,EAAMgD,GAAOspC,IAAS,EAEnE,GAAGR,UAAW,CAEP,SAAS0K,GAA4Bz2C,GAExC,OADY+wB,GAAkBhuB,OAAO/C,EAEzC,CAEO,SAAS02C,GAA0B12C,GAEtC,OADYwyB,GAAgBzvB,OAAO/C,EAEvC,CAEO,SAAS22C,KAAiC,OAAOp4C,GAAY,SAAUyB,EAAMC,GAEhF,OADYkB,KAAKy1C,MAAM13C,EAAmBc,EAAMC,GAEpD,GAAG8rC,UAAW,CAEP,SAAS8K,GAAmC72C,GAE/C,OADYA,EAAK82C,WAErB,CAEO,SAASC,GAAwC/2C,GAEpD,OADYszB,GAA2BC,SAASvzB,EAEpD,CAEO,SAASg3C,GAA4Bh3C,GAExC,OADYy0B,GAAelB,SAASvzB,EAExC,CAEO,SAASi3C,GAA+Bj3C,GAE3C,OADYA,EAAKk3C,OAErB,CAEO,SAASC,GAA4Bn3C,EAAMC,GAE9C,OADYD,EAAKsC,KAAKrC,EAE1B,CAEO,SAASm3C,KAA+B,OAAO74C,GAAY,SAAUyB,EAAMC,EAAMgD,GAEpF,OADYjD,EAAKq3C,IAAIp3C,EAAMgD,EAE/B,GAAG8oC,UAAW,CAEP,SAASuL,GAAqCt3C,GAEjD,OADYw1B,GAA2BzyB,OAAO/C,EAElD,CAEO,SAASu3C,GAAav3C,GAEzB,OADY61B,GAAG9yB,OAAO/C,EAE1B,CAEO,SAASw3C,GAAsCx3C,GAClDy3C,eAAez3C,EACnB,CAEO,SAAS03C,GAAsC13C,GAElD,OADYA,EAAKy3C,cAErB,CAEO,SAASE,KAA0C,OAAOp5C,GAAY,SAAUyB,EAAMC,GACzFD,EAAK43C,eAAe33C,EACxB,GAAG8rC,UAAW,CAEP,SAAS8L,GAAkC73C,GAC9C,MAAM6C,EAAM7C,EAAK83C,WACjB,OAAQvvC,EAAqCwvC,QAAQl1C,GAAO,GAAK,GAAK,CAC1E,CAEO,SAASm1C,GAA2Bh4C,GAEvC,OADYm6B,GAAiBp3B,OAAO/C,EAExC,CAEO,SAASi4C,KAAmC,OAAO15C,GAAY,WAElE,OADYjC,OAAOC,OAEvB,GAAGwvC,UAAW,CAEP,SAASmM,GAA+Bl4C,GAE3C,OADYkyC,QAAQiG,QAAQn4C,EAEhC,CAEO,SAASo4C,KAAkC,OAAO75C,GAAY,SAAUyB,GAE3E,OADYA,EAAKqC,MAErB,GAAG0pC,UAAW,CAEP,SAASsM,GAAoBr4C,GAEhC,OADY0hB,GAAO6R,SAASvzB,EAEhC,CAEO,SAASs4C,GAAwBt4C,GAEpC,OADY46B,GAAc73B,OAAO/C,EAErC,CAEO,SAASu4C,GAA8Bv4C,GAE1C,OADYo7B,GAAoBr4B,OAAO/C,EAE3C,CAEO,SAASw4C,GAAsBx4C,GAElC,OADY47B,GAAY74B,OAAO/C,EAEnC,CAEO,SAASy4C,GAA8Bz4C,GAE1C,OADYm8B,GAAoBp5B,OAAO/C,EAE3C,CAEO,SAAS04C,GAA6B14C,GAEzC,OADY48B,GAAmB75B,OAAO/C,EAE1C,CAEO,SAAS24C,GAAuB34C,GAEnC,OADYuwB,GAAaxtB,OAAO/C,EAEpC,CAEO,SAAS44C,GAAc54C,GAE1B,OADYq+B,GAAIt7B,OAAO/C,EAE3B,CAEO,SAAS64C,GAAwB74C,GAEpC,OADYgqB,GAAcjnB,OAAO/C,EAErC,CAEO,SAAS84C,KAAsC,OAAOv6C,GAAY,SAAUyB,EAAMC,GAErF,OADY84C,WAAW/4C,EAAMC,EAEjC,GAAG8rC,UAAW,CAEP,SAASiN,GAA2Bh5C,EAAMC,EAAMgD,GACnDjD,EAAKC,IAAS,GAAKgD,CACvB,CAEO,SAASg2C,GAA2Bj5C,EAAMC,EAAMgD,GACnDjD,EAAKC,GAAQgD,CACjB,CAEO,SAASi2C,GAA2Bl5C,EAAMC,EAAMgD,GACnDjD,EAAKC,GAAQgD,CACjB,CAEO,SAASk2C,GAA2Bn5C,EAAMC,EAAMgD,GACnDjD,EAAKlD,IAAImD,EAAMgD,IAAS,EAC5B,CAEO,SAASm2C,GAA2Bp5C,EAAMC,EAAMgD,GACnDjD,EAAKlD,IAAImD,EAAMgD,IAAS,EAC5B,CAEO,SAASo2C,GAA2Br5C,EAAMC,EAAMgD,GAEnD,OADYjD,EAAKlD,IAAImD,EAAMgD,EAE/B,CAEO,SAASq2C,GAAkCt5C,EAAMC,GACpDD,EAAKu5C,QAAUt5C,CACnB,CAEO,SAASu5C,GAAoCx5C,EAAMC,GACtDD,EAAKy5C,UAAYx5C,CACrB,CAEO,SAASy5C,GAAqC15C,EAAMC,GACvDD,EAAK25C,WAAa15C,CACtB,CAEO,SAAS25C,GAAkC55C,EAAMC,GACpDD,EAAK65C,QAAU55C,CACnB,CAEO,SAAS65C,GAAkC95C,EAAMC,GACpDD,EAAK65C,QAAU55C,CACnB,CAEO,SAAS85C,GAAoC/5C,EAAMC,GACtDD,EAAKg6C,UAAY/5C,CACrB,CAEO,SAASg6C,GAA0Cj6C,EAAMC,GAC5DD,EAAKk6C,gBAAkBj6C,CAC3B,CAEO,SAASk6C,GAA0Cn6C,EAAMC,GAC5DD,EAAKo6C,gBAAkBn6C,CAC3B,CAEO,SAASo6C,GAAiCr6C,EAAMC,GACnDD,EAAKs6C,OAAkB,IAATr6C,CAClB,CAEO,SAASs6C,GAAqBv6C,GAEjC,OADYkY,GAAWnV,OAAO/C,EAElC,CAEO,SAASw6C,GAAiCx6C,GAE7C,OADY6Q,GAAuB9N,OAAO/C,EAE9C,CAEO,SAASy6C,GAAgCz6C,GAE5C,OADYojC,GAAsBrgC,OAAO/C,EAE7C,CAEO,SAAS06C,GAA6B16C,EAAMC,GAC/C,MACMqK,EAAOpN,EADD+C,EAAKsB,MACmB/F,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASqwC,KACZ,MAAM93C,EAAwB,oBAAXquC,OAAyB,KAAOA,OACnD,OAAO9xC,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAAS+3C,KACZ,MAAM/3C,EAA4B,oBAAfg4C,WAA6B,KAAOA,WACvD,OAAOz7C,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAASi4C,KACZ,MAAMj4C,EAAsB,oBAATk4C,KAAuB,KAAOA,KACjD,OAAO37C,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAASm4C,KACZ,MAAMn4C,EAAwB,oBAAXo4C,OAAyB,KAAOA,OACnD,OAAO77C,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAASq4C,GAAsBl7C,GAElC,OADY8lB,GAAY/iB,OAAO/C,EAEnC,CAEO,SAASm7C,KAAqC,OAAO58C,GAAY,SAAUyB,GAE9E,OADYmB,KAAKC,UAAUpB,EAE/B,GAAG+rC,UAAW,CAEP,SAASqP,GAAgCp7C,EAAMC,EAAMgD,GAExD,OADYjD,EAAKzC,SAAS0C,IAAS,EAAGgD,IAAS,EAEnD,CAEO,SAASo4C,GAA8Br7C,GAC1C,MAAM6C,EAAM7C,EAAKs7C,OACjB,OAAOl8C,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAAS04C,GAA4Bv7C,EAAMC,GAE9C,OADYD,EAAKw7C,KAAKv7C,EAE1B,CAEO,SAASw7C,GAA4Bz7C,EAAMC,EAAMgD,GAEpD,OADYjD,EAAKw7C,KAAKv7C,EAAMgD,EAEhC,CAEO,SAASy4C,GAA0B17C,GAEtC,OADYqlC,GAAgBtiC,OAAO/C,EAEvC,CAEO,SAAS27C,KAAuC,OAAOp9C,GAAY,SAAUyB,EAAMC,EAAMgD,EAAMspC,GAElG,OADYvsC,EAAK47C,YAAY18C,EAAmBe,EAAMgD,GAAOuF,EAAmC+jC,GAEpG,GAAGR,UAAW,CAEP,SAAS8P,KAAuC,OAAOt9C,GAAY,SAAUyB,EAAMC,EAAMgD,GAE5F,OADYjD,EAAK47C,YAAY37C,EAAMuI,EAAmCvF,GAE1E,GAAG8oC,UAAW,CAEP,SAAS+P,GAAmC97C,GAC/C,MAAM6C,EAAM7C,EAAK47C,YACjB,OAAOx8C,EAAWyD,GAAO,EAAI3E,EAAqB2E,EACtD,CAEO,SAASk5C,KAAkC,OAAOx9C,GAAY,SAAUyB,EAAMC,GAEjF,OADYD,EAAKg8C,OAAO/7C,EAE5B,GAAG8rC,UAAW,CAEP,SAASkQ,GAAsBj8C,GAElC,OADY+mC,GAAYhkC,OAAO/C,EAEnC,CAEO,SAASk8C,GAAiBl8C,GAE7B,OADYyM,GAAO1J,OAAO/C,EAE9B,CAEO,SAASm8C,GAAoBn8C,GAEhC,OADYyM,GAAO8mB,SAASvzB,EAEhC,CAEO,SAASo8C,KAAiC,OAAO79C,GAAY,SAAUyB,GAE1E,OADYA,EAAK0B,KAErB,GAAGqqC,UAAW,CAEP,SAASsQ,GAA6Br8C,GAEzC,OADYA,EAAK0B,KAErB,CAEO,SAAS46C,GAA8Bt8C,GAE1C,OADYA,EAAKu8C,QAErB,CAEO,SAASC,GAA8Bx8C,GAE1C,OADYksB,GAAoBnpB,OAAO/C,EAE3C,CAEO,SAASy8C,GAA+Bz8C,GAE3C,OADYA,EAAKuiB,OAErB,CAEO,SAASm6B,GAAgC18C,GAE5C,OADYA,EAAK28C,QAErB,CAEO,SAASC,GAA4B58C,GACxCkuC,QAAQ2O,KAAK78C,EACjB,CAEO,SAAS88C,GAA4B98C,EAAMC,GAC9CD,EAAK68C,KAAK58C,EACd,CAEO,SAAS88C,GAAqB/8C,GAEjC,OADaA,CAEjB,CAEO,SAASg9C,GAA2Bh9C,GAEvC,OADYA,CAEhB,CAEO,SAASi9C,GAA2Bj9C,GAEvC,OADY6Y,OAAOC,QAAQ,GAAI9Y,EAEnC,CAEO,SAASk9C,GAA6Bl9C,EAAMC,GAC/C,MACM4C,EAAoB,iBADhB5C,SAC+B5C,EACzCU,IAAqBo/C,YAAYn9C,EAAO,EAAOZ,EAAWyD,GAAOgW,OAAO,GAAKhW,GAAK,GAClF9E,IAAqBwtC,SAASvrC,EAAO,GAAQZ,EAAWyD,IAAM,EAClE,CAEO,SAASu6C,GAAuBp9C,GAGnC,MAD0B,kBADhBA,IACiC,EAAI,EAAK,CAExD,CAEO,SAASq9C,GAAmBr9C,GAC/B,MAAM7B,EAAM6B,EAAKI,SACjB,GAAiB,GAAbjC,EAAI+B,MAEJ,OADA/B,EAAI0B,EAAI,GACD,EAGX,OADY,CAEhB,CAEO,SAASy9C,GAA+Bt9C,EAAMC,EAAMgD,GAEvD,OADYlD,EAAeC,EAAMC,EAAM,GAAI+C,EAE/C,CAEO,SAASu6C,GAA+Bv9C,EAAMC,EAAMgD,GAEvD,OADYlD,EAAeC,EAAMC,EAAM,IAAKkD,EAEhD,CAEO,SAASq6C,GAA+Bx9C,EAAMC,EAAMgD,GAEvD,OADYlD,EAAeC,EAAMC,EAAM,IAAKoD,EAEhD,CAEO,SAASo6C,GAA+Bz9C,EAAMC,EAAMgD,GAEvD,OADY5C,EAAYL,EAAMC,EAAM,IAAKsD,EAE7C,CAEO,SAASm6C,GAA+B19C,EAAMC,EAAMgD,GAEvD,OADY5C,EAAYL,EAAMC,EAAM,IAAKwD,EAE7C,CAEO,SAASk6C,GAAwB39C,EAAMC,GAC1C,MACMqK,EAAOpN,EADDoD,EAAYL,GACYzE,EAAK+N,kBAAmB/N,EAAKgO,oBAC3De,EAAO1O,EACbkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASszC,GAAqB59C,EAAMC,GAEvC,OADY,IAAI7E,MAAM8D,EAAmBc,EAAMC,GAEnD,CAEO,SAAS49C,GAAc79C,EAAMC,GAEhC,OADYD,KAAQC,CAExB,CAEO,SAAS69C,KACZ,MAAMC,EAAQviD,EAAK8C,oBACbZ,EAASqgD,EAAMC,KAAK,GAC1BD,EAAMjhD,IAAI,OAAGO,GACb0gD,EAAMjhD,IAAIY,EAAS,OAAGL,GACtB0gD,EAAMjhD,IAAIY,EAAS,EAAG,MACtBqgD,EAAMjhD,IAAIY,EAAS,GAAG,GACtBqgD,EAAMjhD,IAAIY,EAAS,GAAG,EAE1B,CAEO,SAASugD,GAAoBj+C,GAEhC,OADYU,MAAMC,QAAQX,EAE9B,CAEO,SAASk+C,GAAqBl+C,GAEjC,MAD6B,iBAAX,CAEtB,CAEO,SAASm+C,GAAuBn+C,GAEnC,MAD6B,mBAAX,CAEtB,CAEO,SAASo+C,GAAmBp+C,GAE/B,OADqB,OAATA,CAEhB,CAEO,SAASq+C,GAAqBr+C,GAGjC,MAD4B,iBADhBA,GACoC,OADpCA,CAGhB,CAEO,SAASs+C,GAAqBt+C,GAEjC,MAD6B,iBAAX,CAEtB,CAEO,SAASu+C,GAAwBv+C,GAEpC,YADqB3C,IAAT2C,CAEhB,CAEO,SAASw+C,GAAoBx+C,EAAMC,GAEtC,OADYD,IAASC,CAEzB,CAEO,SAASw+C,GAA0Bz+C,EAAMC,GAE5C,OADYD,GAAQC,CAExB,CAEO,SAASy+C,KAEZ,OADYljD,EAAKU,MAErB,CAEO,SAASyiD,GAAsB3+C,EAAMC,GACxC,MACM4C,EAAsB,iBADhB5C,SACiC5C,EAC7CU,IAAqB6gD,WAAW5+C,EAAO,EAAOZ,EAAWyD,GAAO,EAAIA,GAAK,GACzE9E,IAAqBwtC,SAASvrC,EAAO,GAAQZ,EAAWyD,IAAM,EAClE,CAEO,SAASg8C,GAAsB7+C,GAElC,OADYA,CAEhB,CAEO,SAAS8+C,GAAsB9+C,EAAMC,GACxC,MACM4C,EAAsB,iBADhB5C,SACiC5C,EAC7C,IAAIiN,EAAOlL,EAAWyD,GAAO,EAAI3F,EAAkB2F,EAAKrH,EAAK+N,kBAAmB/N,EAAKgO,oBACjFe,EAAO1O,EACXkC,IAAqBwtC,SAASvrC,EAAO,EAAOuK,GAAM,GAClDxM,IAAqBwtC,SAASvrC,EAAO,EAAOsK,GAAM,EACtD,CAEO,SAASy0C,GAAsB/+C,EAAMC,GAExC,OADYf,EAAmBc,EAAMC,EAEzC,CAEO,SAAS++C,GAAiBh/C,EAAMC,GACnC,MAAM,IAAI7E,MAAM8D,EAAmBc,EAAMC,GAC7C,CAEO,SAASg/C,GAA2Bj/C,GACvC,IAAIqC,EACJ,IAAMA,GAAUrC,CAAK,CAAE,MAAOpB,GAAKyD,EAASzD,CAAE,CAE9C,OADYyD,CAEhB,C","sources":["webpack://soc-connect/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/index-wasm-esm.mjs","webpack://soc-connect/./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/matrix_sdk_crypto_wasm_bg.js"],"sourcesContent":["// Copyright 2024 The Matrix.org Foundation C.I.C.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @ts-check\n\n/**\n * This is the entry point for ESM environments which support the ES Module Integration Proposal for WebAssembly [1].\n *\n * [1]: https://github.com/webassembly/esm-integration\n */\n\nimport * as bindings from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n\n// Although we could simply instantiate the WASM at import time with a top-level `await`,\n// we avoid that, to make it easier for callers to delay loading the WASM (and instead\n// wait until `initAsync` is called). (Also, Safari 14 doesn't support top-level `await`.)\n//\n// However, having done so, there is no way to synchronously load the WASM if the user ends\n// up using the bindings before calling `initAsync` (unlike under Node.js), so we just throw\n// an error.\nbindings.__wbg_set_wasm(\n    new Proxy(\n        {},\n        {\n            get() {\n                throw new Error(\n                    \"@matrix-org/matrix-sdk-crypto-wasm was used before it was initialized. Call `initAsync` first.\",\n                );\n            },\n        },\n    ),\n);\n\n/**\n * Stores a promise of the `loadModuleAsync` call\n * @type {Promise<void> | null}\n */\nlet modPromise = null;\n\n/**\n * Loads and instantiates the WASM module asynchronously\n *\n * @returns {Promise<void>}\n */\nasync function loadModuleAsync() {\n    /** @type {typeof import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm.d.ts\")} */\n    // @ts-expect-error TSC can't find the definitions file, for some reason.\n    const wasm = await import(\"./pkg/matrix_sdk_crypto_wasm_bg.wasm\");\n    bindings.__wbg_set_wasm(wasm);\n    wasm.__wbindgen_start();\n}\n\n/**\n * Load the WebAssembly module in the background, if it has not already been loaded.\n *\n * Returns a promise which will resolve once the other methods are ready.\n *\n * @returns {Promise<void>}\n */\nexport async function initAsync() {\n    if (!modPromise) modPromise = loadModuleAsync();\n    await modPromise;\n}\n\n// Re-export everything from the generated javascript wrappers\nexport * from \"./pkg/matrix_sdk_crypto_wasm_bg.js\";\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction addToExternrefTable0(obj) {\n    const idx = wasm.__externref_table_alloc();\n    wasm.__wbindgen_export_4.set(idx, obj);\n    return idx;\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        const idx = addToExternrefTable0(e);\n        wasm.__wbindgen_exn_store(idx);\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nconst CLOSURE_DTORS = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(state => {\n    wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b)\n});\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(a, state.b);\n                CLOSURE_DTORS.unregister(state);\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_6.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n                CLOSURE_DTORS.unregister(state);\n            }\n        }\n    };\n    real.original = state;\n    CLOSURE_DTORS.register(real, state, state);\n    return real;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches && builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1, 1) >>> 0;\n    getUint8ArrayMemory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction takeFromExternrefTable0(idx) {\n    const value = wasm.__wbindgen_export_4.get(idx);\n    wasm.__externref_table_dealloc(idx);\n    return value;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4, 4) >>> 0;\n    for (let i = 0; i < array.length; i++) {\n        const add = addToExternrefTable0(array[i]);\n        getDataViewMemory0().setUint32(ptr + 4 * i, add, true);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    const mem = getDataViewMemory0();\n    const result = [];\n    for (let i = ptr; i < ptr + 4 * len; i += 4) {\n        result.push(wasm.__wbindgen_export_4.get(mem.getUint32(i, true)));\n    }\n    wasm.__externref_drop_slice(ptr, len);\n    return result;\n}\n\nlet cachedUint16ArrayMemory0 = null;\n\nfunction getUint16ArrayMemory0() {\n    if (cachedUint16ArrayMemory0 === null || cachedUint16ArrayMemory0.byteLength === 0) {\n        cachedUint16ArrayMemory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachedUint16ArrayMemory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint16ArrayMemory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n * Get the versions of the Rust libraries we are using.\n * @returns {Versions}\n */\nexport function getVersions() {\n    const ret = wasm.getVersions();\n    return Versions.__wrap(ret);\n}\n\n/**\n * Run some stuff when the Wasm module is instantiated.\n *\n * Right now, it does the following:\n *\n * * Redirect Rust panics to JavaScript console.\n */\nexport function start() {\n    wasm.start();\n}\n\nfunction __wbg_adapter_58(arg0, arg1, arg2) {\n    const ret = wasm.closure29_externref_shim_multivalue_shim(arg0, arg1, arg2);\n    if (ret[1]) {\n        throw takeFromExternrefTable0(ret[0]);\n    }\n}\n\nfunction __wbg_adapter_61(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h01b499ad5cb75280(arg0, arg1);\n}\n\nfunction __wbg_adapter_64(arg0, arg1, arg2) {\n    wasm.closure734_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_67(arg0, arg1, arg2) {\n    wasm.closure414_externref_shim(arg0, arg1, arg2);\n}\n\nfunction __wbg_adapter_70(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd1a2ce9a4f62ec0e(arg0, arg1);\n}\n\nfunction __wbg_adapter_761(arg0, arg1, arg2, arg3) {\n    wasm.closure430_externref_shim(arg0, arg1, arg2, arg3);\n}\n\n/**\n * Decryption error codes\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const DecryptionErrorCode = Object.freeze({\n    /**\n     * The room key is not known\n     */\n    MissingRoomKey: 0, \"0\": \"MissingRoomKey\",\n    /**\n     * The room key is known but ratcheted\n     */\n    UnknownMessageIndex: 1, \"1\": \"UnknownMessageIndex\",\n    /**\n     * Decryption failed because of a mismatch between the identity keys of the\n     * device we received the room key from and the identity keys recorded in\n     * the plaintext of the room key to-device message.\n     */\n    MismatchedIdentityKeys: 2, \"2\": \"MismatchedIdentityKeys\",\n    /**\n     * We weren't able to link the message back to any known device.\n     */\n    UnknownSenderDevice: 3, \"3\": \"UnknownSenderDevice\",\n    /**\n     * The sender device is not cross-signed.\n     */\n    UnsignedSenderDevice: 4, \"4\": \"UnsignedSenderDevice\",\n    /**\n     * The sender's identity is unverified, but was previously verified.\n     */\n    SenderIdentityVerificationViolation: 5, \"5\": \"SenderIdentityVerificationViolation\",\n    /**\n     * Other failure.\n     */\n    UnableToDecrypt: 6, \"6\": \"UnableToDecrypt\",\n});\n/**\n * The basic key algorithm names in the specification.\n * @enum {0 | 1 | 3}\n */\nexport const DeviceKeyAlgorithmName = Object.freeze({\n    /**\n     * The Ed25519 signature algorithm.\n     */\n    Ed25519: 0, \"0\": \"Ed25519\",\n    /**\n     * The Curve25519 ECDH algorithm.\n     */\n    Curve25519: 1, \"1\": \"Curve25519\",\n    /**\n     * An unknown device key algorithm.\n     */\n    Unknown: 3, \"3\": \"Unknown\",\n});\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n * @enum {0 | 1 | 2}\n */\nexport const DeviceKeyName = Object.freeze({\n    /**\n     * The curve25519 device key.\n     */\n    Curve25519: 0, \"0\": \"Curve25519\",\n    /**\n     * The ed25519 device key.\n     */\n    Ed25519: 1, \"1\": \"Ed25519\",\n    /**\n     * An unknown device key.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * An encryption algorithm to be used to encrypt messages sent to a\n * room.\n * @enum {0 | 1 | 2}\n */\nexport const EncryptionAlgorithm = Object.freeze({\n    /**\n     * Olm version 1 using Curve25519, AES-256, and SHA-256.\n     */\n    OlmV1Curve25519AesSha2: 0, \"0\": \"OlmV1Curve25519AesSha2\",\n    /**\n     * Megolm version 1 using AES-256 and SHA-256.\n     */\n    MegolmV1AesSha2: 1, \"1\": \"MegolmV1AesSha2\",\n    /**\n     * Unsupported algorithm.\n     *\n     * Applications should ignore this value if it is received, and should\n     * never set it.\n     */\n    Unknown: 2, \"2\": \"Unknown\",\n});\n/**\n * Who can see a room's history.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const HistoryVisibility = Object.freeze({\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they were invited onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *invite* or *join*.\n     */\n    Invited: 0, \"0\": \"Invited\",\n    /**\n     * Previous events are accessible to newly joined members from\n     * the point they joined the room onwards.\n     *\n     * Events stop being accessible when the member's state changes\n     * to something other than *join*.\n     */\n    Joined: 1, \"1\": \"Joined\",\n    /**\n     * Previous events are always accessible to newly joined members.\n     *\n     * All events in the room are accessible, even those sent when\n     * the member was not a part of the room.\n     */\n    Shared: 2, \"2\": \"Shared\",\n    /**\n     * All events while this is the `HistoryVisibility` value may be\n     * shared by any participating homeserver with anyone, regardless\n     * of whether they have ever joined the room.\n     */\n    WorldReadable: 3, \"3\": \"WorldReadable\",\n});\n/**\n * The local trust state of a device.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const LocalTrust = Object.freeze({\n    /**\n     * The device has been verified and is trusted.\n     */\n    Verified: 0, \"0\": \"Verified\",\n    /**\n     * The device been blacklisted from communicating.\n     */\n    BlackListed: 1, \"1\": \"BlackListed\",\n    /**\n     * The trust state of the device is being ignored.\n     */\n    Ignored: 2, \"2\": \"Ignored\",\n    /**\n     * The trust state is unset.\n     */\n    Unset: 3, \"3\": \"Unset\",\n});\n/**\n * Logger level.\n * @enum {0 | 1 | 2 | 3 | 4}\n */\nexport const LoggerLevel = Object.freeze({\n    /**\n     * `TRACE` level.\n     *\n     * Designate very low priority, often extremely verbose,\n     * information.\n     */\n    Trace: 0, \"0\": \"Trace\",\n    /**\n     * `DEBUG` level.\n     *\n     * Designate lower priority information.\n     */\n    Debug: 1, \"1\": \"Debug\",\n    /**\n     * `INFO` level.\n     *\n     * Designate useful information.\n     */\n    Info: 2, \"2\": \"Info\",\n    /**\n     * `WARN` level.\n     *\n     * Designate hazardous situations.\n     */\n    Warn: 3, \"3\": \"Warn\",\n    /**\n     * `ERROR` level.\n     *\n     * Designate very serious errors.\n     */\n    Error: 4, \"4\": \"Error\",\n});\n/**\n * The mode of the QR code login.\n *\n * The QR code login mechanism supports both, the new device, as well as the\n * existing device to display the QR code.\n *\n * The different modes have an explicit one-byte identifier which gets added to\n * the QR code data.\n * @enum {0 | 1}\n */\nexport const QrCodeMode = Object.freeze({\n    /**\n     * The new device is displaying the QR code.\n     */\n    Login: 0, \"0\": \"Login\",\n    /**\n     * The existing device is displaying the QR code.\n     */\n    Reciprocate: 1, \"1\": \"Reciprocate\",\n});\n/**\n * List of `Qr` states\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const QrState = Object.freeze({\n    /**\n     * We have received the other device's details (from the\n     * `m.key.verification.request` or `m.key.verification.ready`) and\n     * established the shared secret, so can\n     * display the QR code.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The other side has scanned our QR code and sent an\n     * `m.key.verification.start` message with `method: m.reciprocate.v1` with\n     * matching shared secret.\n     */\n    Scanned: 1, \"1\": \"Scanned\",\n    /**\n     * Our user has confirmed that the other device scanned successfully. We\n     * have sent an `m.key.verification.done`.\n     */\n    Confirmed: 2, \"2\": \"Confirmed\",\n    /**\n     * We have scanned the other side's QR code and are able to send a\n     * `m.key.verification.start` message with `method: m.reciprocate.v1`.\n     *\n     * Call `Qr::reciprocate` to build the start message.\n     *\n     * Note that, despite the name of this state, we have not necessarily\n     * yet sent the `m.reciprocate.v1` message.\n     */\n    Reciprocated: 3, \"3\": \"Reciprocated\",\n    /**\n     * Verification complete: we have received an `m.key.verification.done`\n     * from the other side.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * Verification cancelled or failed.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n/**\n * Represent the type of a request.\n * @enum {0 | 1 | 2 | 3 | 4 | 5 | 6}\n */\nexport const RequestType = Object.freeze({\n    /**\n     * Represents a `KeysUploadRequest`.\n     */\n    KeysUpload: 0, \"0\": \"KeysUpload\",\n    /**\n     * Represents a `KeysQueryRequest`.\n     */\n    KeysQuery: 1, \"1\": \"KeysQuery\",\n    /**\n     * Represents a `KeysClaimRequest`.\n     */\n    KeysClaim: 2, \"2\": \"KeysClaim\",\n    /**\n     * Represents a `ToDeviceRequest`.\n     */\n    ToDevice: 3, \"3\": \"ToDevice\",\n    /**\n     * Represents a `SignatureUploadRequest`.\n     */\n    SignatureUpload: 4, \"4\": \"SignatureUpload\",\n    /**\n     * Represents a `RoomMessageRequest`.\n     */\n    RoomMessage: 5, \"5\": \"RoomMessage\",\n    /**\n     * Represents a `KeysBackupRequest`.\n     */\n    KeysBackup: 6, \"6\": \"KeysBackup\",\n});\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n * @enum {0 | 1 | 2}\n */\nexport const ShieldColor = Object.freeze({\n    /**\n     * Important warning\n     */\n    Red: 0, \"0\": \"Red\",\n    /**\n     * Low warning\n     */\n    Grey: 1, \"1\": \"Grey\",\n    /**\n     * No warning\n     */\n    None: 2, \"2\": \"None\",\n});\n/**\n * A machine-readable representation of the authenticity for a `ShieldState`.\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const ShieldStateCode = Object.freeze({\n    /**\n     * Not enough information available to check the authenticity.\n     */\n    AuthenticityNotGuaranteed: 0, \"0\": \"AuthenticityNotGuaranteed\",\n    /**\n     * The sending device isn't yet known by the Client.\n     */\n    UnknownDevice: 1, \"1\": \"UnknownDevice\",\n    /**\n     * The sending device hasn't been verified by the sender.\n     */\n    UnsignedDevice: 2, \"2\": \"UnsignedDevice\",\n    /**\n     * The sender hasn't been verified by the Client's user.\n     */\n    UnverifiedIdentity: 3, \"3\": \"UnverifiedIdentity\",\n    /**\n     * An unencrypted event in an encrypted room.\n     */\n    SentInClear: 4, \"4\": \"SentInClear\",\n    /**\n     * The sender was previously verified but changed their identity.\n     */\n    VerificationViolation: 5, \"5\": \"VerificationViolation\",\n});\n/**\n * The result of a signature check.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const SignatureState = Object.freeze({\n    /**\n     * The signature is missing.\n     */\n    Missing: 0, \"0\": \"Missing\",\n    /**\n     * The signature is invalid.\n     */\n    Invalid: 1, \"1\": \"Invalid\",\n    /**\n     * The signature is valid but the device or user identity that created the\n     * signature is not trusted.\n     */\n    ValidButNotTrusted: 2, \"2\": \"ValidButNotTrusted\",\n    /**\n     * The signature is valid and the device or user identity that created the\n     * signature is trusted.\n     */\n    ValidAndTrusted: 3, \"3\": \"ValidAndTrusted\",\n});\n/**\n * The trust level required to decrypt an event\n * @enum {0 | 1 | 2}\n */\nexport const TrustRequirement = Object.freeze({\n    /**\n     * Decrypt events from everyone regardless of trust\n     */\n    Untrusted: 0, \"0\": \"Untrusted\",\n    /**\n     * Only decrypt events from cross-signed or legacy devices\n     */\n    CrossSignedOrLegacy: 1, \"1\": \"CrossSignedOrLegacy\",\n    /**\n     * Only decrypt events from cross-signed devices\n     */\n    CrossSigned: 2, \"2\": \"CrossSigned\",\n});\n/**\n * List of available verification methods.\n * @enum {0 | 1 | 2 | 3}\n */\nexport const VerificationMethod = Object.freeze({\n    /**\n     * The `m.sas.v1` verification method.\n     *\n     * SAS means Short Authentication String.\n     */\n    SasV1: 0, \"0\": \"SasV1\",\n    /**\n     * The `m.qr_code.scan.v1` verification method.\n     */\n    QrCodeScanV1: 1, \"1\": \"QrCodeScanV1\",\n    /**\n     * The `m.qr_code.show.v1` verification method.\n     */\n    QrCodeShowV1: 2, \"2\": \"QrCodeShowV1\",\n    /**\n     * The `m.reciprocate.v1` verification method.\n     */\n    ReciprocateV1: 3, \"3\": \"ReciprocateV1\",\n});\n/**\n * List of VerificationRequestState phases\n * @enum {0 | 1 | 2 | 3 | 4 | 5}\n */\nexport const VerificationRequestPhase = Object.freeze({\n    /**\n     * The verification request has been newly created by us.\n     */\n    Created: 0, \"0\": \"Created\",\n    /**\n     * The verification request was received from the other party.\n     */\n    Requested: 1, \"1\": \"Requested\",\n    /**\n     * The verification request is ready to start a verification flow.\n     */\n    Ready: 2, \"2\": \"Ready\",\n    /**\n     * The verification request has transitioned into a concrete verification\n     * flow. For example it transitioned into the emoji based SAS\n     * verification.\n     */\n    Transitioned: 3, \"3\": \"Transitioned\",\n    /**\n     * The verification flow that was started with this request has finished.\n     */\n    Done: 4, \"4\": \"Done\",\n    /**\n     * The verification process has been cancelled.\n     */\n    Cancelled: 5, \"5\": \"Cancelled\",\n});\n\nconst __wbindgen_enum_IdbRequestReadyState = [\"pending\", \"done\"];\n\nconst __wbindgen_enum_IdbTransactionMode = [\"readonly\", \"readwrite\", \"versionchange\", \"readwriteflush\", \"cleanup\"];\n\nconst AttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_attachment_free(ptr >>> 0, 1));\n/**\n * A type to encrypt and to decrypt anything that can fit in an\n * `Uint8Array`, usually big buffer.\n */\nexport class Attachment {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        AttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_attachment_free(ptr, 0);\n    }\n    /**\n     * Encrypt the content of the `Uint8Array`.\n     *\n     * It produces an `EncryptedAttachment`, which can be used to\n     * retrieve the media encryption information, or the encrypted\n     * data.\n     * @param {Uint8Array} array\n     * @returns {EncryptedAttachment}\n     */\n    static encrypt(array) {\n        const ptr0 = passArray8ToWasm0(array, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.attachment_encrypt(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return EncryptedAttachment.__wrap(ret[0]);\n    }\n    /**\n     * Decrypt an `EncryptedAttachment`.\n     *\n     * The encrypted attachment can be created manually, or from the\n     * `encrypt` method.\n     *\n     * **Warning**: The encrypted attachment can be used only\n     * **once**! The encrypted data will still be present, but the\n     * media encryption info (which contain secrets) will be\n     * destroyed. It is still possible to get a JSON-encoded backup\n     * by calling `EncryptedAttachment.mediaEncryptionInfo`.\n     * @param {EncryptedAttachment} attachment\n     * @returns {Uint8Array}\n     */\n    static decrypt(attachment) {\n        _assertClass(attachment, EncryptedAttachment);\n        const ret = wasm.attachment_decrypt(attachment.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n}\n\nconst BackupDecryptionKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupdecryptionkey_free(ptr >>> 0, 1));\n/**\n * The private part of the backup key, the one used for recovery.\n */\nexport class BackupDecryptionKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupDecryptionKey.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupDecryptionKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupDecryptionKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupdecryptionkey_free(ptr, 0);\n    }\n    /**\n     * Create a new random [`BackupDecryptionKey`].\n     * @returns {BackupDecryptionKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.backupdecryptionkey_createRandomKey();\n        return BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * Try to create a [`BackupDecryptionKey`] from a base 64 encoded string.\n     * @param {string} key\n     * @returns {BackupDecryptionKey}\n     */\n    static fromBase64(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.backupdecryptionkey_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return BackupDecryptionKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the backup decryption key to a base 64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.backupdecryptionkey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public part of the backup key.\n     * @returns {MegolmV1BackupKey}\n     */\n    get megolmV1PublicKey() {\n        const ret = wasm.backupdecryptionkey_megolmV1PublicKey(this.__wbg_ptr);\n        return MegolmV1BackupKey.__wrap(ret);\n    }\n    /**\n     * Try to decrypt a message that was encrypted using the public part of the\n     * backup key.\n     * @param {string} ephemeral_key\n     * @param {string} mac\n     * @param {string} ciphertext\n     * @returns {string}\n     */\n    decryptV1(ephemeral_key, mac, ciphertext) {\n        let deferred5_0;\n        let deferred5_1;\n        try {\n            const ptr0 = passStringToWasm0(ephemeral_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(mac, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(ciphertext, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ret = wasm.backupdecryptionkey_decryptV1(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var ptr4 = ret[0];\n            var len4 = ret[1];\n            if (ret[3]) {\n                ptr4 = 0; len4 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred5_0 = ptr4;\n            deferred5_1 = len4;\n            return getStringFromWasm0(ptr4, len4);\n        } finally {\n            wasm.__wbindgen_free(deferred5_0, deferred5_1, 1);\n        }\n    }\n}\n\nconst BackupKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupkeys_free(ptr >>> 0, 1));\n/**\n * Stored versions of the backup keys.\n */\nexport class BackupKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupkeys_free(ptr, 0);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @returns {BackupDecryptionKey | undefined}\n     */\n    get decryptionKey() {\n        const ret = wasm.__wbg_get_backupkeys_decryptionKey(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupDecryptionKey.__wrap(ret);\n    }\n    /**\n     * The key used to decrypt backed up room keys\n     * @param {BackupDecryptionKey | null} [arg0]\n     */\n    set decryptionKey(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, BackupDecryptionKey);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_backupkeys_decryptionKey(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The version that we are using for backups.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_backupkeys_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The version that we are using for backups.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupkeys_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The key used to decrypt backed up room keys, encoded as base64\n     *\n     * @deprecated Use `BackupKeys.decryptionKey.toBase64()`\n     * @returns {string | undefined}\n     */\n    get decryptionKeyBase64() {\n        const ret = wasm.backupkeys_decryptionKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst BackupSecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_backupsecretsbundle_free(ptr >>> 0, 1));\n/**\n * The backup-specific parts of a secrets bundle.\n */\nexport class BackupSecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BackupSecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        BackupSecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BackupSecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_backupsecretsbundle_free(ptr, 0);\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @returns {string}\n     */\n    get key() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_key(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup decryption key, encoded as unpadded base64.\n     * @param {string} arg0\n     */\n    set key(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @returns {string}\n     */\n    get backup_version() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_backupsecretsbundle_backup_version(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The backup version which this backup decryption key is used with.\n     * @param {string} arg0\n     */\n    set backup_version(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst BaseMigrationDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_basemigrationdata_free(ptr >>> 0, 1));\n/**\n * The base dataset that is important to migrate to the Rust SDK.\n *\n * Can be imported into the rust store with {@link Migration::migrateBaseData}.\n */\nexport class BaseMigrationData {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BaseMigrationDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_basemigrationdata_free(ptr, 0);\n    }\n    /**\n     * The user id of the account owner.\n     * @returns {UserId | undefined}\n     */\n    get userId() {\n        const ret = wasm.__wbg_get_basemigrationdata_userId(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The user id of the account owner.\n     * @param {UserId | null} [arg0]\n     */\n    set userId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, UserId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_userId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The device ID of the account owner.\n     * @returns {DeviceId | undefined}\n     */\n    get deviceId() {\n        const ret = wasm.__wbg_get_basemigrationdata_deviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The device ID of the account owner.\n     * @param {DeviceId | null} [arg0]\n     */\n    set deviceId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, DeviceId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_basemigrationdata_deviceId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @returns {string}\n     */\n    get pickledAccount() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_basemigrationdata_pickledAccount(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Account, as returned by\n     * `olm_pickle_account` in libolm.\n     * @param {string} arg0\n     */\n    set pickledAccount(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup version that is currently active.\n     * @returns {string | undefined}\n     */\n    get backupVersion() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupVersion(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup version that is currently active.\n     * @param {string | null} [arg0]\n     */\n    set backupVersion(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupVersion(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @returns {string | undefined}\n     */\n    get backupRecoveryKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_backupRecoveryKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The backup recovery key, as a base64-encoded string.\n     * @param {string | null} [arg0]\n     */\n    set backupRecoveryKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningMasterKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, master cross-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningMasterKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningMasterKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningSelfSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, self-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningSelfSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @returns {string | undefined}\n     */\n    get privateCrossSigningUserSigningKey() {\n        const ret = wasm.__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The private, base64-encoded, user-signing key.\n     * @param {string | null} [arg0]\n     */\n    set privateCrossSigningUserSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Create a new `BaseMigrationData` with default values.\n     */\n    constructor() {\n        const ret = wasm.basemigrationdata_new();\n        this.__wbg_ptr = ret >>> 0;\n        BaseMigrationDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst CancelInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_cancelinfo_free(ptr >>> 0, 1));\n/**\n * Information about the cancellation of a verification request or\n * verification flow.\n */\nexport class CancelInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CancelInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        CancelInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CancelInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_cancelinfo_free(ptr, 0);\n    }\n    /**\n     * Get the human readable reason of the cancellation.\n     * @returns {string}\n     */\n    reason() {\n        const ret = wasm.cancelinfo_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the `code` (e.g. `m.user`) that was used to cancel the\n     * verification.\n     * @returns {string}\n     */\n    cancelCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.cancelinfo_cancelCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Was the verification cancelled by us?\n     * @returns {boolean}\n     */\n    cancelledbyUs() {\n        const ret = wasm.cancelinfo_cancelledbyUs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst CheckCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_checkcode_free(ptr >>> 0, 1));\n/**\n * A check code that can be used to confirm that two [`EstablishedEcies`]\n * objects share the same secret. This is supposed to be shared out-of-band to\n * protect against active Man-in-the-middle (MITM) attacks.\n *\n * Since the initiator device can always tell whether a MITM attack is in\n * progress after channel establishment, this code technically carries only a\n * single bit of information, representing whether the initiator has determined\n * that the channel is \"secure\" or \"not secure\".\n *\n * However, given this will need to be interactively confirmed by the user,\n * there is risk that the user would confirm the dialogue without paying\n * attention to its content. By expanding this single bit into a deterministic\n * two-digit check code, the user is forced to pay more attention by having to\n * enter it instead of just clicking through a dialogue.\n */\nexport class CheckCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CheckCode.prototype);\n        obj.__wbg_ptr = ptr;\n        CheckCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CheckCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_checkcode_free(ptr, 0);\n    }\n    /**\n     * Convert the check code to an array of two bytes.\n     *\n     * The bytes can be converted to a more user-friendly representation. The\n     * [`CheckCode::to_digit`] converts the bytes to a two-digit number.\n     * @returns {Uint8Array}\n     */\n    as_bytes() {\n        const ret = wasm.checkcode_as_bytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Convert the check code to two base-10 numbers.\n     *\n     * The number should be displayed with a leading 0 in case the first digit\n     * is a 0.\n     * @returns {number}\n     */\n    to_digit() {\n        const ret = wasm.checkcode_to_digit(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst CollectStrategyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_collectstrategy_free(ptr >>> 0, 1));\n/**\n * Strategy to collect the devices that should receive room keys for the\n * current discussion.\n */\nexport class CollectStrategy {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CollectStrategy.prototype);\n        obj.__wbg_ptr = ptr;\n        CollectStrategyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CollectStrategyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_collectstrategy_free(ptr, 0);\n    }\n    /**\n     * Tests for equality between two [`CollectStrategy`]s.\n     * @param {CollectStrategy} other\n     * @returns {boolean}\n     */\n    eq(other) {\n        _assertClass(other, CollectStrategy);\n        const ret = wasm.collectstrategy_eq(this.__wbg_ptr, other.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Device based sharing strategy.\n     *\n     * @deprecated: use one of {@link allDevices}, {@link\n     * errorOnUnverifiedUserProblem} or {@link onlyTrustedDevices}.\n     * @param {boolean} only_allow_trusted_devices\n     * @param {boolean} error_on_verified_user_problem\n     * @returns {CollectStrategy}\n     */\n    static deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem) {\n        const ret = wasm.collectstrategy_deviceBasedStrategy(only_allow_trusted_devices, error_on_verified_user_problem);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all (unblacklisted) devices.\n     * @returns {CollectStrategy}\n     */\n    static allDevices() {\n        const ret = wasm.collectstrategy_allDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share with all devices, except that errors for *verified* users cause\n     * sharing to fail with an error.\n     *\n     * In this strategy, if a verified user has an unsigned device, or\n     * a verified user has replaced their identity, key\n     * sharing will fail with an error.\n     *\n     * Otherwise, keys are shared with unsigned devices as normal.\n     *\n     * Once the problematic devices are blacklisted or whitelisted the\n     * caller can try sharing a second time.\n     * @returns {CollectStrategy}\n     */\n    static errorOnUnverifiedUserProblem() {\n        const ret = wasm.collectstrategy_errorOnUnverifiedUserProblem();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Share based on identity. Only distribute to devices signed by their\n     * owner. If a user has no published identity he will not receive\n     * any room keys.\n     * @returns {CollectStrategy}\n     */\n    static identityBasedStrategy() {\n        const ret = wasm.collectstrategy_identityBasedStrategy();\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Only share keys with devices that we \"trust\". A device is trusted if any\n     * of the following is true:\n     *     - It was manually marked as trusted.\n     *     - It was marked as verified via interactive verification.\n     *     - It is signed by its owner identity, and this identity has been\n     *       trusted via interactive verification.\n     *     - It is the current own device of the user.\n     * @returns {CollectStrategy}\n     */\n    static onlyTrustedDevices() {\n        const ret = wasm.collectstrategy_onlyTrustedDevices();\n        return CollectStrategy.__wrap(ret);\n    }\n}\n\nconst CrossSigningBootstrapRequestsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningbootstraprequests_free(ptr >>> 0, 1));\n/**\n * A set of requests to be executed when bootstrapping cross-signing using\n * {@link OlmMachine.bootstrapCrossSigning}.\n */\nexport class CrossSigningBootstrapRequests {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningBootstrapRequests.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningBootstrapRequestsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningBootstrapRequestsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningbootstraprequests_free(ptr, 0);\n    }\n    /**\n     * An optional request to upload a device key.\n     *\n     * This will either be `undefined`, or an \"outgoing request\" as returned by\n     * {@link OlmMachine.outgoingRequests}.\n     *\n     * If it is defined, the request should be sent first, and the result sent\n     * back with {@link OlmMachine.markRequestAsSent}.\n     * @returns {any}\n     */\n    get uploadKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadKeysRequest(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Request to upload the cross-signing keys.\n     *\n     * Should be sent second.\n     * @returns {UploadSigningKeysRequest}\n     */\n    get uploadSigningKeysRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest(this.__wbg_ptr);\n        return UploadSigningKeysRequest.__wrap(ret);\n    }\n    /**\n     * Request to upload key signatures, including those for the cross-signing\n     * keys, and maybe some for the optional uploaded key too.\n     *\n     * Should be sent last.\n     * @returns {SignatureUploadRequest}\n     */\n    get uploadSignaturesRequest() {\n        const ret = wasm.__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest(this.__wbg_ptr);\n        return SignatureUploadRequest.__wrap(ret);\n    }\n}\n\nconst CrossSigningKeyExportFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningkeyexport_free(ptr >>> 0, 1));\n/**\n * A struct containing private cross signing keys that can be backed\n * up or uploaded to the secret store.\n */\nexport class CrossSigningKeyExport {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningKeyExport.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningKeyExportFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningKeyExportFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningkeyexport_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get masterKey() {\n        const ret = wasm.crosssigningkeyexport_masterKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get self_signing_key() {\n        const ret = wasm.crosssigningkeyexport_self_signing_key(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string | undefined}\n     */\n    get userSigningKey() {\n        const ret = wasm.crosssigningkeyexport_userSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst CrossSigningStatusFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_crosssigningstatus_free(ptr >>> 0, 1));\n/**\n * Struct representing the state of our private cross signing keys,\n * it shows which private cross signing keys we have locally stored.\n */\nexport class CrossSigningStatus {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CrossSigningStatus.prototype);\n        obj.__wbg_ptr = ptr;\n        CrossSigningStatusFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CrossSigningStatusFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_crosssigningstatus_free(ptr, 0);\n    }\n    /**\n     * Do we have the master key?\n     * @returns {boolean}\n     */\n    get hasMaster() {\n        const ret = wasm.crosssigningstatus_hasMaster(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the self signing key? This one is necessary to sign\n     * our own devices.\n     * @returns {boolean}\n     */\n    get hasSelfSigning() {\n        const ret = wasm.crosssigningstatus_hasSelfSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Do we have the user signing key? This one is necessary to sign\n     * other users.\n     * @returns {boolean}\n     */\n    get hasUserSigning() {\n        const ret = wasm.crosssigningstatus_hasUserSigning(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst Curve25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_curve25519publickey_free(ptr >>> 0, 1));\n/**\n * A Curve25519 public key.\n */\nexport class Curve25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Curve25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Curve25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Curve25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_curve25519publickey_free(ptr, 0);\n    }\n    /**\n     * Create a new [`Curve25519PublicKey`] from a base64 encoded string.\n     * @param {string} key\n     */\n    constructor(key) {\n        const ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.curve25519publickey_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Curve25519PublicKeyFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The number of bytes a Curve25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.curve25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Curve25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.curve25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DecryptedRoomEventFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptedroomevent_free(ptr >>> 0, 1));\n/**\n * A decrypted room event.\n */\nexport class DecryptedRoomEvent {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DecryptedRoomEvent.prototype);\n        obj.__wbg_ptr = ptr;\n        DecryptedRoomEventFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptedRoomEventFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptedroomevent_free(ptr, 0);\n    }\n    /**\n     * The JSON-encoded decrypted event.\n     * @returns {string}\n     */\n    get event() {\n        const ret = wasm.__wbg_get_decryptedroomevent_event(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The user ID of the event sender, note this is untrusted data\n     * unless the `verification_state` is as well trusted.\n     * @returns {UserId | undefined}\n     */\n    get sender() {\n        const ret = wasm.decryptedroomevent_sender(this.__wbg_ptr);\n        return ret === 0 ? undefined : UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event, note this\n     * is untrusted data unless `verification_state` is as well\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.decryptedroomevent_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.decryptedroomevent_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that have created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.decryptedroomevent_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Returns an empty array\n     *\n     * Previously, this returned the chain of Curve25519 keys through which\n     * this session was forwarded, via `m.forwarded_room_key` events.\n     * However, that is not cryptographically reliable, and clients should not\n     * be using it.\n     *\n     * @see https://github.com/matrix-org/matrix-spec/issues/1089\n     * @returns {Array<any>}\n     */\n    get forwardingCurve25519KeyChain() {\n        const ret = wasm.decryptedroomevent_forwardingCurve25519KeyChain(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     * @param {boolean} strict\n     * @returns {ShieldState | undefined}\n     */\n    shieldState(strict) {\n        const ret = wasm.decryptedroomevent_shieldState(this.__wbg_ptr, strict);\n        return ret === 0 ? undefined : ShieldState.__wrap(ret);\n    }\n}\n\nconst DecryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_decryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for decrypting messages\n */\nexport class DecryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DecryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_decryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @returns {TrustRequirement}\n     */\n    get sender_device_trust_requirement() {\n        const ret = wasm.__wbg_get_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The trust level required to decrypt the event\n     * @param {TrustRequirement} arg0\n     */\n    set sender_device_trust_requirement(arg0) {\n        wasm.__wbg_set_decryptionsettings_sender_device_trust_requirement(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Create a new `DecryptionSettings` with the given trust requirement.\n     * @param {TrustRequirement} sender_device_trust_requirement\n     */\n    constructor(sender_device_trust_requirement) {\n        const ret = wasm.decryptionsettings_new(sender_device_trust_requirement);\n        this.__wbg_ptr = ret >>> 0;\n        DecryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst DehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A dehydrated device that can be uploaded to the server\n */\nexport class DehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Create the request to upload the dehydrated device\n     * @param {string} initial_device_display_name\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<PutDehydratedDeviceRequest>}\n     */\n    keysForUpload(initial_device_display_name, dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevice_keysForUpload(this.__wbg_ptr, initial_device_display_name, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevicekey_free(ptr >>> 0, 1));\n/**\n * Dehydrated device key\n */\nexport class DehydratedDeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevicekey_free(ptr, 0);\n    }\n    /**\n     * Generates a new random dehydrated device key.\n     * @returns {DehydratedDeviceKey}\n     */\n    static createRandomKey() {\n        const ret = wasm.dehydrateddevicekey_createRandomKey();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Generates a dehydrated device key from a given array.\n     * @param {Uint8Array} array\n     * @returns {DehydratedDeviceKey}\n     */\n    static createKeyFromArray(array) {\n        const ret = wasm.dehydrateddevicekey_createKeyFromArray(array);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return DehydratedDeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Convert the dehydrated device key to a base64-encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        const ret = wasm.dehydrateddevicekey_toBase64(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DehydratedDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_dehydrateddevices_free(ptr >>> 0, 1));\n/**\n * Struct collecting methods to create and rehydrate dehydrated devices.\n */\nexport class DehydratedDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DehydratedDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        DehydratedDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DehydratedDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_dehydrateddevices_free(ptr, 0);\n    }\n    /**\n     * Create a new {@link DehydratedDevice} which can be uploaded to the\n     * server.\n     * @returns {Promise<DehydratedDevice>}\n     */\n    create() {\n        const ret = wasm.dehydrateddevices_create(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Rehydrate a dehydrated device.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @param {DeviceId} device_id\n     * @param {string} device_data\n     * @returns {Promise<RehydratedDevice>}\n     */\n    rehydrate(dehydrated_device_key, device_id, device_data) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        _assertClass(device_id, DeviceId);\n        const ptr0 = passStringToWasm0(device_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.dehydrateddevices_rehydrate(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the cached dehydrated device key if any.\n     *\n     * `None` if the key was not previously cached (via\n     * {@link DehydratedDevices.saveDehydratedDeviceKey}).\n     * @returns {Promise<DehydratedDeviceKey | undefined>}\n     */\n    getDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_getDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store the dehydrated device key in the crypto store.\n     * @param {DehydratedDeviceKey} dehydrated_device_key\n     * @returns {Promise<void>}\n     */\n    saveDehydratedDeviceKey(dehydrated_device_key) {\n        _assertClass(dehydrated_device_key, DehydratedDeviceKey);\n        const ret = wasm.dehydrateddevices_saveDehydratedDeviceKey(this.__wbg_ptr, dehydrated_device_key.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Clear the dehydrated device key saved in the crypto store.\n     * @returns {Promise<void>}\n     */\n    deleteDehydratedDeviceKey() {\n        const ret = wasm.dehydrateddevices_deleteDehydratedDeviceKey(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst DeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_device_free(ptr >>> 0, 1));\n/**\n * A device represents a E2EE capable client of an user.\n */\nexport class Device {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Device.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_device_free(ptr, 0);\n    }\n    /**\n     * Request an interactive verification with this device.\n     *\n     * Returns a 2-element array `[VerificationRequest, ToDeviceRequest]`.\n     * @param {any[] | null} [methods]\n     * @returns {Array<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a to-device message to be sent to this device, using Olm\n     * encryption.\n     *\n     * Prior to calling this method you must ensure that an Olm session is\n     * available for the target device. This can be done by calling\n     * {@link OlmMachine.getMissingSessions}.\n     *\n     * The caller is responsible for sending the encrypted\n     * event to the target device. If multiple messages are\n     * encrypted for the same device using this method they should be sent in\n     * the same order as they are encrypted.\n     *\n     * # Returns\n     *\n     * Returns a promise for a JSON string containing the `content` of an\n     * encrypted event, which be used to create the payload for a\n     * `/sendToDevice` API.\n     * @param {string} event_type\n     * @param {any} content\n     * @returns {Promise<string>}\n     */\n    encryptToDeviceEvent(event_type, content) {\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.device_encryptToDeviceEvent(this.__wbg_ptr, ptr0, len0, content);\n        return ret;\n    }\n    /**\n     * Is this device considered to be verified.\n     *\n     * This method returns true if either the `is_locally_trusted`\n     * method returns `true` or if the `is_cross_signing_trusted`\n     * method returns `true`.\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.device_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device considered to be verified using cross signing.\n     * @returns {boolean}\n     */\n    isCrossSigningTrusted() {\n        const ret = wasm.device_isCrossSigningTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this device cross-signed by its owner?\n     * @returns {boolean}\n     */\n    isCrossSignedByOwner() {\n        const ret = wasm.device_isCrossSignedByOwner(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Set the local trust state of the device to the given state.\n     *\n     * This won’t affect any cross signing trust state, this only\n     * sets a flag marking to have the given trust state.\n     *\n     * `trust_state` represents the new trust state that should be\n     * set for the device.\n     * @param {LocalTrust} local_state\n     * @returns {Promise<any>}\n     */\n    setLocalTrust(local_state) {\n        const ret = wasm.device_setLocalTrust(this.__wbg_ptr, local_state);\n        return ret;\n    }\n    /**\n     * The user ID of the device owner.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.device_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique ID of the device.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.device_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the human readable name of the device.\n     * @returns {string | undefined}\n     */\n    get displayName() {\n        const ret = wasm.device_displayName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the key of the given key algorithm belonging to this device.\n     * @param {DeviceKeyAlgorithmName} algorithm\n     * @returns {DeviceKey | undefined}\n     */\n    getKey(algorithm) {\n        const ret = wasm.device_getKey(this.__wbg_ptr, algorithm);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return ret[0] === 0 ? undefined : DeviceKey.__wrap(ret[0]);\n    }\n    /**\n     * Get the Curve25519 key of the given device.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519Key() {\n        const ret = wasm.device_curve25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the Ed25519 key of the given device.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519Key() {\n        const ret = wasm.device_ed25519Key(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get a map containing all the device keys.\n     * @returns {Map<any, any>}\n     */\n    get keys() {\n        const ret = wasm.device_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the list of algorithms this device supports.\n     *\n     * Returns `Array<EncryptionAlgorithm>`.\n     * @returns {Array<any>}\n     */\n    get algorithms() {\n        const ret = wasm.device_algorithms(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get a map containing all the device signatures.\n     * @returns {Signatures}\n     */\n    get signatures() {\n        const ret = wasm.device_signatures(this.__wbg_ptr);\n        return Signatures.__wrap(ret);\n    }\n    /**\n     * Get the trust state of the device.\n     * @returns {LocalTrust}\n     */\n    get localTrustState() {\n        const ret = wasm.device_localTrustState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the device locally marked as trusted?\n     * @returns {boolean}\n     */\n    isLocallyTrusted() {\n        const ret = wasm.device_isLocallyTrusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device locally marked as blacklisted?\n     *\n     * Blacklisted devices won’t receive any group sessions.\n     * @returns {boolean}\n     */\n    isBlacklisted() {\n        const ret = wasm.device_isBlacklisted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the device deleted?\n     * @returns {boolean}\n     */\n    isDeleted() {\n        const ret = wasm.device_isDeleted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Timestamp representing the first time this device has been seen (in\n     * milliseconds).\n     * @returns {bigint}\n     */\n    firstTimeSeen() {\n        const ret = wasm.device_firstTimeSeen(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * Mark this device as verified.\n     * Works only if the device is owned by the current user.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.device_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether or not the device is a dehydrated device.\n     * @returns {boolean}\n     */\n    get isDehydrated() {\n        const ret = wasm.device_isDehydrated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst DeviceIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_deviceid_free(ptr >>> 0, 1));\n/**\n * A Matrix key ID.\n *\n * Device identifiers in Matrix are completely opaque character\n * sequences. This type is provided simply for its semantic value.\n */\nexport class DeviceId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_deviceid_free(ptr, 0);\n    }\n    /**\n     * Create a new `DeviceId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.deviceid_new(ptr0, len0);\n        this.__wbg_ptr = ret >>> 0;\n        DeviceIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the device ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.deviceid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekey_free(ptr >>> 0, 1));\n/**\n * An enum over the different key types a device can have.\n *\n * Currently devices have a curve25519 and ed25519 keypair. The keys\n * transport format is a base64 encoded string, any unknown key type\n * will be left as such a string.\n */\nexport class DeviceKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKey.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekey_free(ptr, 0);\n    }\n    /**\n     * Get the name of the device key.\n     * @returns {DeviceKeyName}\n     */\n    get name() {\n        const ret = wasm.devicekey_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the value associated to the `Curve25519` device key name.\n     * @returns {Curve25519PublicKey | undefined}\n     */\n    get curve25519() {\n        const ret = wasm.devicekey_curve25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Ed25519` device key name.\n     * @returns {Ed25519PublicKey | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.devicekey_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the value associated to the `Unknown` device key name.\n     * @returns {string | undefined}\n     */\n    get unknown() {\n        const ret = wasm.devicekey_unknown(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Convert the `DeviceKey` into a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyAlgorithmFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyalgorithm_free(ptr >>> 0, 1));\n/**\n * The basic key algorithms in the specification.\n */\nexport class DeviceKeyAlgorithm {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyAlgorithm.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyAlgorithmFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyAlgorithmFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyalgorithm_free(ptr, 0);\n    }\n    /**\n     * Read the device key algorithm's name. If the name is\n     * `Unknown`, one may be interested by the `to_string` method to\n     * read the original name.\n     * @returns {DeviceKeyAlgorithmName}\n     */\n    get name() {\n        const ret = wasm.devicekeyalgorithm_name(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Return the device key algorithm as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyalgorithm_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceKeyIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicekeyid_free(ptr >>> 0, 1));\n/**\n * A Matrix device key ID.\n *\n * A key algorithm and a device ID, combined with a ‘:’.\n */\nexport class DeviceKeyId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DeviceKeyId.prototype);\n        obj.__wbg_ptr = ptr;\n        DeviceKeyIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceKeyIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicekeyid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `DeviceKeyId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.devicekeyid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceKeyIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns key algorithm of the device key ID.\n     * @returns {DeviceKeyAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.devicekeyid_algorithm(this.__wbg_ptr);\n        return DeviceKeyAlgorithm.__wrap(ret);\n    }\n    /**\n     * Returns device ID of the device key ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.devicekeyid_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Return the device key ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.devicekeyid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst DeviceListsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_devicelists_free(ptr >>> 0, 1));\n/**\n * Information on E2E device updates.\n */\nexport class DeviceLists {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DeviceListsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_devicelists_free(ptr, 0);\n    }\n    /**\n     * Create an empty `DeviceLists`.\n     *\n     * `changed` and `left` must be an array of `UserId`.\n     *\n     * Items inside `changed` and `left` will be invalidated by this method. Be\n     * careful not to use the `UserId`s after this method has been called.\n     * @param {UserId[] | null} [changed]\n     * @param {UserId[] | null} [left]\n     */\n    constructor(changed, left) {\n        var ptr0 = isLikeNone(changed) ? 0 : passArrayJsValueToWasm0(changed, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(left) ? 0 : passArrayJsValueToWasm0(left, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.devicelists_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        DeviceListsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns true if there are no device list updates.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.devicelists_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * List of users who have updated their device identity keys or\n     * who now share an encrypted room with the client since the\n     * previous sync\n     * @returns {UserId[]}\n     */\n    get changed() {\n        const ret = wasm.devicelists_changed(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n    /**\n     * List of users who no longer share encrypted rooms since the\n     * previous sync response.\n     * @returns {UserId[]}\n     */\n    get left() {\n        const ret = wasm.devicelists_left(this.__wbg_ptr);\n        var v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        return v1;\n    }\n}\n\nconst EciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ecies_free(ptr >>> 0, 1));\n/**\n * An unestablished ECIES session.\n */\nexport class Ecies {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ecies_free(ptr, 0);\n    }\n    /**\n     * Create a new, random, unestablished ECIES session.\n     *\n     * This method will use the\n     * [`MATRIX_QR_CODE_LOGIN`](https://github.com/matrix-org/matrix-spec-proposals/pull/4108)\n     * info for domain separation when creating the session.\n     */\n    constructor() {\n        const ret = wasm.ecies_new();\n        this.__wbg_ptr = ret >>> 0;\n        EciesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side to be able to\n     * establish an ECIES channel.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.ecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Create a [`EstablishedEcies`] from an initial message encrypted by the\n     * other side.\n     * @param {string} initial_message\n     * @returns {InboundCreationResult}\n     */\n    establish_inbound_channel(initial_message) {\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_inbound_channel(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return InboundCreationResult.__wrap(ret[0]);\n    }\n    /**\n     * Create an [`EstablishedEcies`] session using the other side's Curve25519\n     * public key and an initial plaintext.\n     *\n     * After the channel has been established, we can encrypt messages to send\n     * to the other side. The other side uses the initial message to\n     * establishes the same channel on its side.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} initial_message\n     * @returns {OutboundCreationResult}\n     */\n    establish_outbound_channel(public_key, initial_message) {\n        _assertClass(public_key, Curve25519PublicKey);\n        const ptr0 = passStringToWasm0(initial_message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ecies_establish_outbound_channel(this.__wbg_ptr, public_key.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return OutboundCreationResult.__wrap(ret[0]);\n    }\n}\n\nconst Ed25519PublicKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519publickey_free(ptr >>> 0, 1));\n/**\n * An Ed25519 public key, used to verify digital signatures.\n */\nexport class Ed25519PublicKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519PublicKey.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519PublicKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519PublicKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519publickey_free(ptr, 0);\n    }\n    /**\n     * The number of bytes an Ed25519 public key has.\n     * @returns {number}\n     */\n    get length() {\n        const ret = wasm.ed25519publickey_length(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Serialize an Ed25519 public key to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519publickey_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst Ed25519SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ed25519signature_free(ptr >>> 0, 1));\n/**\n * An Ed25519 digital signature, can be used to verify the\n * authenticity of a message.\n */\nexport class Ed25519Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        Ed25519SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Ed25519SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ed25519signature_free(ptr, 0);\n    }\n    /**\n     * Try to create an Ed25519 signature from an unpadded base64\n     * representation.\n     * @param {string} signature\n     */\n    constructor(signature) {\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ed25519signature_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        Ed25519SignatureFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Serialize a Ed25519 signature to an unpadded base64\n     * representation.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.ed25519signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst EmojiFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_emoji_free(ptr >>> 0, 1));\n/**\n * An emoji that is used for interactive verification using a short\n * auth string.\n *\n * This will contain a single emoji and description from the list of\n * emojis from [the specification].\n *\n * [the specification]: https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji\n */\nexport class Emoji {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Emoji.prototype);\n        obj.__wbg_ptr = ptr;\n        EmojiFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EmojiFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_emoji_free(ptr, 0);\n    }\n    /**\n     * The emoji symbol that represents a part of the short auth\n     * string, for example: 🐶\n     * @returns {string}\n     */\n    get symbol() {\n        const ret = wasm.emoji_symbol(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The description of the emoji, for example ‘Dog’.\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.emoji_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst EncryptedAttachmentFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptedattachment_free(ptr >>> 0, 1));\n/**\n * An encrypted attachment, usually created from `Attachment.encrypt`.\n */\nexport class EncryptedAttachment {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptedAttachment.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptedAttachmentFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptedAttachmentFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptedattachment_free(ptr, 0);\n    }\n    /**\n     * Create a new encrypted attachment manually.\n     *\n     * It needs encrypted data, stored in an `Uint8Array`, and a\n     * [media encryption\n     * information](https://docs.rs/matrix-sdk-crypto/latest/matrix_sdk_crypto/struct.MediaEncryptionInfo.html),\n     * as a JSON-encoded string.\n     *\n     * The media encryption information aren't stored as a string:\n     * they are parsed, validated and fully deserialized.\n     *\n     * See [the specification to learn\n     * more](https://spec.matrix.org/unstable/client-server-api/#extensions-to-mroommessage-msgtypes).\n     * @param {Uint8Array} encrypted_data\n     * @param {string} media_encryption_info\n     */\n    constructor(encrypted_data, media_encryption_info) {\n        const ptr0 = passArray8ToWasm0(encrypted_data, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(media_encryption_info, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.encryptedattachment_new(ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EncryptedAttachmentFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * The actual encrypted data.\n     *\n     * **Warning**: It returns a **copy** of the entire encrypted\n     * data; be nice with your memory.\n     * @returns {Uint8Array}\n     */\n    get encryptedData() {\n        const ret = wasm.encryptedattachment_encryptedData(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Return the media encryption info as a JSON-encoded string. The\n     * structure is fully valid.\n     *\n     * If the media encryption info have been consumed already, it\n     * will return `null`.\n     * @returns {string | undefined}\n     */\n    get mediaEncryptionInfo() {\n        const ret = wasm.encryptedattachment_mediaEncryptionInfo(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Check whether the media encryption info has been consumed by\n     * `Attachment.decrypt` already.\n     * @returns {boolean}\n     */\n    get hasMediaEncryptionInfoBeenConsumed() {\n        const ret = wasm.encryptedattachment_hasMediaEncryptionInfoBeenConsumed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst EncryptionInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptioninfo_free(ptr >>> 0, 1));\n/**\n * Struct containing information on how an event was decrypted.\n */\nexport class EncryptionInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EncryptionInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        EncryptionInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptioninfo_free(ptr, 0);\n    }\n    /**\n     * The user ID of the event sender. Note this is untrusted data\n     * unless `verification_state` is also trusted.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.encryptioninfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The device ID of the device that sent us the event. Note this\n     * is untrusted data unless `verification_state` is also\n     * trusted.\n     * @returns {DeviceId | undefined}\n     */\n    get senderDevice() {\n        const ret = wasm.encryptioninfo_senderDevice(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device that created the megolm\n     * decryption key originally.\n     * @returns {string | undefined}\n     */\n    get senderCurve25519Key() {\n        const ret = wasm.encryptioninfo_senderCurve25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The signing Ed25519 key that created the megolm key that\n     * was used to decrypt this session.\n     * @returns {string | undefined}\n     */\n    get senderClaimedEd25519Key() {\n        const ret = wasm.encryptioninfo_senderClaimedEd25519Key(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The verification state of the device that sent us the event.\n     * Note this is the state of the device at the time of\n     * decryption. It may change in the future if a device gets\n     * verified or deleted.\n     *\n     * # Arguments\n     *\n     * * `strict` - whether to enable \"strict mode\" verification. In non-strict\n     *   mode, unverified users are given no shield, and keys that have been\n     *   forwarded or restored from an insecure backup are given a grey shield\n     *   (both get a red shield in strict mode).\n     * @param {boolean} strict\n     * @returns {ShieldState}\n     */\n    shieldState(strict) {\n        const ret = wasm.encryptioninfo_shieldState(this.__wbg_ptr, strict);\n        return ShieldState.__wrap(ret);\n    }\n}\n\nconst EncryptionSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_encryptionsettings_free(ptr >>> 0, 1));\n/**\n * Settings for an encrypted room.\n *\n * This determines the algorithm and rotation periods of a group\n * session.\n */\nexport class EncryptionSettings {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EncryptionSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_encryptionsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_encryptionsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_encryptionsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @returns {bigint}\n     */\n    get rotationPeriod() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriod(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How long the session should be used before changing it,\n     * expressed in microseconds.\n     * @param {bigint} arg0\n     */\n    set rotationPeriod(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriod(this.__wbg_ptr, arg0);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @returns {bigint}\n     */\n    get rotationPeriodMessages() {\n        const ret = wasm.__wbg_get_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr);\n        return BigInt.asUintN(64, ret);\n    }\n    /**\n     * How many messages should be sent before changing the session.\n     * @param {bigint} arg0\n     */\n    set rotationPeriodMessages(arg0) {\n        wasm.__wbg_set_encryptionsettings_rotationPeriodMessages(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @returns {HistoryVisibility}\n     */\n    get historyVisibility() {\n        const ret = wasm.__wbg_get_encryptionsettings_historyVisibility(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The history visibility of the room when the session was\n     * created.\n     * @param {HistoryVisibility} arg0\n     */\n    set historyVisibility(arg0) {\n        wasm.__wbg_set_encryptionsettings_historyVisibility(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @returns {CollectStrategy}\n     */\n    get sharingStrategy() {\n        const ret = wasm.__wbg_get_encryptionsettings_sharingStrategy(this.__wbg_ptr);\n        return CollectStrategy.__wrap(ret);\n    }\n    /**\n     * Should untrusted devices receive the room key, or should they be\n     * excluded from the conversation.\n     * @param {CollectStrategy} arg0\n     */\n    set sharingStrategy(arg0) {\n        _assertClass(arg0, CollectStrategy);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_encryptionsettings_sharingStrategy(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Create a new `EncryptionSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.encryptionsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        EncryptionSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst EstablishedEciesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_establishedecies_free(ptr >>> 0, 1));\n/**\n * An established ECIES session.\n *\n * This session can be used to encrypt and decrypt messages between the two\n * sides of the channel.\n */\nexport class EstablishedEcies {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EstablishedEcies.prototype);\n        obj.__wbg_ptr = ptr;\n        EstablishedEciesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EstablishedEciesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_establishedecies_free(ptr, 0);\n    }\n    /**\n     * Get our [`Curve25519PublicKey`].\n     *\n     * This public key needs to be sent to the other side so that it can\n     * complete the ECIES channel establishment.\n     * @returns {Curve25519PublicKey}\n     */\n    public_key() {\n        const ret = wasm.establishedecies_public_key(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Encrypt the given plaintext using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    encrypt(message) {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_encrypt(this.__wbg_ptr, ptr0, len0);\n            deferred2_0 = ret[0];\n            deferred2_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Decrypt the given message using this [`EstablishedEcies`] session.\n     * @param {string} message\n     * @returns {string}\n     */\n    decrypt(message) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ret = wasm.establishedecies_decrypt(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the [`CheckCode`] which uniquely identifies this\n     * [`EstablishedEcies`] session.\n     *\n     * This check code can be used to verify and confirm that both sides of the\n     * session are indeed using the same shared secret.\n     * @returns {CheckCode}\n     */\n    check_code() {\n        const ret = wasm.establishedecies_check_code(this.__wbg_ptr);\n        return CheckCode.__wrap(ret);\n    }\n}\n\nconst EventIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_eventid_free(ptr >>> 0, 1));\n/**\n * A Matrix [event ID].\n *\n * An `EventId` is generated randomly or converted from a string\n * slice, and can be converted back into a string as needed.\n *\n * [event ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class EventId {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EventIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_eventid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `EventId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.eventid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        EventIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the event's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the event ID.\n     * @returns {ServerName | undefined}\n     */\n    get serverName() {\n        const ret = wasm.eventid_serverName(this.__wbg_ptr);\n        return ret === 0 ? undefined : ServerName.__wrap(ret);\n    }\n    /**\n     * Return the event ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.eventid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst IdentityKeysFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_identitykeys_free(ptr >>> 0, 1));\n/**\n * Struct holding the two public identity keys of an account.\n */\nexport class IdentityKeys {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(IdentityKeys.prototype);\n        obj.__wbg_ptr = ptr;\n        IdentityKeysFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        IdentityKeysFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_identitykeys_free(ptr, 0);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @returns {Ed25519PublicKey}\n     */\n    get ed25519() {\n        const ret = wasm.__wbg_get_identitykeys_ed25519(this.__wbg_ptr);\n        return Ed25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Ed25519 public key, used for signing.\n     * @param {Ed25519PublicKey} arg0\n     */\n    set ed25519(arg0) {\n        _assertClass(arg0, Ed25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_ed25519(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @returns {Curve25519PublicKey}\n     */\n    get curve25519() {\n        const ret = wasm.__wbg_get_identitykeys_curve25519(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The Curve25519 public key, used for establish shared secrets.\n     * @param {Curve25519PublicKey} arg0\n     */\n    set curve25519(arg0) {\n        _assertClass(arg0, Curve25519PublicKey);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_identitykeys_curve25519(this.__wbg_ptr, ptr0);\n    }\n}\n\nconst InboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an inbound ECIES channel establishment.\n */\nexport class InboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The plaintext of the initial message.\n     * @returns {string}\n     */\n    get message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_inboundcreationresult_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The plaintext of the initial message.\n     * @param {string} arg0\n     */\n    set message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst InboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_inboundgroupsession_free(ptr >>> 0, 1));\n/**\n * Inbound group session.\n *\n * Inbound group sessions are used to exchange room messages between a group of\n * participants. Inbound group sessions are used to decrypt the room messages.\n */\nexport class InboundGroupSession {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(InboundGroupSession.prototype);\n        obj.__wbg_ptr = ptr;\n        InboundGroupSessionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_inboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The room where this session is used in.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.inboundgroupsession_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the sender of this session, as a\n     * [Curve25519PublicKey].\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.inboundgroupsession_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Returns the unique identifier for this session.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.inboundgroupsession_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Has the session been imported from a file or server-side backup? As\n     * opposed to being directly received as an `m.room_key` event.\n     * @returns {boolean}\n     */\n    hasBeenImported() {\n        const ret = wasm.inboundgroupsession_hasBeenImported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst KeysBackupRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysbackuprequest_free(ptr >>> 0, 1));\n/**\n * A request that will back up a batch of room keys to the server\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3room_keyskeys\n */\nexport class KeysBackupRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysBackupRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysBackupRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysBackupRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysbackuprequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysbackuprequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysbackuprequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The backup version that these room keys should be part of.\n     * @returns {string}\n     */\n    get version() {\n        const ret = wasm.__wbg_get_keysbackuprequest_version(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysBackupRequest`.\n     * @param {string} id\n     * @param {string} body\n     * @param {string} version\n     */\n    constructor(id, body, version) {\n        const ret = wasm.keysbackuprequest_new(id, body, version);\n        this.__wbg_ptr = ret >>> 0;\n        KeysBackupRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysbackuprequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysClaimRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysclaimrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/claim` API endpoint\n * ([specification]).\n *\n * Claims one-time keys that can be used to establish 1-to-1 E2EE\n * sessions.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysclaim\n */\nexport class KeysClaimRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysClaimRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysClaimRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysClaimRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysclaimrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysclaimrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `one_time_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysclaimrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysClaimRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysclaimrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysClaimRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysclaimrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysQueryRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysqueryrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/query` API endpoint\n * ([specification]).\n *\n * Returns the current devices and identity keys for the given users.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysquery\n */\nexport class KeysQueryRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysQueryRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysQueryRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysQueryRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysqueryrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysqueryrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `timeout`,\n     * `device_keys`, `token`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysqueryrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysQueryRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysqueryrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysQueryRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysqueryrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst KeysUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_keysuploadrequest_free(ptr >>> 0, 1));\n/**\n * Outgoing Requests *\n * Data for a request to the `/keys/upload` API endpoint\n * ([specification]).\n *\n * Publishes end-to-end encryption keys for the device.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keysupload\n */\nexport class KeysUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(KeysUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        KeysUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        KeysUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_keysuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_keysuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `device_keys`,\n     * `one_time_keys`, `fallback_keys`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_keysuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `KeysUploadRequest`.\n     * @param {string} id\n     * @param {string} body\n     */\n    constructor(id, body) {\n        const ret = wasm.keysuploadrequest_new(id, body);\n        this.__wbg_ptr = ret >>> 0;\n        KeysUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.keysuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MaybeSignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_maybesignature_free(ptr >>> 0, 1));\n/**\n * Represents a signature that is either valid _or_ that could not be\n * decoded.\n */\nexport class MaybeSignature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MaybeSignature.prototype);\n        obj.__wbg_ptr = ptr;\n        MaybeSignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MaybeSignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_maybesignature_free(ptr, 0);\n    }\n    /**\n     * Check whether the signature has been successfully decoded.\n     * @returns {boolean}\n     */\n    isValid() {\n        const ret = wasm.maybesignature_isValid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Check whether the signature could not be successfully decoded.\n     * @returns {boolean}\n     */\n    isInvalid() {\n        const ret = wasm.maybesignature_isInvalid(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The signature, if successfully decoded.\n     * @returns {Signature | undefined}\n     */\n    get signature() {\n        const ret = wasm.maybesignature_signature(this.__wbg_ptr);\n        return ret === 0 ? undefined : Signature.__wrap(ret);\n    }\n    /**\n     * The base64 encoded string that is claimed to contain a\n     * signature but could not be decoded, if any.\n     * @returns {string | undefined}\n     */\n    get invalidSignatureSource() {\n        const ret = wasm.maybesignature_invalidSignatureSource(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst MegolmDecryptionErrorFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmdecryptionerror_free(ptr >>> 0, 1));\n/**\n * Js Decryption error with code.\n */\nexport class MegolmDecryptionError {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmDecryptionError.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmDecryptionErrorFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmDecryptionErrorFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmdecryptionerror_free(ptr, 0);\n    }\n    /**\n     * Description code for the error. See `DecryptionErrorCode`\n     * @returns {DecryptionErrorCode}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_code(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * detailed description\n     * @returns {string}\n     */\n    get description() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_description(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Withheld code if any. Only for `UnknownMessageIndex` error code\n     * @returns {string | undefined}\n     */\n    get maybe_withheld() {\n        const ret = wasm.__wbg_get_megolmdecryptionerror_maybe_withheld(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MegolmV1BackupKeyFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_megolmv1backupkey_free(ptr >>> 0, 1));\n/**\n * The public part of the backup key.\n */\nexport class MegolmV1BackupKey {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MegolmV1BackupKey.prototype);\n        obj.__wbg_ptr = ptr;\n        MegolmV1BackupKeyFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MegolmV1BackupKeyFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_megolmv1backupkey_free(ptr, 0);\n    }\n    /**\n     * The actual base64 encoded public key.\n     * @returns {string}\n     */\n    get publicKeyBase64() {\n        const ret = wasm.megolmv1backupkey_publicKeyBase64(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the full name of the backup algorithm this backup key supports.\n     * @returns {string}\n     */\n    get algorithm() {\n        const ret = wasm.megolmv1backupkey_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst MigrationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_migration_free(ptr >>> 0, 1));\n/**\n * Migration routines\n *\n * The public methods are exposed as static methods on this class, for\n * namespacing and to enable easier mocking in unit tests.\n */\nexport class Migration {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MigrationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_migration_free(ptr, 0);\n    }\n    /**\n     * Import the base dataset from a libolm-based setup to a vodozemac-based\n     * setup stored in IndexedDB.\n     *\n     * Populates the user credentials, Olm account, backup data, etc. This is\n     * the first step in the migration process. Once this base data is\n     * imported, further data can be imported with {@link\n     * migrateOlmSessions}, {@link migrateMegolmSessions}, and TODO room\n     * settings.\n     *\n     * # Arguments\n     *\n     * * `data` - The data to be migrated\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   account objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {BaseMigrationData} data\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateBaseData(data, pickle_key, store_handle) {\n        _assertClass(data, BaseMigrationData);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateBaseData(data.__wbg_ptr, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Olm sessions of a libolm-based setup to a vodozemac-based setup\n     * stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledSession}s to import. Items\n     *   inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the olm\n     *   session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateOlmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateOlmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Migrate Megolm sessions of a libolm-based setup to a vodozemac-based\n     * setup stored in an indexedDB crypto store.\n     *\n     * Before this method can be used, {@link migrateBaseData} must be used to\n     * import the base data into the crypto store.\n     *\n     * This method should be called a number of times, with separate batches of\n     * `sessions`. If a progress display is given, it can be updated after\n     * each batch is successfully imported.\n     *\n     * # Arguments\n     *\n     * * `sessions` - An `Array` of {@link PickledInboundGroupSession}s to\n     *   import. Items inside `sessions` will be invalidated by this method.\n     * * `pickle_key` - The libolm pickle key that was used to pickle the\n     *   megolm session objects.\n     * * `store_handle` - A connection to the CryptoStore which will be used to\n     *   store the vodozemac data.\n     * @param {PickledInboundGroupSession[]} sessions\n     * @param {Uint8Array} pickle_key\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static migrateMegolmSessions(sessions, pickle_key, store_handle) {\n        const ptr0 = passArrayJsValueToWasm0(sessions, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.migration_migrateMegolmSessions(ptr0, len0, pickle_key, store_handle.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst OlmMachineFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_olmmachine_free(ptr >>> 0, 1));\n/**\n * State machine implementation of the Olm/Megolm encryption protocol\n * used for Matrix end to end encryption.\n */\nexport class OlmMachine {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OlmMachine.prototype);\n        obj.__wbg_ptr = ptr;\n        OlmMachineFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OlmMachineFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_olmmachine_free(ptr, 0);\n    }\n    /**\n     * Constructor will always fail. To create a new `OlmMachine`, please use\n     * the `initialize` method.\n     *\n     * Why this pattern? `initialize` returns a `Promise`. Returning a\n     */\n    constructor() {\n        const ret = wasm.olmmachine_new();\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        OlmMachineFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Create a new `OlmMachine`.\n     *\n     * The created machine will keep the encryption keys either in a IndexedDB\n     * based store, or in a memory store and once the objects is dropped,\n     * the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `OlmMachine` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   IndexedDB-based store.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<any>}\n     */\n    static initialize(user_id, device_id, store_name, store_passphrase) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_initialize(user_id.__wbg_ptr, device_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Create a new `OlmMachine` backed by an existing store.\n     *\n     * # Arguments\n     *\n     * * `user_id` - represents the unique ID of the user that owns this\n     * machine.\n     *\n     * * `device_id` - represents the unique ID of the device\n     * that owns this machine.\n     *\n     * * `store_handle` - the connection to the crypto store to be used for\n     *   this machine.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {StoreHandle} store_handle\n     * @returns {Promise<any>}\n     */\n    static initFromStore(user_id, device_id, store_handle) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        _assertClass(store_handle, StoreHandle);\n        const ret = wasm.olmmachine_initFromStore(user_id.__wbg_ptr, device_id.__wbg_ptr, store_handle.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The unique user ID that owns this `OlmMachine` instance.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.olmmachine_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The unique device ID that identifies this `OlmMachine`.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.olmmachine_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * The time, in milliseconds since the unix epoch, at which the `Account`\n     * backing this `OlmMachine` was created.\n     *\n     * An `Account` is created when an `OlmMachine` is first instantiated\n     * against a given `Store`, at which point it creates identity keys etc.\n     * This method returns the timestamp, according to the local clock, at\n     * which that happened.\n     * @returns {number}\n     */\n    get deviceCreationTimeMs() {\n        const ret = wasm.olmmachine_deviceCreationTimeMs(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the public parts of our Olm identity keys.\n     * @returns {IdentityKeys}\n     */\n    get identityKeys() {\n        const ret = wasm.olmmachine_identityKeys(this.__wbg_ptr);\n        return IdentityKeys.__wrap(ret);\n    }\n    /**\n     * Get the display name of our own device.\n     * @returns {Promise<any>}\n     */\n    get displayName() {\n        const ret = wasm.olmmachine_displayName(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Whether automatic transmission of room key requests is enabled.\n     *\n     * Room key requests allow the device to request room keys that it might\n     * have missed in the original share using `m.room_key_request`\n     * events.\n     * @returns {boolean}\n     */\n    get roomKeyRequestsEnabled() {\n        const ret = wasm.olmmachine_roomKeyRequestsEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable automatic transmission of room key requests.\n     * @param {boolean} enabled\n     */\n    set roomKeyRequestsEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyRequestsEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Whether room key forwarding is enabled.\n     *\n     * If room key forwarding is enabled, we will automatically reply to\n     * incoming `m.room_key_request` messages from verified devices by\n     * forwarding the requested key (if we have it).\n     * @returns {boolean}\n     */\n    get roomKeyForwardingEnabled() {\n        const ret = wasm.olmmachine_roomKeyForwardingEnabled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Enable or disable room key forwarding.\n     * @param {boolean} enabled\n     */\n    set roomKeyForwardingEnabled(enabled) {\n        wasm.olmmachine_set_roomKeyForwardingEnabled(this.__wbg_ptr, enabled);\n    }\n    /**\n     * Get the list of users whose devices we are currently tracking.\n     *\n     * A user can be marked for tracking using the\n     * [`update_tracked_users`](#method.update_tracked_users) method.\n     *\n     * Returns a `Set<UserId>`.\n     * @returns {Promise<any>}\n     */\n    trackedUsers() {\n        const ret = wasm.olmmachine_trackedUsers(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Update the list of tracked users.\n     *\n     * The OlmMachine maintains a list of users whose devices we are keeping\n     * track of: these are known as \"tracked users\". These must be users\n     * that we share a room with, so that the server sends us updates for\n     * their device lists.\n     *\n     * # Arguments\n     *\n     * * `users` - An array of user ids that should be added to the list of\n     *   tracked users\n     *\n     * Any users that hadn't been seen before will be flagged for a key query\n     * immediately, and whenever `receive_sync_changes` receives a\n     * \"changed\" notification for that user in the future.\n     *\n     * Users that were already in the list are unaffected.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    updateTrackedUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_updateTrackedUsers(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Mark all tracked users as dirty.\n     *\n     * All users *whose device lists we are tracking* are flagged as needing a\n     * key query. Users whose devices we are not tracking are ignored.\n     * @returns {Promise<void>}\n     */\n    markAllTrackedUsersAsDirty() {\n        const ret = wasm.olmmachine_markAllTrackedUsersAsDirty(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Handle to-device events and one-time key counts from a sync\n     * response.\n     *\n     * This will decrypt and handle to-device events returning the\n     * decrypted versions of them.\n     *\n     * To decrypt an event from the room timeline call\n     * `decrypt_room_event`.\n     *\n     * # Arguments\n     *\n     * * `to_device_events`: the JSON-encoded to-device evens from the `/sync`\n     *   response\n     * * `changed_devices`: the mapping of changed and left devices, from the\n     *   `/sync` response\n     * * `one_time_keys_counts`: The number of one-time keys on the server,\n     *   from the `/sync` response. A `Map` from string (encryption algorithm)\n     *   to number (number of keys).\n     * * `unused_fallback_keys`: Optionally, a `Set` of unused fallback keys on\n     *   the server, from the `/sync` response. If this is set, it is used to\n     *   determine if new fallback keys should be uploaded.\n     *\n     * # Returns\n     *\n     * A list of JSON strings, containing the decrypted to-device events.\n     * @param {string} to_device_events\n     * @param {DeviceLists} changed_devices\n     * @param {Map<any, any>} one_time_keys_counts\n     * @param {Set<any> | null} [unused_fallback_keys]\n     * @returns {Promise<any>}\n     */\n    receiveSyncChanges(to_device_events, changed_devices, one_time_keys_counts, unused_fallback_keys) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(changed_devices, DeviceLists);\n        const ret = wasm.olmmachine_receiveSyncChanges(this.__wbg_ptr, ptr0, len0, changed_devices.__wbg_ptr, one_time_keys_counts, isLikeNone(unused_fallback_keys) ? 0 : addToExternrefTable0(unused_fallback_keys));\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the outgoing requests that need to be sent out.\n     *\n     * This returns a list of values, each of which can be any of:\n     *   * {@link KeysUploadRequest},\n     *   * {@link KeysQueryRequest},\n     *   * {@link KeysClaimRequest},\n     *   * {@link ToDeviceRequest},\n     *   * {@link SignatureUploadRequest},\n     *   * {@link RoomMessageRequest}, or\n     *   * {@link KeysBackupRequest}.\n     *\n     * Those requests need to be sent out to the server and the\n     * responses need to be passed back to the state machine\n     * using {@link OlmMachine.markRequestAsSent}.\n     * @returns {Promise<any>}\n     */\n    outgoingRequests() {\n        const ret = wasm.olmmachine_outgoingRequests(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Mark the request with the given request ID as sent (see\n     * `outgoing_requests`).\n     *\n     * Arguments are:\n     *\n     * * `request_id` represents the unique ID of the request that was sent\n     *   out. This is needed to couple the response with the now sent out\n     *   request.\n     * * `response_type` represents the type of the request that was sent out.\n     * * `response` represents the response that was received from the server\n     *   after the outgoing request was sent out.\n     * @param {string} request_id\n     * @param {RequestType} request_type\n     * @param {string} response\n     * @returns {Promise<any>}\n     */\n    markRequestAsSent(request_id, request_type, response) {\n        const ptr0 = passStringToWasm0(request_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(response, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_markRequestAsSent(this.__wbg_ptr, ptr0, len0, request_type, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Encrypt a room message for the given room.\n     *\n     * **Note**: A room key needs to be shared with the group of users that are\n     * members in the given room. If this is not done this method will panic.\n     *\n     * The usual flow to encrypt an event using this state machine is as\n     * follows:\n     *\n     * 1. Get the one-time key claim request to establish 1:1 Olm sessions for\n     *    the room members of the room we wish to participate in. This is done\n     *    using the [`get_missing_sessions()`](Self::get_missing_sessions)\n     *    method. This method call should be locked per call.\n     *\n     * 2. Share a room key with all the room members using the\n     *    [`share_room_key()`](Self::share_room_key). This method call should\n     *    be locked per room.\n     *\n     * 3. Encrypt the event using this method.\n     *\n     * 4. Send the encrypted event to the server.\n     *\n     * After the room key is shared steps 1 and 2 will become noops, unless\n     * there's some changes in the room membership or in the list of devices a\n     * member has.\n     *\n     *\n     * `room_id` is the ID of the room for which the message should\n     * be encrypted. `event_type` is the type of the event. `content`\n     * is the plaintext content of the message that should be\n     * encrypted.\n     *\n     * # Panics\n     *\n     * Panics if a group session for the given room wasn't shared\n     * beforehand.\n     * @param {RoomId} room_id\n     * @param {string} event_type\n     * @param {string} content\n     * @returns {Promise<any>}\n     */\n    encryptRoomEvent(room_id, event_type, content) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passStringToWasm0(event_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(content, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_encryptRoomEvent(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Decrypt an event from a room timeline.\n     *\n     * # Arguments\n     *\n     * * `event`, the event that should be decrypted.\n     * * `room_id`, the ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * A `Promise` which resolves to a {@link DecryptedRoomEvent} instance, or\n     * rejects with a {@link MegolmDecryptionError} instance.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @param {DecryptionSettings} decryption_settings\n     * @returns {Promise<any>}\n     */\n    decryptRoomEvent(event, room_id, decryption_settings) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        _assertClass(decryption_settings, DecryptionSettings);\n        const ret = wasm.olmmachine_decryptRoomEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr, decryption_settings.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get encryption info for a decrypted timeline event.\n     *\n     * This recalculates the `EncryptionInfo` data that is returned by\n     * `decryptRoomEvent`, based on the current\n     * verification status of the sender, etc.\n     *\n     * Returns an error for an unencrypted event.\n     *\n     * # Arguments\n     *\n     * * `event` - The event to get information for.\n     * * `room_id` - The ID of the room where the event was sent to.\n     *\n     * # Returns\n     *\n     * {@link EncryptionInfo}\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomEventEncryptionInfo(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomEventEncryptionInfo(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get the status of the private cross signing keys.\n     *\n     * This can be used to check which private cross signing keys we\n     * have stored locally.\n     * @returns {Promise<any>}\n     */\n    crossSigningStatus() {\n        const ret = wasm.olmmachine_crossSigningStatus(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Export all the secrets we have in the store into a {@link\n     * SecretsBundle}.\n     *\n     * This method will export all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version.\n     *\n     * The method will fail if we don't have all three private cross-signing\n     * keys available.\n     *\n     * **Warning**: Only export this and share it with a trusted recipient,\n     * i.e. if an existing device is sharing this with a new device.\n     * @returns {Promise<SecretsBundle>}\n     */\n    exportSecretsBundle() {\n        const ret = wasm.olmmachine_exportSecretsBundle(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import and persists secrets from a {@link SecretsBundle}.\n     *\n     * This method will import all the private cross-signing keys and, if\n     * available, the private part of a backup key and its accompanying\n     * version into the store.\n     *\n     * **Warning**: Only import this from a trusted source, i.e. if an existing\n     * device is sharing this with a new device. The imported cross-signing\n     * keys will create a {@link OwnUserIdentity} and mark it as verified.\n     *\n     * The backup key will be persisted in the store and can be enabled using\n     * the BackupMachine.\n     *\n     * The provided `SecretsBundle` is freed by this method; be careful not to\n     * use it once this method has been called.\n     * @param {SecretsBundle} bundle\n     * @returns {Promise<void>}\n     */\n    importSecretsBundle(bundle) {\n        _assertClass(bundle, SecretsBundle);\n        var ptr0 = bundle.__destroy_into_raw();\n        const ret = wasm.olmmachine_importSecretsBundle(this.__wbg_ptr, ptr0);\n        return ret;\n    }\n    /**\n     * Export all the private cross signing keys we have.\n     *\n     * The export will contain the seeds for the ed25519 keys as\n     * unpadded base64 encoded strings.\n     *\n     * Returns `null` if we don’t have any private cross signing keys;\n     * otherwise returns a `CrossSigningKeyExport`.\n     * @returns {Promise<any>}\n     */\n    exportCrossSigningKeys() {\n        const ret = wasm.olmmachine_exportCrossSigningKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Import our private cross signing keys.\n     *\n     * The keys should be provided as unpadded-base64-encoded strings.\n     *\n     * Returns a `CrossSigningStatus`.\n     * @param {string | null} [master_key]\n     * @param {string | null} [self_signing_key]\n     * @param {string | null} [user_signing_key]\n     * @returns {Promise<any>}\n     */\n    importCrossSigningKeys(master_key, self_signing_key, user_signing_key) {\n        var ptr0 = isLikeNone(master_key) ? 0 : passStringToWasm0(master_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(self_signing_key) ? 0 : passStringToWasm0(self_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(user_signing_key) ? 0 : passStringToWasm0(user_signing_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importCrossSigningKeys(this.__wbg_ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        return ret;\n    }\n    /**\n     * Create a new cross signing identity and get the upload request\n     * to push the new public keys to the server.\n     *\n     * Warning: This will delete any existing cross signing keys that\n     * might exist on the server and thus will reset the trust\n     * between all the devices.\n     *\n     * Uploading these keys will require user interactive auth.\n     *\n     * # Arguments\n     *\n     * * `reset`, whether the method should create a new identity or use the\n     *   existing one during the request. If set to true, the request will\n     *   attempt to upload a new identity. If set to false, the request will\n     *   attempt to upload the existing identity. Since the uploading process\n     *   requires user interactive authentication, which involves sending out\n     *   the same request multiple times, setting this argument to false\n     *   enables you to reuse the same request.\n     *\n     * Returns a {@link CrossSigningBootstrapRequests}.\n     * @param {boolean} reset\n     * @returns {Promise<any>}\n     */\n    bootstrapCrossSigning(reset) {\n        const ret = wasm.olmmachine_bootstrapCrossSigning(this.__wbg_ptr, reset);\n        return ret;\n    }\n    /**\n     * Get the cross signing user identity of a user.\n     *\n     * Returns a promise for an {@link OwnUserIdentity}, a\n     * {@link OtherUserIdentity}, or `undefined`.\n     * @param {UserId} user_id\n     * @returns {Promise<any>}\n     */\n    getIdentity(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getIdentity(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Sign the given message using our device key and if available\n     * cross-signing master key.\n     * @param {string} message\n     * @returns {Promise<any>}\n     */\n    sign(message) {\n        const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_sign(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Invalidate the currently active outbound group session for the\n     * given room.\n     *\n     * Returns true if a session was invalidated, false if there was\n     * no session to invalidate.\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    invalidateGroupSession(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_invalidateGroupSession(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get to-device requests to share a room key with users in a room.\n     *\n     * `room_id` is the room ID. `users` is an array of `UserId`\n     * objects. `encryption_settings` are an `EncryptionSettings`\n     * object.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight for the same room, e.g. using a lock.\n     *\n     * Returns an array of `ToDeviceRequest`s.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {RoomId} room_id\n     * @param {UserId[]} users\n     * @param {EncryptionSettings} encryption_settings\n     * @returns {Promise<any>}\n     */\n    shareRoomKey(room_id, users, encryption_settings) {\n        _assertClass(room_id, RoomId);\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(encryption_settings, EncryptionSettings);\n        const ret = wasm.olmmachine_shareRoomKey(this.__wbg_ptr, room_id.__wbg_ptr, ptr0, len0, encryption_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate an \"out-of-band\" key query request for the given set of users.\n     *\n     * This can be useful if we need the results from `getIdentity` or\n     * `getUserDevices` to be as up-to-date as possible.\n     *\n     * Returns a `KeysQueryRequest` object. The response of the request should\n     * be passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {KeysQueryRequest}\n     */\n    queryKeysForUsers(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_queryKeysForUsers(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return KeysQueryRequest.__wrap(ret[0]);\n    }\n    /**\n     * Get the a key claiming request for the user/device pairs that\n     * we are missing Olm sessions for.\n     *\n     * Returns `null` if no key claiming request needs to be sent\n     * out, otherwise it returns a `KeysClaimRequest` object.\n     *\n     * Sessions need to be established between devices so group\n     * sessions for a room can be shared with them.\n     *\n     * This should be called every time a group session needs to be\n     * shared as well as between sync calls. After a sync some\n     * devices may request room keys without us having a valid Olm\n     * session with them, making it impossible to server the room key\n     * request, thus it’s necessary to check for missing sessions\n     * between sync as well.\n     *\n     * Note: Care should be taken that only one such request at a\n     * time is in flight, e.g. using a lock.\n     *\n     * The response of a successful key claiming requests needs to be\n     * passed to the `OlmMachine` with the `mark_request_as_sent`.\n     *\n     * `users` represents the list of users that we should check if\n     * we lack a session with one of their devices. This can be an\n     * empty iterator when calling this method between sync requests.\n     *\n     * Items inside `users` will be invalidated by this method. Be careful not\n     * to use the `UserId`s after this method has been called.\n     * @param {UserId[]} users\n     * @returns {Promise<any>}\n     */\n    getMissingSessions(users) {\n        const ptr0 = passArrayJsValueToWasm0(users, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getMissingSessions(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get a map holding all the devices of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * A {@link UserDevices} object.\n     * @param {UserId} user_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getUserDevices(user_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getUserDevices(this.__wbg_ptr, user_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a specific device of a user.\n     *\n     * ### Parameters\n     *\n     * * `user_id` - The unique ID of the user that the device belongs to.\n     *\n     * * `device_id` - The unique ID of the device.\n     *\n     * * `timeout_secs` - The amount of time we should wait for a `/keys/query`\n     *   response before returning if the user's device list has been marked as\n     *   stale. **Note**, this assumes that the requests from {@link\n     *   OlmMachine.outgoingRequests} are being processed and sent out.\n     *\n     *   If unset, we will return immediately even if the device list is stale.\n     *\n     * ### Returns\n     *\n     * If the device is known, a {@link Device}. Otherwise, `undefined`.\n     * @param {UserId} user_id\n     * @param {DeviceId} device_id\n     * @param {number | null} [timeout_secs]\n     * @returns {Promise<any>}\n     */\n    getDevice(user_id, device_id, timeout_secs) {\n        _assertClass(user_id, UserId);\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.olmmachine_getDevice(this.__wbg_ptr, user_id.__wbg_ptr, device_id.__wbg_ptr, !isLikeNone(timeout_secs), isLikeNone(timeout_secs) ? 0 : timeout_secs);\n        return ret;\n    }\n    /**\n     * Get a verification object for the given user ID with the given\n     * flow ID (a to-device request ID if the verification has been\n     * requested by a to-device request, or a room event ID if the\n     * verification has been requested by a room event).\n     *\n     * It returns a “`Verification` object”, which is either a `Sas`\n     * or `Qr` object.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {any}\n     */\n    getVerification(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerification(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Get a verification request object with the given flow ID.\n     * @param {UserId} user_id\n     * @param {string} flow_id\n     * @returns {VerificationRequest | undefined}\n     */\n    getVerificationRequest(user_id, flow_id) {\n        _assertClass(user_id, UserId);\n        const ptr0 = passStringToWasm0(flow_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getVerificationRequest(this.__wbg_ptr, user_id.__wbg_ptr, ptr0, len0);\n        return ret === 0 ? undefined : VerificationRequest.__wrap(ret);\n    }\n    /**\n     * Get all the verification requests of a given user.\n     * @param {UserId} user_id\n     * @returns {Array<any>}\n     */\n    getVerificationRequests(user_id) {\n        _assertClass(user_id, UserId);\n        const ret = wasm.olmmachine_getVerificationRequests(this.__wbg_ptr, user_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Receive a verification event.\n     *\n     * This method can be used to pass verification events that are happening\n     * in rooms to the `OlmMachine`. The event should be in the decrypted form.\n     * @param {string} event\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    receiveVerificationEvent(event, room_id) {\n        const ptr0 = passStringToWasm0(event, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_receiveVerificationEvent(this.__wbg_ptr, ptr0, len0, room_id.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Export the keys that match the given predicate.\n     *\n     * `predicate` is a closure that will be called for every known\n     * `InboundGroupSession`, which represents a room key. If the closure\n     * returns `true`, the `InboundGroupSession` will be included in the\n     * export; otherwise it won't.\n     *\n     * Returns a Promise containing a Result containing a String which is a\n     * JSON-encoded array of ExportedRoomKey objects.\n     * @param {Function} predicate\n     * @returns {Promise<any>}\n     */\n    exportRoomKeys(predicate) {\n        const ret = wasm.olmmachine_exportRoomKeys(this.__wbg_ptr, predicate);\n        return ret;\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * Mostly, a deprecated alias for `importExportedRoomKeys`, though the\n     * return type is different.\n     *\n     * Returns a String containing a JSON-encoded object, holding three\n     * properties:\n     *  * `total_count` (the total number of keys found in the export data).\n     *  * `imported_count` (the number of keys that were imported).\n     *  * `keys` (the keys that were imported; a map from room id to a map of\n     *    the sender key to a list of session ids).\n     *\n     * @deprecated Use `importExportedRoomKeys` or `importBackedUpRoomKeys`.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * `exported_keys` is a JSON-encoded list of previously exported keys that\n     * should be imported into our store. If we already have a better\n     * version of a key, the key will _not_ be imported.\n     *\n     * `progress_listener` is a closure that takes 2 `BigInt` arguments:\n     * `progress` and `total`, and returns nothing.\n     *\n     * Returns a {@link RoomKeyImportResult}.\n     * @param {string} exported_room_keys\n     * @param {Function} progress_listener\n     * @returns {Promise<any>}\n     */\n    importExportedRoomKeys(exported_room_keys, progress_listener) {\n        const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importExportedRoomKeys(this.__wbg_ptr, ptr0, len0, progress_listener);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Import the given room keys into our store.\n     *\n     * # Arguments\n     *\n     * * `backed_up_room_keys`: keys that were retrieved from backup and that\n     *   should be added to our store (provided they are better than our\n     *   current versions of those keys). Specifically, it should be a Map from\n     *   {@link RoomId}, to a Map from session ID to a (decrypted) session data\n     *   structure.\n     *\n     * * `progress_listener`: an optional callback that takes 3 arguments:\n     *   `progress` (the number of keys that have successfully been imported),\n     *   `total` (the total number of keys), and `failures` (the number of keys\n     *   that failed to import), and returns nothing.\n     *\n     * # Returns\n     *\n     * A {@link RoomKeyImportResult}.\n     * @param {Map<any, any>} backed_up_room_keys\n     * @param {Function | null | undefined} progress_listener\n     * @param {string} backup_version\n     * @returns {Promise<any>}\n     */\n    importBackedUpRoomKeys(backed_up_room_keys, progress_listener, backup_version) {\n        const ptr0 = passStringToWasm0(backup_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_importBackedUpRoomKeys(this.__wbg_ptr, backed_up_room_keys, isLikeNone(progress_listener) ? 0 : addToExternrefTable0(progress_listener), ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Store the backup decryption key in the crypto store.\n     *\n     * This is useful if the client wants to support gossiping of the backup\n     * key.\n     *\n     * Returns `Promise<void>`.\n     * @param {BackupDecryptionKey} decryption_key\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    saveBackupDecryptionKey(decryption_key, version) {\n        _assertClass(decryption_key, BackupDecryptionKey);\n        const ptr0 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_saveBackupDecryptionKey(this.__wbg_ptr, decryption_key.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Get the backup keys we have saved in our store.\n     * Returns a `Promise` for {@link BackupKeys}.\n     * @returns {Promise<any>}\n     */\n    getBackupKeys() {\n        const ret = wasm.olmmachine_getBackupKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Check if the given backup has been verified by us or by another of our\n     * devices that we trust.\n     *\n     * The `backup_info` should be a Javascript object with the following\n     * format:\n     *\n     * ```json\n     * {\n     *     \"algorithm\": \"m.megolm_backup.v1.curve25519-aes-sha2\",\n     *     \"auth_data\": {\n     *         \"public_key\":\"XjhWTCjW7l59pbfx9tlCBQolfnIQWARoKOzjTOPSlWM\",\n     *         \"signatures\": {}\n     *     }\n     * }\n     * ```\n     *\n     * Returns a {@link SignatureVerification} object.\n     * @param {any} backup_info\n     * @returns {Promise<any>}\n     */\n    verifyBackup(backup_info) {\n        const ret = wasm.olmmachine_verifyBackup(this.__wbg_ptr, backup_info);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Activate the given backup key to be used with the given backup version.\n     *\n     * **Warning**: The caller needs to make sure that the given `BackupKey` is\n     * trusted, otherwise we might be encrypting room keys that a malicious\n     * party could decrypt.\n     *\n     * The {@link verifyBackup} method can be used to do so.\n     *\n     * Returns `Promise<void>`.\n     * @param {string} public_key_base_64\n     * @param {string} version\n     * @returns {Promise<any>}\n     */\n    enableBackupV1(public_key_base_64, version) {\n        const ptr0 = passStringToWasm0(public_key_base_64, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_enableBackupV1(this.__wbg_ptr, ptr0, len0, ptr1, len1);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Are we able to encrypt room keys.\n     *\n     * This returns true if we have an active `BackupKey` and backup version\n     * registered with the state machine.\n     *\n     * Returns `Promise<bool>`.\n     * @returns {Promise<any>}\n     */\n    isBackupEnabled() {\n        const ret = wasm.olmmachine_isBackupEnabled(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Disable and reset our backup state.\n     *\n     * This will remove any pending backup request, remove the backup key and\n     * reset the backup state of each room key we have.\n     *\n     * Returns `Promise<void>`.\n     * @returns {Promise<any>}\n     */\n    disableBackup() {\n        const ret = wasm.olmmachine_disableBackup(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt a batch of room keys and return a request that needs to be sent\n     * out to backup the room keys.\n     *\n     * Returns an optional {@link KeysBackupRequest}.\n     * @returns {Promise<any>}\n     */\n    backupRoomKeys() {\n        const ret = wasm.olmmachine_backupRoomKeys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the number of backed up room keys and the total number of room keys.\n     * Returns a {@link RoomKeyCounts}.\n     * @returns {Promise<any>}\n     */\n    roomKeyCounts() {\n        const ret = wasm.olmmachine_roomKeyCounts(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Encrypt the list of exported room keys using the given passphrase.\n     *\n     * `exported_room_keys` is a list of sessions that should be encrypted\n     * (it's generally returned by `export_room_keys`). `passphrase` is the\n     * passphrase that will be used to encrypt the exported room keys. And\n     * `rounds` is the number of rounds that should be used for the key\n     * derivation when the passphrase gets turned into an AES key. More rounds\n     * are increasingly computationnally intensive and as such help against\n     * brute-force attacks. Should be at least `10_000`, while values in the\n     * `100_000` ranges should be preferred.\n     * @param {string} exported_room_keys\n     * @param {string} passphrase\n     * @param {number} rounds\n     * @returns {string}\n     */\n    static encryptExportedRoomKeys(exported_room_keys, passphrase, rounds) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_encryptExportedRoomKeys(ptr0, len0, ptr1, len1, rounds);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Try to decrypt a reader into a list of exported room keys.\n     *\n     * `encrypted_exported_room_keys` is the result from\n     * `encrypt_exported_room_keys`. `passphrase` is the passphrase that was\n     * used when calling `encrypt_exported_room_keys`.\n     * @param {string} encrypted_exported_room_keys\n     * @param {string} passphrase\n     * @returns {string}\n     */\n    static decryptExportedRoomKeys(encrypted_exported_room_keys, passphrase) {\n        let deferred4_0;\n        let deferred4_1;\n        try {\n            const ptr0 = passStringToWasm0(encrypted_exported_room_keys, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ret = wasm.olmmachine_decryptExportedRoomKeys(ptr0, len0, ptr1, len1);\n            var ptr3 = ret[0];\n            var len3 = ret[1];\n            if (ret[3]) {\n                ptr3 = 0; len3 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred4_0 = ptr3;\n            deferred4_1 = len3;\n            return getStringFromWasm0(ptr3, len3);\n        } finally {\n            wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);\n        }\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a room key.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeyUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeyUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever we receive a\n     * notification that some room keys have been withheld.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of {@link RoomKeyWithheldInfo}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerRoomKeysWithheldCallback(callback) {\n        const ret = wasm.olmmachine_registerRoomKeysWithheldCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a user identity.\n     *\n     * `callback` should be a function that takes a single argument (a {@link\n     * UserId}) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerUserIdentityUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerUserIdentityUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * a device.\n     *\n     * `callback` should be a function that takes a single argument (an array\n     * of user IDs as strings) and returns a Promise.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerDevicesUpdatedCallback(callback) {\n        const ret = wasm.olmmachine_registerDevicesUpdatedCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever a secret\n     * (`m.secret.send`) is received.\n     *\n     * The only secret this will currently broadcast is the\n     * `m.megolm_backup.v1` (the cross signing secrets are handled internally).\n     *\n     * To request a secret from other devices, a client sends an\n     * `m.secret.request` device event with `action` set to `request` and\n     * `name` set to the identifier of the secret. A device that wishes to\n     * share the secret will reply with an `m.secret.send` event, encrypted\n     * using olm.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from a one of the user's own verified devices.\n     *\n     * See https://matrix-org.github.io/matrix-rust-sdk/matrix_sdk_crypto/store/struct.Store.html#method.secrets_stream for more information.\n     *\n     * `callback` should be a function that takes 2 arguments: the secret name\n     * (string) and value (string).\n     *\n     * **Note**: if the secret is valid and handled on the javascript side, the\n     * secret inbox should be cleared by calling\n     * `delete_secrets_from_inbox`.\n     * @param {Function} callback\n     * @returns {Promise<void>}\n     */\n    registerReceiveSecretCallback(callback) {\n        const ret = wasm.olmmachine_registerReceiveSecretCallback(this.__wbg_ptr, callback);\n        return ret;\n    }\n    /**\n     * Get all the secrets with the given secret_name we have currently\n     * stored.\n     * The only secret this will currently return is the\n     * `m.megolm_backup.v1` secret.\n     *\n     * Usually you would just register a callback with\n     * [`register_receive_secret_callback`], but if the client is shut down\n     * before handling them, this method can be used to retrieve them.\n     * This method should therefore be called at client startup to retrieve any\n     * secrets received during the previous session.\n     *\n     * The secrets are guaranteed to have been received over a 1-to-1 encrypted\n     * to_device message from one of the user's own verified devices.\n     *\n     * Returns a `Promise` for a `Set` of `String` corresponding to the secret\n     * values.\n     *\n     * If the secret is valid and handled, the secret inbox should be cleared\n     * by calling `delete_secrets_from_inbox`.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    getSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_getSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Delete all secrets with the given secret name from the inbox.\n     *\n     * Should be called after handling the secrets with\n     * `get_secrets_from_inbox`.\n     *\n     * # Arguments\n     *\n     * * `secret_name` - The name of the secret to delete.\n     * @param {string} secret_name\n     * @returns {Promise<Promise<any>>}\n     */\n    deleteSecretsFromInbox(secret_name) {\n        const ptr0 = passStringToWasm0(secret_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.olmmachine_deleteSecretsFromInbox(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n    /**\n     * Request missing local secrets from our other trusted devices.\n     *\n     * \"Local secrets\" refers to secrets which can be shared between trusted\n     * devices, such as private cross-signing keys, and the megolm backup\n     * decryption key.\n     *\n     * This method will cause the sdk to generated outgoing secret requests\n     * (`m.secret.request`) to get the missing secrets. These requests will\n     * then be returned by a future call to {@link\n     * OlmMachine#outgoingRequests}.\n     *\n     * # Returns\n     *\n     * A `Promise` for a `bool` result, which will be true if  secrets were\n     * missing, and a request was generated.\n     * @returns {Promise<Promise<any>>}\n     */\n    requestMissingSecretsIfNeeded() {\n        const ret = wasm.olmmachine_requestMissingSecretsIfNeeded(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the stored room settings, such as the encryption algorithm or\n     * whether to encrypt only for trusted devices.\n     *\n     * These settings can be modified via {@link setRoomSettings}.\n     *\n     * # Returns\n     *\n     * `Promise<RoomSettings|undefined>`\n     * @param {RoomId} room_id\n     * @returns {Promise<any>}\n     */\n    getRoomSettings(room_id) {\n        _assertClass(room_id, RoomId);\n        const ret = wasm.olmmachine_getRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Store encryption settings for the given room.\n     *\n     * This method checks if the new settings are \"safe\" -- ie, that they do\n     * not represent a downgrade in encryption security from any previous\n     * settings. Attempts to downgrade security will result in an error.\n     *\n     * If the settings are valid, they will be persisted to the crypto store.\n     * These settings are not used directly by this library, but the saved\n     * settings can be retrieved via {@link getRoomSettings}.\n     * @param {RoomId} room_id\n     * @param {RoomSettings} room_settings\n     * @returns {Promise<void>}\n     */\n    setRoomSettings(room_id, room_settings) {\n        _assertClass(room_id, RoomId);\n        _assertClass(room_settings, RoomSettings);\n        const ret = wasm.olmmachine_setRoomSettings(this.__wbg_ptr, room_id.__wbg_ptr, room_settings.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Manage dehydrated devices\n     * @returns {DehydratedDevices}\n     */\n    dehydratedDevices() {\n        const ret = wasm.olmmachine_dehydratedDevices(this.__wbg_ptr);\n        return DehydratedDevices.__wrap(ret);\n    }\n    /**\n     * Shut down the `OlmMachine`.\n     *\n     * The `OlmMachine` cannot be used after this method has been called.\n     *\n     * All associated resources will be closed too, like IndexedDB\n     * connections.\n     */\n    close() {\n        const ptr = this.__destroy_into_raw();\n        wasm.olmmachine_close(ptr);\n    }\n}\n\nconst OtherUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_otheruseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that isn't our own. Other users will\n * only contain a master key and a self signing key, meaning that only device\n * signatures can be checked with this identity.\n *\n * This struct wraps a read-only version of the struct and allows verifications\n * to be requested to verify our own device with the user identity.\n */\nexport class OtherUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OtherUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OtherUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OtherUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_otheruseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.otheruseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Manually verify this user.\n     *\n     * This method will attempt to sign the user identity using our private\n     * cross signing key.\n     *\n     * This method fails if we don't have the private part of our user-signing\n     * key.\n     *\n     * Returns a request that needs to be sent out for the user to be marked as\n     * verified.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.otheruseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a `VerificationRequest` object after the verification\n     * request content has been sent out.\n     * @param {RoomId} room_id\n     * @param {EventId} request_event_id\n     * @param {any[] | null} [methods]\n     * @returns {VerificationRequest}\n     */\n    requestVerification(room_id, request_event_id, methods) {\n        _assertClass(room_id, RoomId);\n        _assertClass(request_event_id, EventId);\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.otheruseridentity_requestVerification(this.__wbg_ptr, room_id.__wbg_ptr, request_event_id.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return VerificationRequest.__wrap(ret[0]);\n    }\n    /**\n     * Send a verification request to the given user.\n     *\n     * The returned content needs to be sent out into a DM room with the given\n     * user.\n     *\n     * After the content has been sent out a VerificationRequest can be started\n     * with the `request_verification` method.\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    verificationRequestContent(methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.otheruseridentity_verificationRequestContent(this.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.otheruseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Pin the current identity (public part of the master signing key).\n     * @returns {Promise<any>}\n     */\n    pinCurrentMasterKey() {\n        const ret = wasm.otheruseridentity_pinCurrentMasterKey(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the identity changed in a way that requires approval from the user?\n     *\n     * A user identity needs approval if it changed after the crypto machine\n     * has already observed (\"pinned\") a different identity for that user,\n     * unless it is an explicitly verified identity (using for example\n     * interactive verification).\n     *\n     * This situation can be resolved by:\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Updating the pin to the new identity with {@link pinCurrentMasterKey}.\n     * @returns {boolean}\n     */\n    identityNeedsUserApproval() {\n        const ret = wasm.otheruseridentity_identityNeedsUserApproval(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * True if we verified this identity (with any own identity, at any\n     * point).\n     *\n     * To set this latch back to false, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.otheruseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not anymore it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.otheruseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.otheruseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst OutboundCreationResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_outboundcreationresult_free(ptr >>> 0, 1));\n/**\n * The result of an outbound ECIES channel establishment.\n */\nexport class OutboundCreationResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OutboundCreationResult.prototype);\n        obj.__wbg_ptr = ptr;\n        OutboundCreationResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OutboundCreationResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_outboundcreationresult_free(ptr, 0);\n    }\n    /**\n     * The established ECIES channel.\n     * @returns {EstablishedEcies}\n     */\n    get channel() {\n        const ret = wasm.__wbg_get_inboundcreationresult_channel(this.__wbg_ptr);\n        return EstablishedEcies.__wrap(ret);\n    }\n    /**\n     * The established ECIES channel.\n     * @param {EstablishedEcies} arg0\n     */\n    set channel(arg0) {\n        _assertClass(arg0, EstablishedEcies);\n        var ptr0 = arg0.__destroy_into_raw();\n        wasm.__wbg_set_inboundcreationresult_channel(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * The initial encrypted message.\n     * @returns {string}\n     */\n    get initial_message() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_outboundcreationresult_initial_message(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The initial encrypted message.\n     * @param {string} arg0\n     */\n    set initial_message(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n}\n\nconst OwnUserIdentityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_ownuseridentity_free(ptr >>> 0, 1));\n/**\n * Struct representing a cross signing identity of a user.\n *\n * This is the user identity of a user that is our own.\n */\nexport class OwnUserIdentity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OwnUserIdentity.prototype);\n        obj.__wbg_ptr = ptr;\n        OwnUserIdentityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        OwnUserIdentityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_ownuseridentity_free(ptr, 0);\n    }\n    /**\n     * Is this user identity verified?\n     * @returns {boolean}\n     */\n    isVerified() {\n        const ret = wasm.ownuseridentity_isVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Mark our user identity as verified.\n     *\n     * This will mark the identity locally as verified and sign it with our own\n     * device.\n     *\n     * Returns a signature upload request that needs to be sent out.\n     * @returns {Promise<any>}\n     */\n    verify() {\n        const ret = wasm.ownuseridentity_verify(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Send a verification request to our other devices.\n     * @param {any[] | null} [methods]\n     * @returns {Promise<any>}\n     */\n    requestVerification(methods) {\n        var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ret = wasm.ownuseridentity_requestVerification(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Does our user identity trust our own device, i.e. have we signed our own\n     * device keys with our self-signing key?\n     * @returns {Promise<any>}\n     */\n    trustsOurOwnDevice() {\n        const ret = wasm.ownuseridentity_trustsOurOwnDevice(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the master key of the identity.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_masterKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the self-signing key of the identity.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_selfSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * Get the user-signing key of the identity. This is only present for our\n     * own user identity.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred2_0;\n        let deferred2_1;\n        try {\n            const ret = wasm.ownuseridentity_userSigningKey(this.__wbg_ptr);\n            var ptr1 = ret[0];\n            var len1 = ret[1];\n            if (ret[3]) {\n                ptr1 = 0; len1 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred2_0 = ptr1;\n            deferred2_1 = len1;\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_free(deferred2_0, deferred2_1, 1);\n        }\n    }\n    /**\n     * True if we verified our own identity at some point in the past.\n     *\n     * To reset this latch back to `false`, call {@link withdrawVerification}.\n     * @returns {boolean}\n     */\n    wasPreviouslyVerified() {\n        const ret = wasm.ownuseridentity_wasPreviouslyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Remove the requirement for this identity to be verified.\n     *\n     * If an identity was previously verified and is not any longer, it will be\n     * reported to the user. In order to remove this notice users have to\n     * verify again or to withdraw the verification requirement.\n     * @returns {Promise<any>}\n     */\n    withdrawVerification() {\n        const ret = wasm.ownuseridentity_withdrawVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Was this identity verified since initial observation and is not anymore?\n     *\n     * Such a violation should be reported to the local user by the\n     * application, and resolved by\n     *\n     * - Verifying the new identity with {@link requestVerification}, or:\n     * - Withdrawing the verification requirement with {@link\n     *   withdrawVerification}.\n     * @returns {boolean}\n     */\n    hasVerificationViolation() {\n        const ret = wasm.ownuseridentity_hasVerificationViolation(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst PickledInboundGroupSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledinboundgroupsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of an `InboundGroupSession`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an InboundGroupSession.\n */\nexport class PickledInboundGroupSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledInboundGroupSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledInboundGroupSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledinboundgroupsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Megolm Session, as returned by\n     * `olm_pickle_inbound_group_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledinboundgroupsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The public curve25519 key of the account that sent us the session.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @returns {string | undefined}\n     */\n    get senderSigningKey() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_senderSigningKey(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * The public ed25519 key of the account that is believed to have initiated\n     * the session, if known.\n     *\n     * If the session was received directly from the creator via an\n     * Olm-encrypted `m.room_key` event, this value is taken from the `keys`\n     * property of the plaintext payload of that event (see\n     * [`m.olm.v1.curve25519-aes-sha2`]).\n     *\n     * If the session was forwarded to us using an [`m.forwarded_room_key`],\n     * this value is a copy of the `sender_claimed_ed25519_key` from the\n     * content of the event.\n     *\n     * [`m.olm.v1.curve25519-aes-sha2`]: https://spec.matrix.org/v1.9/client-server-api/#molmv1curve25519-aes-sha2\n     * [`m.forwarded_room_key`]: https://spec.matrix.org/v1.9/client-server-api/#mforwarded_room_key\n     * @param {string | null} [arg0]\n     */\n    set senderSigningKey(arg0) {\n        var ptr0 = isLikeNone(arg0) ? 0 : passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_basemigrationdata_backupRecoveryKey(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * The id of the room that the session is used in.\n     *\n     * Nullable so that a `PickledInboundGroupSession` can be constructed\n     * incrementally. Must be populated!\n     * @param {RoomId | null} [arg0]\n     */\n    set roomId(arg0) {\n        let ptr0 = 0;\n        if (!isLikeNone(arg0)) {\n            _assertClass(arg0, RoomId);\n            ptr0 = arg0.__destroy_into_raw();\n        }\n        wasm.__wbg_set_pickledinboundgroupsession_roomId(this.__wbg_ptr, ptr0);\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @returns {boolean}\n     */\n    get imported() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_imported(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session was directly sent to us by the sender\n     * or if it was imported.\n     * @param {boolean} arg0\n     */\n    set imported(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_imported(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @returns {boolean}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_pickledinboundgroupsession_backedUp(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Flag remembering if the session has been backed up.\n     * @param {boolean} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_pickledinboundgroupsession_backedUp(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledInboundGroupSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledinboundgroupsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledInboundGroupSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PickledSessionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_pickledsession_free(ptr >>> 0, 1));\n/**\n * A pickled version of a `Session`.\n *\n * Holds all the information that needs to be stored in a database to restore\n * an Olm Session. Can be imported into the rust store with {@link\n * Migration::migrateOlmSessions}.\n */\nexport class PickledSession {\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof PickledSession)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PickledSessionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_pickledsession_free(ptr, 0);\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @returns {string}\n     */\n    get pickle() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_pickle(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The pickle string holding the Olm Session, as returned by\n     * `olm_pickle_session` in libolm.\n     * @param {string} arg0\n     */\n    set pickle(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_key(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @returns {string}\n     */\n    get senderKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.__wbg_get_pickledsession_senderKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The base64-encoded public curve25519 key of the other user that we share\n     * this session with.\n     * @param {string} arg0\n     */\n    set senderKey(arg0) {\n        const ptr0 = passStringToWasm0(arg0, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.__wbg_set_backupsecretsbundle_backup_version(this.__wbg_ptr, ptr0, len0);\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @returns {boolean}\n     */\n    get createdUsingFallbackKey() {\n        const ret = wasm.__wbg_get_pickledsession_createdUsingFallbackKey(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Was the session created using a fallback key?\n     * @param {boolean} arg0\n     */\n    set createdUsingFallbackKey(arg0) {\n        wasm.__wbg_set_pickledsession_createdUsingFallbackKey(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was created.\n     * @returns {Date}\n     */\n    get creationTime() {\n        const ret = wasm.__wbg_get_pickledsession_creationTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was created.\n     * @param {Date} arg0\n     */\n    set creationTime(arg0) {\n        wasm.__wbg_set_pickledsession_creationTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * When the session was last used.\n     * @returns {Date}\n     */\n    get lastUseTime() {\n        const ret = wasm.__wbg_get_pickledsession_lastUseTime(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * When the session was last used.\n     * @param {Date} arg0\n     */\n    set lastUseTime(arg0) {\n        wasm.__wbg_set_pickledsession_lastUseTime(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Construct a new `PickledSession`, with default values.\n     */\n    constructor() {\n        const ret = wasm.pickledsession_new();\n        this.__wbg_ptr = ret >>> 0;\n        PickledSessionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst PutDehydratedDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_putdehydrateddevicerequest_free(ptr >>> 0, 1));\n/**\n * A request that will upload a dehydrated device to the server.\n */\nexport class PutDehydratedDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PutDehydratedDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        PutDehydratedDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PutDehydratedDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_putdehydrateddevicerequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `rooms`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_putdehydrateddevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `PutDehydratedDeviceRequest`\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.putdehydrateddevicerequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        PutDehydratedDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst QrFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qr_free(ptr >>> 0, 1));\n/**\n * QR code based verification.\n */\nexport class Qr {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Qr.prototype);\n        obj.__wbg_ptr = ptr;\n        QrFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qr_free(ptr, 0);\n    }\n    /**\n     * Get the current state of this request.\n     *\n     * Returns a `QrState`.\n     * @returns {QrState}\n     */\n    state() {\n        const ret = wasm.qr_state(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Has the QR verification been scanned by the other side.\n     *\n     * When the verification object is in this state it’s required\n     * that the user confirms that the other side has scanned the QR\n     * code.\n     * @returns {boolean}\n     */\n    hasBeenScanned() {\n        const ret = wasm.qr_hasBeenScanned(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the scanning of the QR code been confirmed by us?\n     * @returns {boolean}\n     */\n    hasBeenConfirmed() {\n        const ret = wasm.qr_hasBeenConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.qr_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other user that is participating in\n     * this verification flow.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.qr_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.qr_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.qr_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.qr_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification flow completed?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.qr_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.qr_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.qr_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we successfully scanned the QR code and are able to send\n     * a reciprocation event?\n     * @returns {boolean}\n     */\n    reciprocated() {\n        const ret = wasm.qr_reciprocated(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the unique ID that identifies this QR verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qr_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room id if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.qr_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Generate a QR code object that is representing this\n     * verification flow.\n     *\n     * The QrCode can then be rendered as an image or as an unicode\n     * string.\n     *\n     * The `to_bytes` method can be used to instead output the raw\n     * bytes that should be encoded as a QR code.\n     *\n     * Returns a `QrCode`.\n     * @returns {QrCode}\n     */\n    toQrCode() {\n        const ret = wasm.qr_toQrCode(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCode.__wrap(ret[0]);\n    }\n    /**\n     * Generate a the raw bytes that should be encoded as a QR code\n     * is representing this verification flow.\n     *\n     * The `to_qr_code` method can be used to instead output a QrCode\n     * object that can be rendered.\n     * @returns {Uint8ClampedArray}\n     */\n    toBytes() {\n        const ret = wasm.qr_toBytes(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Notify the other side that we have successfully scanned the QR\n     * code and that the QR verification flow can start.\n     *\n     * This will return some OutgoingContent if the object is in the\n     * correct state to start the verification flow, otherwise None.\n     * @returns {any}\n     */\n    reciprocate() {\n        const ret = wasm.qr_reciprocate(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm that the other side has scanned our QR code.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already confirmed.\n     * @returns {any}\n     */\n    confirmScanning() {\n        const ret = wasm.qr_confirmScanning(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification flow.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.qr_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qr_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.qr_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst QrCodeFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcode_free(ptr >>> 0, 1));\n/**\n * A QR code.\n */\nexport class QrCode {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCode.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcode_free(ptr, 0);\n    }\n    /**\n     * Render the QR code into a `Uint8ClampedArray` where 1 represents a\n     * dark pixel and 0 a white pixel.\n     * @returns {Uint8ClampedArray}\n     */\n    renderIntoBuffer() {\n        const ret = wasm.qrcode_renderIntoBuffer(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst QrCodeDataFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodedata_free(ptr >>> 0, 1));\n/**\n * Data for the QR code login mechanism.\n *\n * The {@link QrCodeData} can be serialized and encoded as a QR code or it can\n * be decoded from a QR code.\n */\nexport class QrCodeData {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeData.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeDataFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeDataFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodedata_free(ptr, 0);\n    }\n    /**\n     * Create new {@link QrCodeData} from a given public key, a rendezvous URL\n     * and, optionally, a server name for the homeserver.\n     *\n     * If a server name is given, then the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Reciprocate}, i.e. the QR code will contain data for\n     * the existing device to display the QR code.\n     *\n     * If no server name is given, the {@link QrCodeData} mode will be\n     * {@link QrCodeMode.Login}, i.e. the QR code will contain data for the\n     * new device to display the QR code.\n     * @param {Curve25519PublicKey} public_key\n     * @param {string} rendezvous_url\n     * @param {string | null} [server_name]\n     */\n    constructor(public_key, rendezvous_url, server_name) {\n        _assertClass(public_key, Curve25519PublicKey);\n        var ptr0 = public_key.__destroy_into_raw();\n        const ptr1 = passStringToWasm0(rendezvous_url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(server_name) ? 0 : passStringToWasm0(server_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_new(ptr0, ptr1, len1, ptr2, len2);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        QrCodeDataFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Attempt to decode a slice of bytes into a {@link QrCodeData} object.\n     *\n     * The slice of bytes would generally be returned by a QR code decoder.\n     * @param {Uint8Array} bytes\n     * @returns {QrCodeData}\n     */\n    static fromBytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBytes(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a list of bytes.\n     *\n     * The list of bytes can be used by a QR code generator to create an image\n     * containing a QR code.\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        const ret = wasm.qrcodedata_toBytes(this.__wbg_ptr);\n        var v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n        wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        return v1;\n    }\n    /**\n     * Attempt to decode a base64 encoded string into a {@link QrCodeData}\n     * object.\n     * @param {string} data\n     * @returns {QrCodeData}\n     */\n    static fromBase64(data) {\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.qrcodedata_fromBase64(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeData.__wrap(ret[0]);\n    }\n    /**\n     * Encode the {@link QrCodeData} into a string using base64.\n     *\n     * This format can be used for debugging purposes and the\n     * [`QrcodeData::from_base64()`] method can be used to parse the string\n     * again.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the Curve25519 public key embedded in the {@link QrCodeData}.\n     *\n     * This Curve25519 public key should be used to establish an\n     * [ECIES](https://en.wikipedia.org/wiki/Integrated_Encryption_Scheme)\n     * (Elliptic Curve Integrated Encryption Scheme) channel with the other\n     * device.\n     * @returns {Curve25519PublicKey}\n     */\n    get publicKey() {\n        const ret = wasm.qrcodedata_publicKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * Get the URL of the rendezvous server which will be used to exchange\n     * messages between the two devices.\n     * @returns {string}\n     */\n    get rendezvousUrl() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.qrcodedata_rendezvousUrl(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the server name of the homeserver which the new device will be\n     * logged in to.\n     *\n     * This will be only available if the existing device has generated the QR\n     * code and the new device is the one scanning the QR code.\n     * @returns {string | undefined}\n     */\n    get serverName() {\n        const ret = wasm.qrcodedata_serverName(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the mode of this {@link QrCodeData} instance.\n     * @returns {QrCodeMode}\n     */\n    get mode() {\n        const ret = wasm.qrcodedata_mode(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst QrCodeScanFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_qrcodescan_free(ptr >>> 0, 1));\n/**\n * A scanned QR code.\n */\nexport class QrCodeScan {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(QrCodeScan.prototype);\n        obj.__wbg_ptr = ptr;\n        QrCodeScanFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        QrCodeScanFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_qrcodescan_free(ptr, 0);\n    }\n    /**\n     * Parse the decoded payload of a QR code in byte slice form.\n     *\n     * This method is useful if you would like to do your own custom QR code\n     * decoding.\n     * @param {Uint8ClampedArray} buffer\n     * @returns {QrCodeScan}\n     */\n    static fromBytes(buffer) {\n        const ret = wasm.qrcodescan_fromBytes(buffer);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return QrCodeScan.__wrap(ret[0]);\n    }\n}\n\nconst RehydratedDeviceFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_rehydrateddevice_free(ptr >>> 0, 1));\n/**\n * A rehydrated device\n *\n * This device can receive to-device events to get room keys that were send to\n * it.\n */\nexport class RehydratedDevice {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RehydratedDevice.prototype);\n        obj.__wbg_ptr = ptr;\n        RehydratedDeviceFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RehydratedDeviceFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_rehydrateddevice_free(ptr, 0);\n    }\n    /**\n     * Receive the to-device events that sent to the dehydrated device\n     *\n     * The rehydrated device will decrypt the events and pass the room keys\n     * into the `OlmMachine`.\n     *\n     * `to_device_events` is a JSON-encoded result of the `events` array from\n     * `/dehydrated_device/{device_id}/events`.\n     *\n     * Returns an array of `RoomKeyInfo`, indicating the room keys that were\n     * received.\n     * @param {string} to_device_events\n     * @returns {Promise<Array<any>>}\n     */\n    receiveEvents(to_device_events) {\n        const ptr0 = passStringToWasm0(to_device_events, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.rehydrateddevice_receiveEvents(this.__wbg_ptr, ptr0, len0);\n        return ret;\n    }\n}\n\nconst RoomIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomid_free(ptr >>> 0, 1));\n/**\n * A Matrix [room ID].\n *\n * [room ID]: https://spec.matrix.org/v1.2/appendices/#room-ids-and-event-ids\n */\nexport class RoomId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomId.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof RoomId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `RoomId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.roomid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        RoomIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Return the room ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyCountsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeycounts_free(ptr >>> 0, 1));\n/**\n * Struct holding the number of room keys we have.\n */\nexport class RoomKeyCounts {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyCounts.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyCountsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyCountsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeycounts_free(ptr, 0);\n    }\n    /**\n     * The total number of room keys.\n     * @returns {number}\n     */\n    get total() {\n        const ret = wasm.__wbg_get_roomkeycounts_total(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The total number of room keys.\n     * @param {number} arg0\n     */\n    set total(arg0) {\n        wasm.__wbg_set_roomkeycounts_total(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The number of backed up room keys.\n     * @returns {number}\n     */\n    get backedUp() {\n        const ret = wasm.__wbg_get_roomkeycounts_backedUp(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The number of backed up room keys.\n     * @param {number} arg0\n     */\n    set backedUp(arg0) {\n        wasm.__wbg_set_roomkeycounts_backedUp(this.__wbg_ptr, arg0);\n    }\n}\n\nconst RoomKeyImportResultFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyimportresult_free(ptr >>> 0, 1));\n/**\n * The result of a call to {@link OlmMachine.importExportedRoomKeys} or\n * {@link OlmMachine.importBackedUpRoomKeys}.\n */\nexport class RoomKeyImportResult {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyImportResult.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyImportResultFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyImportResultFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyimportresult_free(ptr, 0);\n    }\n    /**\n     * The number of room keys that were imported.\n     * @returns {number}\n     */\n    get importedCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_importedCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The total number of room keys that were found in the export.\n     * @returns {number}\n     */\n    get totalCount() {\n        const ret = wasm.__wbg_get_roomkeyimportresult_totalCount(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * The keys that were imported.\n     *\n     * A Map from room id to a Map of the sender key to a Set of session ids.\n     *\n     * Typescript type: `Map<string, Map<string, Set<string>>`.\n     * @returns {Map<any, any>}\n     */\n    keys() {\n        const ret = wasm.roomkeyimportresult_keys(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomKeyInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeyinfo_free(ptr >>> 0, 1));\n/**\n * Information on a room key that has been received or imported.\n */\nexport class RoomKeyInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeyinfo_free(ptr, 0);\n    }\n    /**\n     * The {@link EncryptionAlgorithm} that this key is used for. Will be one\n     * of the `m.megolm.*` algorithms.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeyinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The room where the key is used.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeyinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The Curve25519 key of the device which initiated the session originally.\n     * @returns {Curve25519PublicKey}\n     */\n    get senderKey() {\n        const ret = wasm.roomkeyinfo_senderKey(this.__wbg_ptr);\n        return Curve25519PublicKey.__wrap(ret);\n    }\n    /**\n     * The ID of the session that the key is for.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeyinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomKeyWithheldInfoFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomkeywithheldinfo_free(ptr >>> 0, 1));\n/**\n * Information on a received `m.room_key.withheld` event.\n */\nexport class RoomKeyWithheldInfo {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomKeyWithheldInfo.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomKeyWithheldInfoFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomKeyWithheldInfoFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomkeywithheldinfo_free(ptr, 0);\n    }\n    /**\n     * The User ID of the user that sent us the `m.room_key.withheld` message.\n     * @returns {UserId}\n     */\n    get sender() {\n        const ret = wasm.roomkeywithheldinfo_sender(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The encryption algorithm of the session that is being withheld.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.roomkeywithheldinfo_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The `code` from the `m.room_key.withheld` message, such as\n     * `m.unverified`.\n     * @returns {string}\n     */\n    get withheldCode() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_withheldCode(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The room ID of the session that is being withheld.\n     * @returns {RoomId}\n     */\n    get roomId() {\n        const ret = wasm.roomkeywithheldinfo_roomId(this.__wbg_ptr);\n        return RoomId.__wrap(ret);\n    }\n    /**\n     * The session ID of the session that is being withheld.\n     * @returns {string}\n     */\n    get sessionId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.roomkeywithheldinfo_sessionId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst RoomMessageRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roommessagerequest_free(ptr >>> 0, 1));\n/**\n * A customized owned request type for sending out room messages\n * ([specification]).\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3roomsroomidsendeventtypetxnid\n */\nexport class RoomMessageRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomMessageRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomMessageRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomMessageRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roommessagerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_roommessagerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the room to send the event to.\n     * @returns {string}\n     */\n    get room_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_room_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the transaction ID for this event.\n     *\n     * Clients should generate an ID unique across requests with the same\n     * access token; it will be used by the server to ensure idempotency of\n     * requests.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_roommessagerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event to be sent.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_roommessagerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the message's content.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_roommessagerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `RoomMessageRequest`.\n     * @param {string} id\n     * @param {string} room_id\n     * @param {string} txn_id\n     * @param {string} event_type\n     * @param {string} content\n     */\n    constructor(id, room_id, txn_id, event_type, content) {\n        const ret = wasm.roommessagerequest_new(id, room_id, txn_id, event_type, content);\n        this.__wbg_ptr = ret >>> 0;\n        RoomMessageRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.roommessagerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst RoomSettingsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_roomsettings_free(ptr >>> 0, 1));\n/**\n * Room encryption settings which are modified by state events or user options\n */\nexport class RoomSettings {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RoomSettings.prototype);\n        obj.__wbg_ptr = ptr;\n        RoomSettingsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RoomSettingsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_roomsettings_free(ptr, 0);\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @returns {EncryptionAlgorithm}\n     */\n    get algorithm() {\n        const ret = wasm.__wbg_get_roomsettings_algorithm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The encryption algorithm that should be used in the room.\n     *\n     * Should be one of the members of {@link EncryptionAlgorithm}.\n     * @param {EncryptionAlgorithm} arg0\n     */\n    set algorithm(arg0) {\n        wasm.__wbg_set_roomsettings_algorithm(this.__wbg_ptr, arg0);\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @returns {boolean}\n     */\n    get onlyAllowTrustedDevices() {\n        const ret = wasm.__wbg_get_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Whether untrusted devices should receive room keys. If this is `false`,\n     * they will be excluded from the conversation.\n     * @param {boolean} arg0\n     */\n    set onlyAllowTrustedDevices(arg0) {\n        wasm.__wbg_set_roomsettings_onlyAllowTrustedDevices(this.__wbg_ptr, arg0);\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMs() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum time, in milliseconds, that an encryption session should be\n     * used for, before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMs(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMs(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @returns {number | undefined}\n     */\n    get sessionRotationPeriodMessages() {\n        const ret = wasm.__wbg_get_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr);\n        return ret[0] === 0 ? undefined : ret[1];\n    }\n    /**\n     * The maximum number of messages an encryption session should be used for,\n     * before it is rotated.\n     * @param {number | null} [arg0]\n     */\n    set sessionRotationPeriodMessages(arg0) {\n        wasm.__wbg_set_roomsettings_sessionRotationPeriodMessages(this.__wbg_ptr, !isLikeNone(arg0), isLikeNone(arg0) ? 0 : arg0);\n    }\n    /**\n     * Create a new `RoomSettings` with default values.\n     */\n    constructor() {\n        const ret = wasm.roomsettings_new();\n        this.__wbg_ptr = ret >>> 0;\n        RoomSettingsFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst SasFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_sas_free(ptr >>> 0, 1));\n/**\n * Short Authentication String (SAS) verification.\n */\nexport class Sas {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Sas.prototype);\n        obj.__wbg_ptr = ptr;\n        SasFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SasFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_sas_free(ptr, 0);\n    }\n    /**\n     * Get our own user ID.\n     * @returns {UserId}\n     */\n    get userId() {\n        const ret = wasm.sas_userId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get our own device ID.\n     * @returns {DeviceId}\n     */\n    get deviceId() {\n        const ret = wasm.sas_deviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the user id of the other side.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.sas_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * Get the device ID of the other side.\n     * @returns {DeviceId}\n     */\n    get otherDeviceId() {\n        const ret = wasm.sas_otherDeviceId(this.__wbg_ptr);\n        return DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the unique ID that identifies this SAS verification flow,\n     * be either a to-device request ID or a room event ID.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.sas_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.sas_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Does this verification flow support displaying emoji for the\n     * short authentication string?\n     * @returns {boolean}\n     */\n    supportsEmoji() {\n        const ret = wasm.sas_supportsEmoji(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did this verification flow start from a verification request?\n     * @returns {boolean}\n     */\n    startedFromRequest() {\n        const ret = wasm.sas_startedFromRequest(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.sas_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Have we confirmed that the short auth string matches?\n     * @returns {boolean}\n     */\n    haveWeConfirmed() {\n        const ret = wasm.sas_haveWeConfirmed(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification been accepted by both parties?\n     * @returns {boolean}\n     */\n    hasBeenAccepted() {\n        const ret = wasm.sas_hasBeenAccepted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get info about the cancellation if the verification flow has\n     * been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    cancelInfo() {\n        const ret = wasm.sas_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * True if we initiated the verification flow (ie, we sent the\n     * `m.key.verification.request`).\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.sas_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the SAS verification.\n     *\n     * This does nothing (and returns `undefined`) if the verification was\n     * already accepted, otherwise it returns an `OutgoingRequest`\n     * that needs to be sent out.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.sas_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Confirm the SAS verification.\n     *\n     * This confirms that the short auth strings match on both sides.\n     *\n     * Does nothing if we’re not in a state where we can confirm the\n     * short auth string.\n     *\n     * Returns a `Promise` for an array of `OutgoingRequest`s.\n     * @returns {Promise<any>}\n     */\n    confirm() {\n        const ret = wasm.sas_confirm(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Cancel the verification.\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.sas_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification.\n     *\n     * This cancels the verification with given code (e.g. `m.user`).\n     *\n     * Returns either an `OutgoingRequest` which should be sent out, or\n     * `undefined` if the verification is already cancelled.\n     * @param {string} code\n     * @returns {any}\n     */\n    cancelWithCode(code) {\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.sas_cancelWithCode(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Has the SAS verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.sas_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Are we in a state where we can show the short auth string?\n     * @returns {boolean}\n     */\n    canBePresented() {\n        const ret = wasm.sas_canBePresented(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow done?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.sas_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the SAS flow cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.sas_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the emoji version of the short auth string.\n     *\n     * Returns `undefined` if we can't yet present the short auth string,\n     * otherwise an array of seven `Emoji` objects.\n     * @returns {Emoji[] | undefined}\n     */\n    emoji() {\n        const ret = wasm.sas_emoji(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the index of the emoji representing the short auth string\n     *\n     * Returns `undefined` if we can’t yet present the short auth\n     * string, otherwise seven `u8` numbers in the range from 0 to 63\n     * inclusive which can be converted to an emoji using [the\n     * relevant specification\n     * entry](https://spec.matrix.org/unstable/client-server-api/#sas-method-emoji).\n     * @returns {Uint8Array | undefined}\n     */\n    emojiIndex() {\n        const ret = wasm.sas_emojiIndex(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU8FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n    /**\n     * Get the decimal version of the short auth string.\n     *\n     * Returns None if we can’t yet present the short auth string,\n     * otherwise a tuple containing three 4-digit integers that\n     * represent the short auth string.\n     * @returns {Uint16Array | undefined}\n     */\n    decimals() {\n        const ret = wasm.sas_decimals(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayU16FromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 2, 2);\n        }\n        return v1;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.sas_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n}\n\nconst SecretsBundleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_secretsbundle_free(ptr >>> 0, 1));\n/**\n * Struct containing the bundle of secrets to fully activate a new device for\n * end-to-end encryption.\n */\nexport class SecretsBundle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SecretsBundle.prototype);\n        obj.__wbg_ptr = ptr;\n        SecretsBundleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SecretsBundleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_secretsbundle_free(ptr, 0);\n    }\n    /**\n     * The seed of the master key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get masterKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_masterKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the self signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get selfSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_selfSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The seed of the user signing key encoded as unpadded base64.\n     * @returns {string}\n     */\n    get userSigningKey() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.secretsbundle_userSigningKey(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * The bundle of the backup decryption key and backup version if any.\n     * @returns {BackupSecretsBundle | undefined}\n     */\n    get backupBundle() {\n        const ret = wasm.secretsbundle_backupBundle(this.__wbg_ptr);\n        return ret === 0 ? undefined : BackupSecretsBundle.__wrap(ret);\n    }\n    /**\n     * Serialize the [`SecretsBundle`] to a JSON object.\n     * @returns {any}\n     */\n    to_json() {\n        const ret = wasm.secretsbundle_to_json(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Deserialize the [`SecretsBundle`] from a JSON object.\n     * @param {any} json\n     * @returns {SecretsBundle}\n     */\n    static from_json(json) {\n        const ret = wasm.secretsbundle_from_json(json);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return SecretsBundle.__wrap(ret[0]);\n    }\n}\n\nconst ServerNameFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_servername_free(ptr >>> 0, 1));\n/**\n * A Matrix-spec compliant [server name].\n *\n * It consists of a host and an optional port (separated by a colon if\n * present).\n *\n * [server name]: https://spec.matrix.org/v1.2/appendices/#server-name\n */\nexport class ServerName {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ServerName.prototype);\n        obj.__wbg_ptr = ptr;\n        ServerNameFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ServerNameFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_servername_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `ServerName`.\n     * @param {string} name\n     */\n    constructor(name) {\n        const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.servername_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        ServerNameFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the host of the server name.\n     *\n     * That is: Return the part of the server before `:<port>` or the\n     * full server name if there is no port.\n     * @returns {string}\n     */\n    get host() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.servername_host(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the port of the server name if any.\n     * @returns {number | undefined}\n     */\n    get port() {\n        const ret = wasm.servername_port(this.__wbg_ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n     * Returns true if and only if the server name is an IPv4 or IPv6\n     * address.\n     * @returns {boolean}\n     */\n    isIpLiteral() {\n        const ret = wasm.servername_isIpLiteral(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst ShieldStateFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_shieldstate_free(ptr >>> 0, 1));\n/**\n * Take a look at [`matrix_sdk_common::deserialized_responses::ShieldState`]\n * for more info.\n */\nexport class ShieldState {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ShieldState.prototype);\n        obj.__wbg_ptr = ptr;\n        ShieldStateFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ShieldStateFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_shieldstate_free(ptr, 0);\n    }\n    /**\n     * The shield color\n     * @returns {ShieldColor}\n     */\n    get color() {\n        const ret = wasm.__wbg_get_shieldstate_color(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The shield color\n     * @param {ShieldColor} arg0\n     */\n    set color(arg0) {\n        wasm.__wbg_set_shieldstate_color(this.__wbg_ptr, arg0);\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @returns {ShieldStateCode | undefined}\n     */\n    get code() {\n        const ret = wasm.__wbg_get_shieldstate_code(this.__wbg_ptr);\n        return ret === 6 ? undefined : ret;\n    }\n    /**\n     * A machine-readable representation of the authenticity for a\n     * `ShieldState`.\n     * @param {ShieldStateCode | null} [arg0]\n     */\n    set code(arg0) {\n        wasm.__wbg_set_shieldstate_code(this.__wbg_ptr, isLikeNone(arg0) ? 6 : arg0);\n    }\n    /**\n     * Error message that can be displayed as a tooltip\n     * @returns {string | undefined}\n     */\n    get message() {\n        const ret = wasm.shieldstate_message(this.__wbg_ptr);\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getStringFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 1, 1);\n        }\n        return v1;\n    }\n}\n\nconst SignatureFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signature_free(ptr >>> 0, 1));\n/**\n * Represents a potentially decoded signature (but not a validated\n * one).\n */\nexport class Signature {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signature.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signature_free(ptr, 0);\n    }\n    /**\n     * Get the Ed25519 signature, if this is one.\n     * @returns {Ed25519Signature | undefined}\n     */\n    get ed25519() {\n        const ret = wasm.signature_ed25519(this.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Convert the signature to a base64 encoded string.\n     * @returns {string}\n     */\n    toBase64() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.signature_toBase64(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n}\n\nconst SignatureUploadRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureuploadrequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/keys/signatures/upload` API endpoint\n * ([specification]).\n *\n * Publishes cross-signing signatures for the user.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#post_matrixclientv3keyssignaturesupload\n */\nexport class SignatureUploadRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureUploadRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureUploadRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureUploadRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureuploadrequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * Some signature upload will have to an `id` field, some won't.\n     * They have one when they are created automatically during an interactive\n     * verification, otherwise they don't.\n     * @returns {string | undefined}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the payload of the request\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_signatureuploadrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `SignatureUploadRequest`.\n     * @param {string} id\n     * @param {string} signed_keys\n     */\n    constructor(id, signed_keys) {\n        const ret = wasm.signatureuploadrequest_new(id, signed_keys);\n        this.__wbg_ptr = ret >>> 0;\n        SignatureUploadRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.signatureuploadrequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst SignatureVerificationFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatureverification_free(ptr >>> 0, 1));\n/**\n * The result of a signature verification of a signed JSON object.\n */\nexport class SignatureVerification {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SignatureVerification.prototype);\n        obj.__wbg_ptr = ptr;\n        SignatureVerificationFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignatureVerificationFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatureverification_free(ptr, 0);\n    }\n    /**\n     * Give the backup signature state from the current device.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get deviceState() {\n        const ret = wasm.signatureverification_deviceState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Give the backup signature state from the current user identity.\n     * See SignatureState for values\n     * @returns {SignatureState}\n     */\n    get userState() {\n        const ret = wasm.signatureverification_userState(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Is the result considered to be trusted?\n     *\n     * This tells us if the result has a valid signature from any of the\n     * following:\n     *\n     * * Our own device\n     * * Our own user identity, provided the identity is trusted as well\n     * * Any of our own devices, provided the device is trusted as well\n     * @returns {boolean}\n     */\n    trusted() {\n        const ret = wasm.signatureverification_trusted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n}\n\nconst SignaturesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_signatures_free(ptr >>> 0, 1));\n/**\n * A collection of `Signature`.\n */\nexport class Signatures {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Signatures.prototype);\n        obj.__wbg_ptr = ptr;\n        SignaturesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SignaturesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signatures_free(ptr, 0);\n    }\n    /**\n     * Creates a new, empty, signatures collection.\n     */\n    constructor() {\n        const ret = wasm.signatures_new();\n        this.__wbg_ptr = ret >>> 0;\n        SignaturesFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Add the given signature from the given signer and the given key ID to\n     * the collection.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @param {Ed25519Signature} signature\n     * @returns {MaybeSignature | undefined}\n     */\n    addSignature(signer, key_id, signature) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        _assertClass(signature, Ed25519Signature);\n        const ret = wasm.signatures_addSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr, signature.__wbg_ptr);\n        return ret === 0 ? undefined : MaybeSignature.__wrap(ret);\n    }\n    /**\n     * Try to find an Ed25519 signature from the given signer with\n     * the given key ID.\n     * @param {UserId} signer\n     * @param {DeviceKeyId} key_id\n     * @returns {Ed25519Signature | undefined}\n     */\n    getSignature(signer, key_id) {\n        _assertClass(signer, UserId);\n        _assertClass(key_id, DeviceKeyId);\n        const ret = wasm.signatures_getSignature(this.__wbg_ptr, signer.__wbg_ptr, key_id.__wbg_ptr);\n        return ret === 0 ? undefined : Ed25519Signature.__wrap(ret);\n    }\n    /**\n     * Get the map of signatures that belong to the given user.\n     * @param {UserId} signer\n     * @returns {Map<any, any> | undefined}\n     */\n    get(signer) {\n        _assertClass(signer, UserId);\n        const ret = wasm.signatures_get(this.__wbg_ptr, signer.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Remove all the signatures we currently hold.\n     */\n    clear() {\n        wasm.signatures_clear(this.__wbg_ptr);\n    }\n    /**\n     * Do we hold any signatures or is our collection completely\n     * empty.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        const ret = wasm.signatures_isEmpty(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * How many signatures do we currently hold.\n     * @returns {number}\n     */\n    get count() {\n        const ret = wasm.signatures_count(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n     * Get the json with all signatures\n     * @returns {string}\n     */\n    asJSON() {\n        const ret = wasm.signatures_asJSON(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n}\n\nconst StoreHandleFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_storehandle_free(ptr >>> 0, 1));\n/**\n * A struct containing an open connection to a CryptoStore.\n *\n * Opening the CryptoStore can take some time, due to the PBKDF calculation\n * involved, so if multiple operations are being done on the same store, it is\n * more efficient to open it once.\n */\nexport class StoreHandle {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(StoreHandle.prototype);\n        obj.__wbg_ptr = ptr;\n        StoreHandleFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        StoreHandleFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_storehandle_free(ptr, 0);\n    }\n    /**\n     * Open a crypto store.\n     *\n     * The created store will be based on IndexedDB if a `store_name` is\n     * provided; otherwise it will be based on a memory store and once the\n     * objects is dropped, the keys will be lost.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database. If this isn't provided, a memory-only store will be\n     *   used. *Note* the memory-only store will lose your E2EE keys when the\n     *   `StoreHandle` gets dropped.\n     *\n     * * `store_passphrase` - The passphrase that should be used to encrypt the\n     *   store, for IndexedDB-based stores\n     * @param {string | null} [store_name]\n     * @param {string | null} [store_passphrase]\n     * @returns {Promise<StoreHandle>}\n     */\n    static open(store_name, store_passphrase) {\n        var ptr0 = isLikeNone(store_name) ? 0 : passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(store_passphrase) ? 0 : passStringToWasm0(store_passphrase, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_open(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n    /**\n     * Open a crypto store based on IndexedDB, using the given key for\n     * encryption.\n     *\n     * # Arguments\n     *\n     * * `store_name` - The name that should be used to open the IndexedDB\n     *   based database.\n     *\n     * * `store_key` - The key that should be used to encrypt the store, for\n     *   IndexedDB-based stores. Must be a 32-byte array.\n     * @param {string} store_name\n     * @param {Uint8Array} store_key\n     * @returns {Promise<StoreHandle>}\n     */\n    static openWithKey(store_name, store_key) {\n        const ptr0 = passStringToWasm0(store_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(store_key, wasm.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = wasm.storehandle_openWithKey(ptr0, len0, ptr1, len1);\n        return ret;\n    }\n}\n\nconst ToDeviceRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_todevicerequest_free(ptr >>> 0, 1));\n/**\n * Data for a request to the `/sendToDevice` API endpoint\n * ([specification]).\n *\n * Send an event to a single device or to a group of devices.\n *\n * [specification]: https://spec.matrix.org/unstable/client-server-api/#put_matrixclientv3sendtodeviceeventtypetxnid\n */\nexport class ToDeviceRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ToDeviceRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        ToDeviceRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ToDeviceRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_todevicerequest_free(ptr, 0);\n    }\n    /**\n     * The request ID.\n     * For to-device request this would be the same value as `txn_id`. It is\n     * exposed also as `id` so that the js bindings are consistent with the\n     * other request types by using this field to mark as sent.\n     * @returns {string}\n     */\n    get id() {\n        const ret = wasm.__wbg_get_todevicerequest_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing the type of event being sent to each devices.\n     * @returns {string}\n     */\n    get event_type() {\n        const ret = wasm.__wbg_get_todevicerequest_event_type(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A string representing a request identifier unique to the access token\n     * used to send the request.\n     * @returns {string}\n     */\n    get txn_id() {\n        const ret = wasm.__wbg_get_todevicerequest_txn_id(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `messages`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_todevicerequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `ToDeviceRequest`.\n     * @param {string} id\n     * @param {string} event_type\n     * @param {string} txn_id\n     * @param {string} body\n     */\n    constructor(id, event_type, txn_id, body) {\n        const ret = wasm.todevicerequest_new(id, event_type, txn_id, body);\n        this.__wbg_ptr = ret >>> 0;\n        ToDeviceRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Get its request type.\n     * @returns {RequestType}\n     */\n    get type() {\n        const ret = wasm.todevicerequest_type(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst TracingFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_tracing_free(ptr >>> 0, 1));\n/**\n * Type to install and to manipulate the tracing layer.\n */\nexport class Tracing {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TracingFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_tracing_free(ptr, 0);\n    }\n    /**\n     * Check whether the `tracing` feature has been enabled.\n     *\n     * @deprecated: `tracing` is now always enabled.\n     * @returns {boolean}\n     */\n    static isAvailable() {\n        const ret = wasm.tracing_isAvailable();\n        return ret !== 0;\n    }\n    /**\n     * Install the tracing layer.\n     * @param {LoggerLevel} min_level\n     */\n    constructor(min_level) {\n        const ret = wasm.tracing_new(min_level);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        TracingFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Re-define the minimum logger level.\n     * @param {LoggerLevel} min_level\n     */\n    set minLevel(min_level) {\n        const ret = wasm.tracing_set_minLevel(this.__wbg_ptr, min_level);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger on, i.e. it emits logs again if it was turned\n     * off.\n     */\n    turnOn() {\n        const ret = wasm.tracing_turnOn(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n    /**\n     * Turn the logger off, i.e. it no longer emits logs.\n     */\n    turnOff() {\n        const ret = wasm.tracing_turnOff(this.__wbg_ptr);\n        if (ret[1]) {\n            throw takeFromExternrefTable0(ret[0]);\n        }\n    }\n}\n\nconst UploadSigningKeysRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_uploadsigningkeysrequest_free(ptr >>> 0, 1));\n/**\n * Other Requests *\n * Request that will publish a cross signing identity.\n *\n * This uploads the public cross signing key triplet.\n */\nexport class UploadSigningKeysRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UploadSigningKeysRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        UploadSigningKeysRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UploadSigningKeysRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_uploadsigningkeysrequest_free(ptr, 0);\n    }\n    /**\n     * A JSON-encoded string containing the rest of the payload: `master_key`,\n     * `self_signing_key`, `user_signing_key`.\n     *\n     * It represents the body of the HTTP request.\n     * @returns {string}\n     */\n    get body() {\n        const ret = wasm.__wbg_get_uploadsigningkeysrequest_body(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Create a new `UploadSigningKeysRequest`.\n     * @param {string} body\n     */\n    constructor(body) {\n        const ret = wasm.uploadsigningkeysrequest_new(body);\n        this.__wbg_ptr = ret >>> 0;\n        UploadSigningKeysRequestFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst UserDevicesFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userdevices_free(ptr >>> 0, 1));\n/**\n * A read only view over all devices belonging to a user.\n */\nexport class UserDevices {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserDevices.prototype);\n        obj.__wbg_ptr = ptr;\n        UserDevicesFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserDevicesFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userdevices_free(ptr, 0);\n    }\n    /**\n     * Get the specific device with the given device ID.\n     * @param {DeviceId} device_id\n     * @returns {Device | undefined}\n     */\n    get(device_id) {\n        _assertClass(device_id, DeviceId);\n        const ret = wasm.userdevices_get(this.__wbg_ptr, device_id.__wbg_ptr);\n        return ret === 0 ? undefined : Device.__wrap(ret);\n    }\n    /**\n     * Returns true if there is at least one devices of this user\n     * that is considered to be verified, false otherwise.\n     *\n     * This won't consider your own device as verified, as your own\n     * device is always implicitly verified.\n     * @returns {boolean}\n     */\n    isAnyVerified() {\n        const ret = wasm.userdevices_isAnyVerified(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Array over all the device IDs of the user devices.\n     * @returns {Array<any>}\n     */\n    keys() {\n        const ret = wasm.userdevices_keys(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Iterator over all the devices of the user devices.\n     * @returns {Array<any>}\n     */\n    devices() {\n        const ret = wasm.userdevices_devices(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst UserIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_userid_free(ptr >>> 0, 1));\n/**\n * A Matrix [user ID].\n *\n * [user ID]: https://spec.matrix.org/v1.2/appendices/#user-identifiers\n */\nexport class UserId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(UserId.prototype);\n        obj.__wbg_ptr = ptr;\n        UserIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    static __unwrap(jsValue) {\n        if (!(jsValue instanceof UserId)) {\n            return 0;\n        }\n        return jsValue.__destroy_into_raw();\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        UserIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_userid_free(ptr, 0);\n    }\n    /**\n     * Parse/validate and create a new `UserId`.\n     * @param {string} id\n     */\n    constructor(id) {\n        const ptr0 = passStringToWasm0(id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.userid_new(ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        this.__wbg_ptr = ret[0] >>> 0;\n        UserIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n     * Returns the user's localpart.\n     * @returns {string}\n     */\n    get localpart() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_localpart(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Returns the server name of the user ID.\n     * @returns {ServerName}\n     */\n    get serverName() {\n        const ret = wasm.userid_serverName(this.__wbg_ptr);\n        return ServerName.__wrap(ret);\n    }\n    /**\n     * Whether this user ID is a historical one.\n     *\n     * A historical user ID is one that doesn't conform to the latest\n     * specification of the user ID grammar but is still accepted\n     * because it was previously allowed.\n     * @returns {boolean}\n     */\n    isHistorical() {\n        const ret = wasm.userid_isHistorical(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Return the user ID as a string.\n     * @returns {string}\n     */\n    toString() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.userid_toString(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Create a clone of this `UserId`.\n     *\n     * This can be useful when passing a `UserId` instance to methods such as\n     * {@link OlmMachine.updateTrackedUsers} which destroy the instance.\n     * @returns {UserId}\n     */\n    clone() {\n        const ret = wasm.userid_clone(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n}\n\nconst VerificationRequestFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_verificationrequest_free(ptr >>> 0, 1));\n/**\n * An object controlling key verification requests.\n *\n * Interactive verification flows usually start with a verification\n * request, this object lets you send and reply to such a\n * verification request.\n *\n * After the initial handshake the verification flow transitions into\n * one of the verification methods.\n */\nexport class VerificationRequest {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(VerificationRequest.prototype);\n        obj.__wbg_ptr = ptr;\n        VerificationRequestFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VerificationRequestFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_verificationrequest_free(ptr, 0);\n    }\n    /**\n     * Create an event content that can be sent as a room event to\n     * request verification from the other side. This should be used\n     * only for verifications of other users and it should be sent to\n     * a room we consider to be a DM with the other user.\n     * @param {UserId} own_user_id\n     * @param {DeviceId} own_device_id\n     * @param {UserId} other_user_id\n     * @param {any[] | null} [methods]\n     * @returns {string}\n     */\n    static request(own_user_id, own_device_id, other_user_id, methods) {\n        let deferred3_0;\n        let deferred3_1;\n        try {\n            _assertClass(own_user_id, UserId);\n            _assertClass(own_device_id, DeviceId);\n            _assertClass(other_user_id, UserId);\n            var ptr0 = isLikeNone(methods) ? 0 : passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            const ret = wasm.verificationrequest_request(own_user_id.__wbg_ptr, own_device_id.__wbg_ptr, other_user_id.__wbg_ptr, ptr0, len0);\n            var ptr2 = ret[0];\n            var len2 = ret[1];\n            if (ret[3]) {\n                ptr2 = 0; len2 = 0;\n                throw takeFromExternrefTable0(ret[2]);\n            }\n            deferred3_0 = ptr2;\n            deferred3_1 = len2;\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_free(deferred3_0, deferred3_1, 1);\n        }\n    }\n    /**\n     * Our own user id.\n     * @returns {UserId}\n     */\n    get ownUserId() {\n        const ret = wasm.verificationrequest_ownUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other user that is participating in this\n     * verification request.\n     * @returns {UserId}\n     */\n    get otherUserId() {\n        const ret = wasm.verificationrequest_otherUserId(this.__wbg_ptr);\n        return UserId.__wrap(ret);\n    }\n    /**\n     * The ID of the other device that is participating in this\n     * verification.\n     * @returns {DeviceId | undefined}\n     */\n    get otherDeviceId() {\n        const ret = wasm.verificationrequest_otherDeviceId(this.__wbg_ptr);\n        return ret === 0 ? undefined : DeviceId.__wrap(ret);\n    }\n    /**\n     * Get the room ID if the verification is happening inside a\n     * room.\n     * @returns {RoomId | undefined}\n     */\n    get roomId() {\n        const ret = wasm.verificationrequest_roomId(this.__wbg_ptr);\n        return ret === 0 ? undefined : RoomId.__wrap(ret);\n    }\n    /**\n     * Get info about the cancellation if the verification request\n     * has been cancelled.\n     * @returns {CancelInfo | undefined}\n     */\n    get cancelInfo() {\n        const ret = wasm.verificationrequest_cancelInfo(this.__wbg_ptr);\n        return ret === 0 ? undefined : CancelInfo.__wrap(ret);\n    }\n    /**\n     * Has the verification request been answered by another device?\n     * @returns {boolean}\n     */\n    isPassive() {\n        const ret = wasm.verificationrequest_isPassive(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Is the verification request ready to start a verification flow?\n     * @returns {boolean}\n     */\n    isReady() {\n        const ret = wasm.verificationrequest_isReady(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow timed out?\n     * @returns {boolean}\n     */\n    timedOut() {\n        const ret = wasm.verificationrequest_timedOut(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * The number of milliseconds remaining before this verification flow times\n     * out.\n     *\n     * Returns zero if the time has already passed.\n     * @returns {number}\n     */\n    timeRemainingMillis() {\n        const ret = wasm.verificationrequest_timeRemainingMillis(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Get the supported verification methods of the other side.\n     *\n     * Will be present only if the other side requested the\n     * verification or if we’re in the ready state.\n     *\n     * # Returns\n     *\n     * `undefined` if we do not yet know the supported methods; otherwise, an\n     * array of `VerificationMethod`s.\n     * @returns {any[] | undefined}\n     */\n    get theirSupportedMethods() {\n        const ret = wasm.verificationrequest_theirSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get our own supported verification methods that we advertised.\n     *\n     * Will be present only we requested the verification or if we’re\n     * in the ready state.\n     * @returns {any[] | undefined}\n     */\n    get ourSupportedMethods() {\n        const ret = wasm.verificationrequest_ourSupportedMethods(this.__wbg_ptr);\n        if (ret[3]) {\n            throw takeFromExternrefTable0(ret[2]);\n        }\n        let v1;\n        if (ret[0] !== 0) {\n            v1 = getArrayJsValueFromWasm0(ret[0], ret[1]).slice();\n            wasm.__wbindgen_free(ret[0], ret[1] * 4, 4);\n        }\n        return v1;\n    }\n    /**\n     * Get the unique ID of this verification request.\n     * @returns {string}\n     */\n    get flowId() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const ret = wasm.verificationrequest_flowId(this.__wbg_ptr);\n            deferred1_0 = ret[0];\n            deferred1_1 = ret[1];\n            return getStringFromWasm0(ret[0], ret[1]);\n        } finally {\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n     * Is this a verification that is verifying one of our own\n     * devices?\n     * @returns {boolean}\n     */\n    isSelfVerification() {\n        const ret = wasm.verificationrequest_isSelfVerification(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Did we initiate the verification request?\n     * @returns {boolean}\n     */\n    weStarted() {\n        const ret = wasm.verificationrequest_weStarted(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * finished?\n     * @returns {boolean}\n     */\n    isDone() {\n        const ret = wasm.verificationrequest_isDone(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Get the current phase of this request.\n     *\n     * Returns a `VerificationRequestPhase`.\n     * @returns {VerificationRequestPhase}\n     */\n    phase() {\n        const ret = wasm.verificationrequest_phase(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * If this request has transitioned into a concrete verification\n     * flow (and not yet been completed or cancelled), returns a `Verification`\n     * object.\n     *\n     * Returns: a `Sas`, a `Qr`, or `undefined`.\n     * @returns {any}\n     */\n    getVerification() {\n        const ret = wasm.verificationrequest_getVerification(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Register a callback which will be called whenever there is an update to\n     * the request.\n     *\n     * The `callback` is called with no parameters.\n     * @param {Function} callback\n     */\n    registerChangesCallback(callback) {\n        wasm.verificationrequest_registerChangesCallback(this.__wbg_ptr, callback);\n    }\n    /**\n     * Has the verification flow that was started with this request\n     * been cancelled?\n     * @returns {boolean}\n     */\n    isCancelled() {\n        const ret = wasm.verificationrequest_isCancelled(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n     * Accept the verification request signaling that our client\n     * supports the given verification methods.\n     *\n     * `methods` represents the methods that we should advertise as\n     * supported by us.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @param {any[]} methods\n     * @returns {any}\n     */\n    acceptWithMethods(methods) {\n        const ptr0 = passArrayJsValueToWasm0(methods, wasm.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.verificationrequest_acceptWithMethods(this.__wbg_ptr, ptr0, len0);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Accept the verification request.\n     *\n     * This method will accept the request and signal that it\n     * supports the `m.sas.v1`, the `m.qr_code.show.v1`, and\n     * `m.reciprocate.v1` method.\n     *\n     * `m.qr_code.show.v1` will only be signaled if the `qrcode`\n     * feature is enabled. This feature is disabled by default. If\n     * it's enabled and QR code scanning should be supported or QR\n     * code showing shouldn't be supported the `accept_with_methods`\n     * method should be used instead.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    accept() {\n        const ret = wasm.verificationrequest_accept(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Cancel the verification request.\n     *\n     * It returns either a `ToDeviceRequest`, a `RoomMessageRequest`\n     * or `undefined`.\n     * @returns {any}\n     */\n    cancel() {\n        const ret = wasm.verificationrequest_cancel(this.__wbg_ptr);\n        if (ret[2]) {\n            throw takeFromExternrefTable0(ret[1]);\n        }\n        return takeFromExternrefTable0(ret[0]);\n    }\n    /**\n     * Transition from this verification request into a SAS verification flow.\n     *\n     * Returns `Promise<[Sas, RoomMessageRequest|ToDeviceRequest] | undefined>`\n     * @returns {Promise<any>}\n     */\n    startSas() {\n        const ret = wasm.verificationrequest_startSas(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Generate a QR code that can be used by another client to start\n     * a QR code based verification.\n     *\n     * Returns a `Qr` or `undefined`.\n     * @returns {Promise<any>}\n     */\n    generateQrCode() {\n        const ret = wasm.verificationrequest_generateQrCode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * Start a QR code verification by providing a scanned QR code\n     * for this verification flow.\n     * @param {QrCodeScan} data\n     * @returns {Promise<any>}\n     */\n    scanQrCode(data) {\n        _assertClass(data, QrCodeScan);\n        const ret = wasm.verificationrequest_scanQrCode(this.__wbg_ptr, data.__wbg_ptr);\n        return ret;\n    }\n}\n\nconst VersionsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_versions_free(ptr >>> 0, 1));\n/**\n * Object containing the versions of the Rust libraries we are using.\n */\nexport class Versions {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Versions.prototype);\n        obj.__wbg_ptr = ptr;\n        VersionsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        VersionsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_versions_free(ptr, 0);\n    }\n    /**\n     * The version of the vodozemac crate.\n     * @returns {string}\n     */\n    get vodozemac() {\n        const ret = wasm.__wbg_get_versions_vodozemac(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The version of the matrix-sdk-crypto crate.\n     * @returns {string}\n     */\n    get matrix_sdk_crypto() {\n        const ret = wasm.__wbg_get_versions_matrix_sdk_crypto(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The Git commit hash of the crate's source tree at build time.\n     * @returns {string}\n     */\n    get git_sha() {\n        const ret = wasm.__wbg_get_versions_git_sha(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n     * The build-time output of the `git describe` command of the source tree\n     * of crate.\n     * @returns {string}\n     */\n    get git_description() {\n        const ret = wasm.__wbg_get_versions_git_description(this.__wbg_ptr);\n        return ret;\n    }\n}\n\nexport function __wbg_String_8f0eb39a4a4c2f66(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_String_eecc4a11987127d6(arg0, arg1) {\n    const ret = String(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_Window_b0044ac7db258535(arg0) {\n    const ret = arg0.Window;\n    return ret;\n};\n\nexport function __wbg_WorkerGlobalScope_b74cefefc62a37da(arg0) {\n    const ret = arg0.WorkerGlobalScope;\n    return ret;\n};\n\nexport function __wbg_add_883d9432f9188ef2(arg0, arg1) {\n    const ret = arg0.add(arg1);\n    return ret;\n};\n\nexport function __wbg_add_9338901b80183e0f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.add(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_at_7d852dd9f194d43e(arg0, arg1) {\n    const ret = arg0.at(arg1);\n    return ret;\n};\n\nexport function __wbg_backupkeys_new(arg0) {\n    const ret = BackupKeys.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_bound_55a8d08e0491e17a() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.bound(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_bound_f2afc3766d4545cf() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = IDBKeyRange.bound(arg0, arg1, arg2 !== 0, arg3 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_buffer_609cc3eee51ed158(arg0) {\n    const ret = arg0.buffer;\n    return ret;\n};\n\nexport function __wbg_call_672a4d21634d4a24() { return handleError(function (arg0, arg1) {\n    const ret = arg0.call(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_7cccdd69e0791ae2() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.call(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_833bed5770ea2041() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.call(arg1, arg2, arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_call_b8adc8b1d0a0d8eb() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.call(arg1, arg2, arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_clearTimeout_5a54f8841c30079a(arg0) {\n    const ret = clearTimeout(arg0);\n    return ret;\n};\n\nexport function __wbg_clear_f450db7eeb71163f() { return handleError(function (arg0) {\n    const ret = arg0.clear();\n    return ret;\n}, arguments) };\n\nexport function __wbg_close_26fc2e6856d8567a(arg0) {\n    arg0.close();\n};\n\nexport function __wbg_code_cfd8f6868bdaed9b(arg0) {\n    const ret = arg0.code;\n    return ret;\n};\n\nexport function __wbg_continue_c46c11d3dbe1b030() { return handleError(function (arg0) {\n    arg0.continue();\n}, arguments) };\n\nexport function __wbg_count_613cb921d67a4f26() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_count_ea1a2987dff7759e() { return handleError(function (arg0) {\n    const ret = arg0.count();\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_873ac48adc772309() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3, arg4);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createIndex_fcfd513cf4581834() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.createIndex(getStringFromWasm0(arg1, arg2), arg3);\n    return ret;\n}, arguments) };\n\nexport function __wbg_createObjectStore_e566459f7161f82f() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.createObjectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_crosssigningbootstraprequests_new(arg0) {\n    const ret = CrossSigningBootstrapRequests.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningkeyexport_new(arg0) {\n    const ret = CrossSigningKeyExport.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crosssigningstatus_new(arg0) {\n    const ret = CrossSigningStatus.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_crypto_ed58b8e10a292839(arg0) {\n    const ret = arg0.crypto;\n    return ret;\n};\n\nexport function __wbg_debug_3cb59063b29f58c1(arg0) {\n    console.debug(arg0);\n};\n\nexport function __wbg_debug_8edd10d3d6b2631b(arg0, arg1) {\n    arg0.debug(arg1);\n};\n\nexport function __wbg_decryptedroomevent_new(arg0) {\n    const ret = DecryptedRoomEvent.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevice_new(arg0) {\n    const ret = DehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_dehydrateddevicekey_new(arg0) {\n    const ret = DehydratedDeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deleteObjectStore_3f08ae00cd288224() { return handleError(function (arg0, arg1, arg2) {\n    arg0.deleteObjectStore(getStringFromWasm0(arg1, arg2));\n}, arguments) };\n\nexport function __wbg_delete_200677093b4cf756() { return handleError(function (arg0, arg1) {\n    const ret = arg0.delete(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_delete_2ecf7cf20900b3a2() { return handleError(function (arg0) {\n    const ret = arg0.delete();\n    return ret;\n}, arguments) };\n\nexport function __wbg_device_new(arg0) {\n    const ret = Device.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_deviceid_new(arg0) {\n    const ret = DeviceId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekey_new(arg0) {\n    const ret = DeviceKey.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_devicekeyid_new(arg0) {\n    const ret = DeviceKeyId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_done_769e5ede4b31c67b(arg0) {\n    const ret = arg0.done;\n    return ret;\n};\n\nexport function __wbg_emoji_new(arg0) {\n    const ret = Emoji.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_encryptioninfo_new(arg0) {\n    const ret = EncryptionInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_3265d4158b33e5dc(arg0) {\n    const ret = Object.entries(arg0);\n    return ret;\n};\n\nexport function __wbg_entries_c8a90a7ed73e84ce(arg0) {\n    const ret = arg0.entries();\n    return ret;\n};\n\nexport function __wbg_error_524f506f44df1645(arg0) {\n    console.error(arg0);\n};\n\nexport function __wbg_error_7534b8e9a36f1ab4(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbg_error_c5c48c1ca56731d8(arg0, arg1) {\n    arg0.error(arg1);\n};\n\nexport function __wbg_error_ff4ddaabdfc5dbb3() { return handleError(function (arg0) {\n    const ret = arg0.error;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_from_2a5d3e218e67aa85(arg0) {\n    const ret = Array.from(arg0);\n    return ret;\n};\n\nexport function __wbg_getAllKeys_b11d8835dc4be0e8() { return handleError(function (arg0) {\n    const ret = arg0.getAllKeys();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_304e868beec2021f() { return handleError(function (arg0) {\n    const ret = arg0.getAll();\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_d1e60c13c0073374() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.getAll(arg1, arg2 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getAll_e6903c610babcd42() { return handleError(function (arg0, arg1) {\n    const ret = arg0.getAll(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_getRandomValues_bcb4912f16000dc4() { return handleError(function (arg0, arg1) {\n    arg0.getRandomValues(arg1);\n}, arguments) };\n\nexport function __wbg_getTime_46267b1c24877e30(arg0) {\n    const ret = arg0.getTime();\n    return ret;\n};\n\nexport function __wbg_get_67b2ba62fc30de12() { return handleError(function (arg0, arg1) {\n    const ret = Reflect.get(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_8da03f81f6a1111e() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_93e54e8e166fbcab() { return handleError(function (arg0, arg1) {\n    const ret = arg0.get(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_get_b9b93047fe3cf45b(arg0, arg1) {\n    const ret = arg0[arg1 >>> 0];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_1dc361bd10053bfe(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_getwithrefkey_6550b2c093d2eb18(arg0, arg1) {\n    const ret = arg0[arg1];\n    return ret;\n};\n\nexport function __wbg_global_b6f5c73312f62313(arg0) {\n    const ret = arg0.global;\n    return ret;\n};\n\nexport function __wbg_inboundgroupsession_new(arg0) {\n    const ret = InboundGroupSession.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_index_e00ca5fff206ee3e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.index(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_indexedDB_601ec26c63e333de() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_b1f49280282046f8() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_indexedDB_f6b47b0dc333fd2f() { return handleError(function (arg0) {\n    const ret = arg0.indexedDB;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n}, arguments) };\n\nexport function __wbg_info_1643c3c2890128ab(arg0, arg1) {\n    arg0.info(arg1);\n};\n\nexport function __wbg_info_3daf2e093e091b66(arg0) {\n    console.info(arg0);\n};\n\nexport function __wbg_instanceof_ArrayBuffer_e14585432e3737fc(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof ArrayBuffer;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Map_f3469ce2244d2430(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Map;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Promise_935168b8f4b49db3(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Promise;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_instanceof_Uint8Array_17156bcf118086a9(arg0) {\n    let result;\n    try {\n        result = arg0 instanceof Uint8Array;\n    } catch (_) {\n        result = false;\n    }\n    const ret = result;\n    return ret;\n};\n\nexport function __wbg_isArray_a1eab7e0d067391b(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbg_isSafeInteger_343e2beeeece1bb0(arg0) {\n    const ret = Number.isSafeInteger(arg0);\n    return ret;\n};\n\nexport function __wbg_item_c3c26b4103ad5aaf(arg0, arg1, arg2) {\n    const ret = arg1.item(arg2 >>> 0);\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_iterator_9a24c88df860dc65() {\n    const ret = Symbol.iterator;\n    return ret;\n};\n\nexport function __wbg_key_29fefecef430db96() { return handleError(function (arg0) {\n    const ret = arg0.key;\n    return ret;\n}, arguments) };\n\nexport function __wbg_keysbackuprequest_new(arg0) {\n    const ret = KeysBackupRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysclaimrequest_new(arg0) {\n    const ret = KeysClaimRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysqueryrequest_new(arg0) {\n    const ret = KeysQueryRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_keysuploadrequest_new(arg0) {\n    const ret = KeysUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_length_238152a0aedbb6e7(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_a446193dc22c12f8(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_length_e2d2a49132c1b256(arg0) {\n    const ret = arg0.length;\n    return ret;\n};\n\nexport function __wbg_lowerBound_1872d19f5bcf83c6() { return handleError(function (arg0, arg1) {\n    const ret = IDBKeyRange.lowerBound(arg0, arg1 !== 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_maybesignature_new(arg0) {\n    const ret = MaybeSignature.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_megolmdecryptionerror_new(arg0) {\n    const ret = MegolmDecryptionError.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_message_5c5d919204d42400(arg0, arg1) {\n    const ret = arg1.message;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_msCrypto_0a36e2ec3a343d26(arg0) {\n    const ret = arg0.msCrypto;\n    return ret;\n};\n\nexport function __wbg_name_f2d27098bfd843e7(arg0, arg1) {\n    const ret = arg1.name;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_new_23a2665fac83c611(arg0, arg1) {\n    try {\n        var state0 = {a: arg0, b: arg1};\n        var cb0 = (arg0, arg1) => {\n            const a = state0.a;\n            state0.a = 0;\n            try {\n                return __wbg_adapter_761(a, state0.b, arg0, arg1);\n            } finally {\n                state0.a = a;\n            }\n        };\n        const ret = new Promise(cb0);\n        return ret;\n    } finally {\n        state0.a = state0.b = 0;\n    }\n};\n\nexport function __wbg_new_31a97dac4f10fab7(arg0) {\n    const ret = new Date(arg0);\n    return ret;\n};\n\nexport function __wbg_new_405e22f390576ce2() {\n    const ret = new Object();\n    return ret;\n};\n\nexport function __wbg_new_5e0be73521bc8c17() {\n    const ret = new Map();\n    return ret;\n};\n\nexport function __wbg_new_78feb108b6472713() {\n    const ret = new Array();\n    return ret;\n};\n\nexport function __wbg_new_7a91e41fe43b3c92(arg0) {\n    const ret = new Uint8ClampedArray(arg0);\n    return ret;\n};\n\nexport function __wbg_new_8a6f238a6ece86ea() {\n    const ret = new Error();\n    return ret;\n};\n\nexport function __wbg_new_a12002a7f91c75be(arg0) {\n    const ret = new Uint8Array(arg0);\n    return ret;\n};\n\nexport function __wbg_new_a239edaa1dc2968f(arg0) {\n    const ret = new Set(arg0);\n    return ret;\n};\n\nexport function __wbg_newnoargs_105ed471475aaf50(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_6d34787141015158(arg0, arg1, arg2) {\n    const ret = new Uint8ClampedArray(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithbyteoffsetandlength_d97e637ebe145a9a(arg0, arg1, arg2) {\n    const ret = new Uint8Array(arg0, arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_a381634e90c276d4(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithlength_ee8e1b95dea9d37c(arg0) {\n    const ret = new Uint8ClampedArray(arg0 >>> 0);\n    return ret;\n};\n\nexport function __wbg_newwithmessage_baedba94f03976fd() { return handleError(function (arg0, arg1) {\n    const ret = new DOMException(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_next_25feadfc0913fea9(arg0) {\n    const ret = arg0.next;\n    return ret;\n};\n\nexport function __wbg_next_6574e1a8a62d1055() { return handleError(function (arg0) {\n    const ret = arg0.next();\n    return ret;\n}, arguments) };\n\nexport function __wbg_node_02999533c4ea02e3(arg0) {\n    const ret = arg0.node;\n    return ret;\n};\n\nexport function __wbg_now_2c95c9de01293173(arg0) {\n    const ret = arg0.now();\n    return ret;\n};\n\nexport function __wbg_now_807e54c39636c349() {\n    const ret = Date.now();\n    return ret;\n};\n\nexport function __wbg_objectStoreNames_9bb1ab04a7012aaf(arg0) {\n    const ret = arg0.objectStoreNames;\n    return ret;\n};\n\nexport function __wbg_objectStore_21878d46d25b64b6() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.objectStore(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_oldVersion_e8337811e52861c6(arg0) {\n    const ret = arg0.oldVersion;\n    return ret;\n};\n\nexport function __wbg_olmmachine_new(arg0) {\n    const ret = OlmMachine.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_openCursor_1adef2266972fb45() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_238e247d18bde2cd() { return handleError(function (arg0) {\n    const ret = arg0.openCursor();\n    return ret;\n}, arguments) };\n\nexport function __wbg_openCursor_f4b061aa6d804b93() { return handleError(function (arg0, arg1) {\n    const ret = arg0.openCursor(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_88b1390d99a7c691() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2));\n    return ret;\n}, arguments) };\n\nexport function __wbg_open_e0c0b2993eb596e1() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.open(getStringFromWasm0(arg1, arg2), arg3 >>> 0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_otheruseridentity_new(arg0) {\n    const ret = OtherUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_ownuseridentity_new(arg0) {\n    const ret = OwnUserIdentity.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_parse_def2e24ef1252aff() { return handleError(function (arg0, arg1) {\n    const ret = JSON.parse(getStringFromWasm0(arg0, arg1));\n    return ret;\n}, arguments) };\n\nexport function __wbg_performance_7a3ffd0b17f663ad(arg0) {\n    const ret = arg0.performance;\n    return ret;\n};\n\nexport function __wbg_pickledinboundgroupsession_unwrap(arg0) {\n    const ret = PickledInboundGroupSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_pickledsession_unwrap(arg0) {\n    const ret = PickledSession.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_process_5c1d670bc53614b8(arg0) {\n    const ret = arg0.process;\n    return ret;\n};\n\nexport function __wbg_push_737cfc8c1432c2c6(arg0, arg1) {\n    const ret = arg0.push(arg1);\n    return ret;\n};\n\nexport function __wbg_put_066faa31a6a88f5b() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.put(arg1, arg2);\n    return ret;\n}, arguments) };\n\nexport function __wbg_putdehydrateddevicerequest_new(arg0) {\n    const ret = PutDehydratedDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_qr_new(arg0) {\n    const ret = Qr.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_queueMicrotask_97d92b4fcc8a61c5(arg0) {\n    queueMicrotask(arg0);\n};\n\nexport function __wbg_queueMicrotask_d3219def82552485(arg0) {\n    const ret = arg0.queueMicrotask;\n    return ret;\n};\n\nexport function __wbg_randomFillSync_ab2cfe79ebbf2740() { return handleError(function (arg0, arg1) {\n    arg0.randomFillSync(arg1);\n}, arguments) };\n\nexport function __wbg_readyState_4013cfdf4f22afb0(arg0) {\n    const ret = arg0.readyState;\n    return (__wbindgen_enum_IdbRequestReadyState.indexOf(ret) + 1 || 3) - 1;\n};\n\nexport function __wbg_rehydrateddevice_new(arg0) {\n    const ret = RehydratedDevice.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_require_79b1e9274cde3c87() { return handleError(function () {\n    const ret = module.require;\n    return ret;\n}, arguments) };\n\nexport function __wbg_resolve_4851785c9c5f573d(arg0) {\n    const ret = Promise.resolve(arg0);\n    return ret;\n};\n\nexport function __wbg_result_f29afabdf2c05826() { return handleError(function (arg0) {\n    const ret = arg0.result;\n    return ret;\n}, arguments) };\n\nexport function __wbg_roomid_unwrap(arg0) {\n    const ret = RoomId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeycounts_new(arg0) {\n    const ret = RoomKeyCounts.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyimportresult_new(arg0) {\n    const ret = RoomKeyImportResult.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeyinfo_new(arg0) {\n    const ret = RoomKeyInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomkeywithheldinfo_new(arg0) {\n    const ret = RoomKeyWithheldInfo.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roommessagerequest_new(arg0) {\n    const ret = RoomMessageRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_roomsettings_new(arg0) {\n    const ret = RoomSettings.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_sas_new(arg0) {\n    const ret = Sas.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_secretsbundle_new(arg0) {\n    const ret = SecretsBundle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_setTimeout_db2dbaeefb6f39c7() { return handleError(function (arg0, arg1) {\n    const ret = setTimeout(arg0, arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_set_37837023f3d740e8(arg0, arg1, arg2) {\n    arg0[arg1 >>> 0] = arg2;\n};\n\nexport function __wbg_set_3807d5f0bfc24aa7(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_3f1d0b984ed272ed(arg0, arg1, arg2) {\n    arg0[arg1] = arg2;\n};\n\nexport function __wbg_set_65595bdd868b3009(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_6775f73144c2ef27(arg0, arg1, arg2) {\n    arg0.set(arg1, arg2 >>> 0);\n};\n\nexport function __wbg_set_8fc6bf8a5b1071d1(arg0, arg1, arg2) {\n    const ret = arg0.set(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_setonabort_3bf4db6614fa98e9(arg0, arg1) {\n    arg0.onabort = arg1;\n};\n\nexport function __wbg_setonblocked_aebf64bd39f1eca8(arg0, arg1) {\n    arg0.onblocked = arg1;\n};\n\nexport function __wbg_setoncomplete_4d19df0dadb7c4d4(arg0, arg1) {\n    arg0.oncomplete = arg1;\n};\n\nexport function __wbg_setonerror_b0d9d723b8fddbbb(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonerror_d7e3056cc6e56085(arg0, arg1) {\n    arg0.onerror = arg1;\n};\n\nexport function __wbg_setonsuccess_afa464ee777a396d(arg0, arg1) {\n    arg0.onsuccess = arg1;\n};\n\nexport function __wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f(arg0, arg1) {\n    arg0.onupgradeneeded = arg1;\n};\n\nexport function __wbg_setonversionchange_6ee07fa49ee1e3a5(arg0, arg1) {\n    arg0.onversionchange = arg1;\n};\n\nexport function __wbg_setunique_dd24c422aa05df89(arg0, arg1) {\n    arg0.unique = arg1 !== 0;\n};\n\nexport function __wbg_signatures_new(arg0) {\n    const ret = Signatures.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureuploadrequest_new(arg0) {\n    const ret = SignatureUploadRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_signatureverification_new(arg0) {\n    const ret = SignatureVerification.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stack_0ed75d68575b0f3c(arg0, arg1) {\n    const ret = arg1.stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbg_static_accessor_GLOBAL_88a902d13a557d07() {\n    const ret = typeof global === 'undefined' ? null : global;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0() {\n    const ret = typeof globalThis === 'undefined' ? null : globalThis;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_SELF_37c5d418e4bf5819() {\n    const ret = typeof self === 'undefined' ? null : self;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_static_accessor_WINDOW_5de37043a91a9c40() {\n    const ret = typeof window === 'undefined' ? null : window;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_storehandle_new(arg0) {\n    const ret = StoreHandle.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_stringify_f7ed6987935b4a24() { return handleError(function (arg0) {\n    const ret = JSON.stringify(arg0);\n    return ret;\n}, arguments) };\n\nexport function __wbg_subarray_aa9065fa9dc5df96(arg0, arg1, arg2) {\n    const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\n    return ret;\n};\n\nexport function __wbg_target_0a62d9d79a2a1ede(arg0) {\n    const ret = arg0.target;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_then_44b73946d2fb3e7d(arg0, arg1) {\n    const ret = arg0.then(arg1);\n    return ret;\n};\n\nexport function __wbg_then_48b406749878a531(arg0, arg1, arg2) {\n    const ret = arg0.then(arg1, arg2);\n    return ret;\n};\n\nexport function __wbg_todevicerequest_new(arg0) {\n    const ret = ToDeviceRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_transaction_babc423936946a37() { return handleError(function (arg0, arg1, arg2, arg3) {\n    const ret = arg0.transaction(getStringFromWasm0(arg1, arg2), __wbindgen_enum_IdbTransactionMode[arg3]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_d6d07c3c9963c49e() { return handleError(function (arg0, arg1, arg2) {\n    const ret = arg0.transaction(arg1, __wbindgen_enum_IdbTransactionMode[arg2]);\n    return ret;\n}, arguments) };\n\nexport function __wbg_transaction_e713aa7b07ccaedd(arg0) {\n    const ret = arg0.transaction;\n    return isLikeNone(ret) ? 0 : addToExternrefTable0(ret);\n};\n\nexport function __wbg_update_acd72607f506872a() { return handleError(function (arg0, arg1) {\n    const ret = arg0.update(arg1);\n    return ret;\n}, arguments) };\n\nexport function __wbg_userdevices_new(arg0) {\n    const ret = UserDevices.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_new(arg0) {\n    const ret = UserId.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_userid_unwrap(arg0) {\n    const ret = UserId.__unwrap(arg0);\n    return ret;\n};\n\nexport function __wbg_value_68c4e9a54bb7fd5e() { return handleError(function (arg0) {\n    const ret = arg0.value;\n    return ret;\n}, arguments) };\n\nexport function __wbg_value_cd1ffa7b1ab794f1(arg0) {\n    const ret = arg0.value;\n    return ret;\n};\n\nexport function __wbg_values_53465c57fc8cd691(arg0) {\n    const ret = arg0.values();\n    return ret;\n};\n\nexport function __wbg_verificationrequest_new(arg0) {\n    const ret = VerificationRequest.__wrap(arg0);\n    return ret;\n};\n\nexport function __wbg_version_a70a33e5bbc6d6db(arg0) {\n    const ret = arg0.version;\n    return ret;\n};\n\nexport function __wbg_versions_c71aa1626a93e0a1(arg0) {\n    const ret = arg0.versions;\n    return ret;\n};\n\nexport function __wbg_warn_4ca3906c248c47c4(arg0) {\n    console.warn(arg0);\n};\n\nexport function __wbg_warn_f4783a0419527b21(arg0, arg1) {\n    arg0.warn(arg1);\n};\n\nexport function __wbindgen_as_number(arg0) {\n    const ret = +arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_i64(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_bigint_from_u64(arg0) {\n    const ret = BigInt.asUintN(64, arg0);\n    return ret;\n};\n\nexport function __wbindgen_bigint_get_as_i64(arg0, arg1) {\n    const v = arg1;\n    const ret = typeof(v) === 'bigint' ? v : undefined;\n    getDataViewMemory0().setBigInt64(arg0 + 8 * 1, isLikeNone(ret) ? BigInt(0) : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_boolean_get(arg0) {\n    const v = arg0;\n    const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n    return ret;\n};\n\nexport function __wbindgen_cb_drop(arg0) {\n    const obj = arg0.original;\n    if (obj.cnt-- == 1) {\n        obj.a = 0;\n        return true;\n    }\n    const ret = false;\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper1048(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 30, __wbg_adapter_58);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper2227(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 409, __wbg_adapter_61);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper5458(arg0, arg1, arg2) {\n    const ret = makeMutClosure(arg0, arg1, 409, __wbg_adapter_64);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6924(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 415, __wbg_adapter_67);\n    return ret;\n};\n\nexport function __wbindgen_closure_wrapper6929(arg0, arg1, arg2) {\n    const ret = makeClosure(arg0, arg1, 415, __wbg_adapter_70);\n    return ret;\n};\n\nexport function __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(arg1);\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return ret;\n};\n\nexport function __wbindgen_in(arg0, arg1) {\n    const ret = arg0 in arg1;\n    return ret;\n};\n\nexport function __wbindgen_init_externref_table() {\n    const table = wasm.__wbindgen_export_4;\n    const offset = table.grow(4);\n    table.set(0, undefined);\n    table.set(offset + 0, undefined);\n    table.set(offset + 1, null);\n    table.set(offset + 2, true);\n    table.set(offset + 3, false);\n    ;\n};\n\nexport function __wbindgen_is_array(arg0) {\n    const ret = Array.isArray(arg0);\n    return ret;\n};\n\nexport function __wbindgen_is_bigint(arg0) {\n    const ret = typeof(arg0) === 'bigint';\n    return ret;\n};\n\nexport function __wbindgen_is_function(arg0) {\n    const ret = typeof(arg0) === 'function';\n    return ret;\n};\n\nexport function __wbindgen_is_null(arg0) {\n    const ret = arg0 === null;\n    return ret;\n};\n\nexport function __wbindgen_is_object(arg0) {\n    const val = arg0;\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nexport function __wbindgen_is_string(arg0) {\n    const ret = typeof(arg0) === 'string';\n    return ret;\n};\n\nexport function __wbindgen_is_undefined(arg0) {\n    const ret = arg0 === undefined;\n    return ret;\n};\n\nexport function __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = arg0 === arg1;\n    return ret;\n};\n\nexport function __wbindgen_jsval_loose_eq(arg0, arg1) {\n    const ret = arg0 == arg1;\n    return ret;\n};\n\nexport function __wbindgen_memory() {\n    const ret = wasm.memory;\n    return ret;\n};\n\nexport function __wbindgen_number_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'number' ? obj : undefined;\n    getDataViewMemory0().setFloat64(arg0 + 8 * 1, isLikeNone(ret) ? 0 : ret, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, !isLikeNone(ret), true);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return ret;\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = arg1;\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr1 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len1 = WASM_VECTOR_LEN;\n    getDataViewMemory0().setInt32(arg0 + 4 * 1, len1, true);\n    getDataViewMemory0().setInt32(arg0 + 4 * 0, ptr1, true);\n};\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return ret;\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_try_into_number(arg0) {\n    let result;\n    try { result = +arg0 } catch (e) { result = e }\n    const ret = result;\n    return ret;\n};\n\n"],"names":["Proxy","get","Error","modPromise","async","initAsync","wasm","__wbindgen_start","loadModuleAsync","__wbg_set_wasm","val","WASM_VECTOR_LEN","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachedDataViewMemory0","getDataViewMemory0","detached","DataView","addToExternrefTable0","obj","idx","__externref_table_alloc","__wbindgen_export_4","handleError","f","args","apply","this","e","__wbindgen_exn_store","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","isLikeNone","x","CLOSURE_DTORS","FinalizationRegistry","register","unregister","state","__wbindgen_export_6","dtor","a","b","makeMutClosure","arg0","arg1","cnt","real","original","makeClosure","debugString","type","description","name","Array","isArray","debug","i","builtInMatches","exec","toString","call","className","JSON","stringify","_","message","stack","passArray8ToWasm0","takeFromExternrefTable0","value","__externref_table_dealloc","_assertClass","instance","klass","getArrayU8FromWasm0","passArrayJsValueToWasm0","array","add","setUint32","getArrayJsValueFromWasm0","result","push","getUint32","__externref_drop_slice","cachedUint16ArrayMemory0","getArrayU16FromWasm0","Uint16Array","getVersions","ret","Versions","__wrap","__wbg_adapter_58","arg2","closure29_externref_shim_multivalue_shim","__wbg_adapter_61","_dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h01b499ad5cb75280","__wbg_adapter_64","closure734_externref_shim","__wbg_adapter_67","closure414_externref_shim","__wbg_adapter_70","_dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hd1a2ce9a4f62ec0e","DecryptionErrorCode","Object","freeze","MissingRoomKey","UnknownMessageIndex","MismatchedIdentityKeys","UnknownSenderDevice","UnsignedSenderDevice","SenderIdentityVerificationViolation","UnableToDecrypt","EncryptionAlgorithm","Ed25519","Curve25519","Unknown","OlmV1Curve25519AesSha2","MegolmV1AesSha2","HistoryVisibility","Invited","Joined","Shared","WorldReadable","LocalTrust","Verified","BlackListed","Ignored","Unset","LoggerLevel","Trace","Debug","Info","Warn","QrCodeMode","Login","Reciprocate","QrState","Created","Scanned","Confirmed","Reciprocated","Done","Cancelled","ShieldColor","KeysUpload","KeysQuery","KeysClaim","ToDevice","SignatureUpload","RoomMessage","KeysBackup","Red","Grey","None","ShieldStateCode","AuthenticityNotGuaranteed","UnknownDevice","UnsignedDevice","UnverifiedIdentity","SentInClear","VerificationViolation","TrustRequirement","Missing","Invalid","ValidButNotTrusted","ValidAndTrusted","Untrusted","CrossSignedOrLegacy","CrossSigned","VerificationMethod","SasV1","QrCodeScanV1","QrCodeShowV1","ReciprocateV1","VerificationRequestPhase","Requested","Ready","Transitioned","__wbindgen_enum_IdbRequestReadyState","__wbindgen_enum_IdbTransactionMode","__wbg_attachment_free","BackupDecryptionKeyFinalization","__wbg_backupdecryptionkey_free","BackupDecryptionKey","create","prototype","__wbg_ptr","__destroy_into_raw","free","createRandomKey","backupdecryptionkey_createRandomKey","fromBase64","key","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","backupdecryptionkey_fromBase64","toBase64","backupdecryptionkey_toBase64","megolmV1PublicKey","backupdecryptionkey_megolmV1PublicKey","MegolmV1BackupKey","decryptV1","ephemeral_key","mac","ciphertext","deferred5_0","deferred5_1","ptr1","len1","ptr2","len2","backupdecryptionkey_decryptV1","ptr4","len4","__wbindgen_free","BackupKeysFinalization","__wbg_backupkeys_free","BackupKeys","decryptionKey","__wbg_get_backupkeys_decryptionKey","__wbg_set_backupkeys_decryptionKey","backupVersion","__wbg_get_backupkeys_backupVersion","v1","__wbg_set_backupkeys_backupVersion","decryptionKeyBase64","backupkeys_decryptionKeyBase64","BackupSecretsBundleFinalization","__wbg_backupsecretsbundle_free","BackupSecretsBundle","deferred1_0","deferred1_1","__wbg_get_backupsecretsbundle_key","__wbg_set_backupsecretsbundle_key","backup_version","__wbg_get_backupsecretsbundle_backup_version","__wbg_set_backupsecretsbundle_backup_version","BaseMigrationDataFinalization","__wbg_basemigrationdata_free","BaseMigrationData","userId","__wbg_get_basemigrationdata_userId","UserId","__wbg_set_basemigrationdata_userId","deviceId","__wbg_get_basemigrationdata_deviceId","DeviceId","__wbg_set_basemigrationdata_deviceId","pickledAccount","__wbg_get_basemigrationdata_pickledAccount","__wbg_get_basemigrationdata_backupVersion","__wbg_set_basemigrationdata_backupVersion","backupRecoveryKey","__wbg_get_basemigrationdata_backupRecoveryKey","__wbg_set_basemigrationdata_backupRecoveryKey","privateCrossSigningMasterKey","__wbg_get_basemigrationdata_privateCrossSigningMasterKey","__wbg_set_basemigrationdata_privateCrossSigningMasterKey","privateCrossSigningSelfSigningKey","__wbg_get_basemigrationdata_privateCrossSigningSelfSigningKey","__wbg_set_basemigrationdata_privateCrossSigningSelfSigningKey","privateCrossSigningUserSigningKey","__wbg_get_basemigrationdata_privateCrossSigningUserSigningKey","__wbg_set_basemigrationdata_privateCrossSigningUserSigningKey","constructor","basemigrationdata_new","CancelInfoFinalization","__wbg_cancelinfo_free","CancelInfo","reason","cancelinfo_reason","cancelCode","cancelinfo_cancelCode","cancelledbyUs","cancelinfo_cancelledbyUs","CheckCodeFinalization","__wbg_checkcode_free","CheckCode","as_bytes","checkcode_as_bytes","to_digit","checkcode_to_digit","CollectStrategyFinalization","__wbg_collectstrategy_free","CollectStrategy","eq","other","collectstrategy_eq","deviceBasedStrategy","only_allow_trusted_devices","error_on_verified_user_problem","collectstrategy_deviceBasedStrategy","allDevices","collectstrategy_allDevices","errorOnUnverifiedUserProblem","collectstrategy_errorOnUnverifiedUserProblem","identityBasedStrategy","collectstrategy_identityBasedStrategy","onlyTrustedDevices","collectstrategy_onlyTrustedDevices","CrossSigningBootstrapRequestsFinalization","__wbg_crosssigningbootstraprequests_free","CrossSigningBootstrapRequests","uploadKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadKeysRequest","uploadSigningKeysRequest","__wbg_get_crosssigningbootstraprequests_uploadSigningKeysRequest","UploadSigningKeysRequest","uploadSignaturesRequest","__wbg_get_crosssigningbootstraprequests_uploadSignaturesRequest","SignatureUploadRequest","CrossSigningKeyExportFinalization","__wbg_crosssigningkeyexport_free","CrossSigningKeyExport","masterKey","crosssigningkeyexport_masterKey","self_signing_key","crosssigningkeyexport_self_signing_key","userSigningKey","crosssigningkeyexport_userSigningKey","CrossSigningStatusFinalization","__wbg_crosssigningstatus_free","CrossSigningStatus","hasMaster","crosssigningstatus_hasMaster","hasSelfSigning","crosssigningstatus_hasSelfSigning","hasUserSigning","crosssigningstatus_hasUserSigning","Curve25519PublicKeyFinalization","__wbg_curve25519publickey_free","Curve25519PublicKey","curve25519publickey_new","curve25519publickey_length","curve25519publickey_toBase64","DecryptedRoomEventFinalization","__wbg_decryptedroomevent_free","DecryptedRoomEvent","event","__wbg_get_decryptedroomevent_event","sender","decryptedroomevent_sender","senderDevice","decryptedroomevent_senderDevice","senderCurve25519Key","decryptedroomevent_senderCurve25519Key","senderClaimedEd25519Key","decryptedroomevent_senderClaimedEd25519Key","forwardingCurve25519KeyChain","decryptedroomevent_forwardingCurve25519KeyChain","shieldState","strict","decryptedroomevent_shieldState","ShieldState","DecryptionSettingsFinalization","__wbg_decryptionsettings_free","DecryptionSettings","sender_device_trust_requirement","__wbg_get_decryptionsettings_sender_device_trust_requirement","__wbg_set_decryptionsettings_sender_device_trust_requirement","decryptionsettings_new","DehydratedDeviceFinalization","__wbg_dehydrateddevice_free","DehydratedDevice","keysForUpload","initial_device_display_name","dehydrated_device_key","DehydratedDeviceKey","dehydrateddevice_keysForUpload","DehydratedDeviceKeyFinalization","__wbg_dehydrateddevicekey_free","dehydrateddevicekey_createRandomKey","createKeyFromArray","dehydrateddevicekey_createKeyFromArray","dehydrateddevicekey_toBase64","DehydratedDevicesFinalization","__wbg_dehydrateddevices_free","DehydratedDevices","dehydrateddevices_create","rehydrate","device_id","device_data","dehydrateddevices_rehydrate","getDehydratedDeviceKey","dehydrateddevices_getDehydratedDeviceKey","saveDehydratedDeviceKey","dehydrateddevices_saveDehydratedDeviceKey","deleteDehydratedDeviceKey","dehydrateddevices_deleteDehydratedDeviceKey","DeviceFinalization","__wbg_device_free","Device","requestVerification","methods","device_requestVerification","encryptToDeviceEvent","event_type","content","device_encryptToDeviceEvent","isVerified","device_isVerified","isCrossSigningTrusted","device_isCrossSigningTrusted","isCrossSignedByOwner","device_isCrossSignedByOwner","setLocalTrust","local_state","device_setLocalTrust","device_userId","device_deviceId","displayName","device_displayName","getKey","algorithm","device_getKey","DeviceKey","curve25519Key","device_curve25519Key","ed25519Key","device_ed25519Key","Ed25519PublicKey","keys","device_keys","algorithms","device_algorithms","signatures","device_signatures","Signatures","localTrustState","device_localTrustState","isLocallyTrusted","device_isLocallyTrusted","isBlacklisted","device_isBlacklisted","isDeleted","device_isDeleted","firstTimeSeen","device_firstTimeSeen","BigInt","asUintN","verify","device_verify","isDehydrated","device_isDehydrated","DeviceIdFinalization","__wbg_deviceid_free","id","deviceid_new","deviceid_toString","DeviceKeyFinalization","__wbg_devicekey_free","devicekey_name","curve25519","devicekey_curve25519","ed25519","devicekey_ed25519","unknown","devicekey_unknown","devicekey_toBase64","DeviceKeyAlgorithmFinalization","__wbg_devicekeyalgorithm_free","DeviceKeyAlgorithm","devicekeyalgorithm_name","devicekeyalgorithm_toString","DeviceKeyIdFinalization","__wbg_devicekeyid_free","DeviceKeyId","devicekeyid_new","devicekeyid_algorithm","devicekeyid_deviceId","devicekeyid_toString","DeviceListsFinalization","__wbg_devicelists_free","DeviceLists","changed","left","devicelists_new","isEmpty","devicelists_isEmpty","devicelists_changed","devicelists_left","EciesFinalization","__wbg_ecies_free","Ecies","ecies_new","public_key","ecies_public_key","establish_inbound_channel","initial_message","ecies_establish_inbound_channel","InboundCreationResult","establish_outbound_channel","ecies_establish_outbound_channel","OutboundCreationResult","Ed25519PublicKeyFinalization","__wbg_ed25519publickey_free","ed25519publickey_length","ed25519publickey_toBase64","Ed25519SignatureFinalization","__wbg_ed25519signature_free","Ed25519Signature","signature","ed25519signature_new","ed25519signature_toBase64","EmojiFinalization","__wbg_emoji_free","Emoji","symbol","emoji_symbol","emoji_description","__wbg_encryptedattachment_free","EncryptionInfoFinalization","__wbg_encryptioninfo_free","EncryptionInfo","encryptioninfo_sender","encryptioninfo_senderDevice","encryptioninfo_senderCurve25519Key","encryptioninfo_senderClaimedEd25519Key","encryptioninfo_shieldState","EncryptionSettingsFinalization","__wbg_encryptionsettings_free","EncryptionSettings","__wbg_get_encryptionsettings_algorithm","__wbg_set_encryptionsettings_algorithm","rotationPeriod","__wbg_get_encryptionsettings_rotationPeriod","__wbg_set_encryptionsettings_rotationPeriod","rotationPeriodMessages","__wbg_get_encryptionsettings_rotationPeriodMessages","__wbg_set_encryptionsettings_rotationPeriodMessages","historyVisibility","__wbg_get_encryptionsettings_historyVisibility","__wbg_set_encryptionsettings_historyVisibility","sharingStrategy","__wbg_get_encryptionsettings_sharingStrategy","__wbg_set_encryptionsettings_sharingStrategy","encryptionsettings_new","EstablishedEciesFinalization","__wbg_establishedecies_free","EstablishedEcies","establishedecies_public_key","encrypt","deferred2_0","deferred2_1","establishedecies_encrypt","decrypt","deferred3_0","deferred3_1","establishedecies_decrypt","check_code","establishedecies_check_code","EventIdFinalization","__wbg_eventid_free","EventId","eventid_new","localpart","eventid_localpart","serverName","eventid_serverName","ServerName","eventid_toString","IdentityKeysFinalization","__wbg_identitykeys_free","IdentityKeys","__wbg_get_identitykeys_ed25519","__wbg_set_identitykeys_ed25519","__wbg_get_identitykeys_curve25519","__wbg_set_identitykeys_curve25519","InboundCreationResultFinalization","__wbg_inboundcreationresult_free","channel","__wbg_get_inboundcreationresult_channel","__wbg_set_inboundcreationresult_channel","__wbg_get_inboundcreationresult_message","InboundGroupSessionFinalization","__wbg_inboundgroupsession_free","InboundGroupSession","roomId","inboundgroupsession_roomId","RoomId","senderKey","inboundgroupsession_senderKey","sessionId","inboundgroupsession_sessionId","hasBeenImported","inboundgroupsession_hasBeenImported","KeysBackupRequestFinalization","__wbg_keysbackuprequest_free","KeysBackupRequest","__wbg_get_keysbackuprequest_id","body","__wbg_get_keysbackuprequest_body","version","__wbg_get_keysbackuprequest_version","keysbackuprequest_new","keysbackuprequest_type","KeysClaimRequestFinalization","__wbg_keysclaimrequest_free","KeysClaimRequest","__wbg_get_keysclaimrequest_id","__wbg_get_keysclaimrequest_body","keysclaimrequest_new","keysclaimrequest_type","KeysQueryRequestFinalization","__wbg_keysqueryrequest_free","KeysQueryRequest","__wbg_get_keysqueryrequest_id","__wbg_get_keysqueryrequest_body","keysqueryrequest_new","keysqueryrequest_type","KeysUploadRequestFinalization","__wbg_keysuploadrequest_free","KeysUploadRequest","__wbg_get_keysuploadrequest_id","__wbg_get_keysuploadrequest_body","keysuploadrequest_new","keysuploadrequest_type","MaybeSignatureFinalization","__wbg_maybesignature_free","MaybeSignature","isValid","maybesignature_isValid","isInvalid","maybesignature_isInvalid","maybesignature_signature","Signature","invalidSignatureSource","maybesignature_invalidSignatureSource","MegolmDecryptionErrorFinalization","__wbg_megolmdecryptionerror_free","MegolmDecryptionError","__wbg_get_megolmdecryptionerror_code","__wbg_get_megolmdecryptionerror_description","maybe_withheld","__wbg_get_megolmdecryptionerror_maybe_withheld","MegolmV1BackupKeyFinalization","__wbg_megolmv1backupkey_free","publicKeyBase64","megolmv1backupkey_publicKeyBase64","megolmv1backupkey_algorithm","MigrationFinalization","__wbg_migration_free","Migration","migrateBaseData","data","pickle_key","store_handle","StoreHandle","migration_migrateBaseData","migrateOlmSessions","sessions","migration_migrateOlmSessions","migrateMegolmSessions","migration_migrateMegolmSessions","OlmMachineFinalization","__wbg_olmmachine_free","OlmMachine","olmmachine_new","initialize","user_id","store_name","store_passphrase","olmmachine_initialize","initFromStore","olmmachine_initFromStore","olmmachine_userId","olmmachine_deviceId","deviceCreationTimeMs","olmmachine_deviceCreationTimeMs","identityKeys","olmmachine_identityKeys","olmmachine_displayName","roomKeyRequestsEnabled","olmmachine_roomKeyRequestsEnabled","enabled","olmmachine_set_roomKeyRequestsEnabled","roomKeyForwardingEnabled","olmmachine_roomKeyForwardingEnabled","olmmachine_set_roomKeyForwardingEnabled","trackedUsers","olmmachine_trackedUsers","updateTrackedUsers","users","olmmachine_updateTrackedUsers","markAllTrackedUsersAsDirty","olmmachine_markAllTrackedUsersAsDirty","receiveSyncChanges","to_device_events","changed_devices","one_time_keys_counts","unused_fallback_keys","olmmachine_receiveSyncChanges","outgoingRequests","olmmachine_outgoingRequests","markRequestAsSent","request_id","request_type","response","olmmachine_markRequestAsSent","encryptRoomEvent","room_id","olmmachine_encryptRoomEvent","decryptRoomEvent","decryption_settings","olmmachine_decryptRoomEvent","getRoomEventEncryptionInfo","olmmachine_getRoomEventEncryptionInfo","crossSigningStatus","olmmachine_crossSigningStatus","exportSecretsBundle","olmmachine_exportSecretsBundle","importSecretsBundle","bundle","SecretsBundle","olmmachine_importSecretsBundle","exportCrossSigningKeys","olmmachine_exportCrossSigningKeys","importCrossSigningKeys","master_key","user_signing_key","olmmachine_importCrossSigningKeys","bootstrapCrossSigning","reset","olmmachine_bootstrapCrossSigning","getIdentity","olmmachine_getIdentity","sign","olmmachine_sign","invalidateGroupSession","olmmachine_invalidateGroupSession","shareRoomKey","encryption_settings","olmmachine_shareRoomKey","queryKeysForUsers","olmmachine_queryKeysForUsers","getMissingSessions","olmmachine_getMissingSessions","getUserDevices","timeout_secs","olmmachine_getUserDevices","getDevice","olmmachine_getDevice","getVerification","flow_id","olmmachine_getVerification","getVerificationRequest","olmmachine_getVerificationRequest","VerificationRequest","getVerificationRequests","olmmachine_getVerificationRequests","receiveVerificationEvent","olmmachine_receiveVerificationEvent","exportRoomKeys","predicate","olmmachine_exportRoomKeys","importRoomKeys","exported_room_keys","progress_listener","olmmachine_importRoomKeys","importExportedRoomKeys","olmmachine_importExportedRoomKeys","importBackedUpRoomKeys","backed_up_room_keys","olmmachine_importBackedUpRoomKeys","saveBackupDecryptionKey","decryption_key","olmmachine_saveBackupDecryptionKey","getBackupKeys","olmmachine_getBackupKeys","verifyBackup","backup_info","olmmachine_verifyBackup","enableBackupV1","public_key_base_64","olmmachine_enableBackupV1","isBackupEnabled","olmmachine_isBackupEnabled","disableBackup","olmmachine_disableBackup","backupRoomKeys","olmmachine_backupRoomKeys","roomKeyCounts","olmmachine_roomKeyCounts","encryptExportedRoomKeys","passphrase","rounds","deferred4_0","deferred4_1","olmmachine_encryptExportedRoomKeys","ptr3","len3","decryptExportedRoomKeys","encrypted_exported_room_keys","olmmachine_decryptExportedRoomKeys","registerRoomKeyUpdatedCallback","callback","olmmachine_registerRoomKeyUpdatedCallback","registerRoomKeysWithheldCallback","olmmachine_registerRoomKeysWithheldCallback","registerUserIdentityUpdatedCallback","olmmachine_registerUserIdentityUpdatedCallback","registerDevicesUpdatedCallback","olmmachine_registerDevicesUpdatedCallback","registerReceiveSecretCallback","olmmachine_registerReceiveSecretCallback","getSecretsFromInbox","secret_name","olmmachine_getSecretsFromInbox","deleteSecretsFromInbox","olmmachine_deleteSecretsFromInbox","requestMissingSecretsIfNeeded","olmmachine_requestMissingSecretsIfNeeded","getRoomSettings","olmmachine_getRoomSettings","setRoomSettings","room_settings","RoomSettings","olmmachine_setRoomSettings","dehydratedDevices","olmmachine_dehydratedDevices","close","olmmachine_close","OtherUserIdentityFinalization","__wbg_otheruseridentity_free","OtherUserIdentity","otheruseridentity_isVerified","otheruseridentity_verify","request_event_id","otheruseridentity_requestVerification","verificationRequestContent","otheruseridentity_verificationRequestContent","otheruseridentity_masterKey","selfSigningKey","otheruseridentity_selfSigningKey","pinCurrentMasterKey","otheruseridentity_pinCurrentMasterKey","identityNeedsUserApproval","otheruseridentity_identityNeedsUserApproval","wasPreviouslyVerified","otheruseridentity_wasPreviouslyVerified","withdrawVerification","otheruseridentity_withdrawVerification","hasVerificationViolation","otheruseridentity_hasVerificationViolation","OutboundCreationResultFinalization","__wbg_outboundcreationresult_free","__wbg_get_outboundcreationresult_initial_message","OwnUserIdentityFinalization","__wbg_ownuseridentity_free","OwnUserIdentity","ownuseridentity_isVerified","ownuseridentity_verify","ownuseridentity_requestVerification","trustsOurOwnDevice","ownuseridentity_trustsOurOwnDevice","ownuseridentity_masterKey","ownuseridentity_selfSigningKey","ownuseridentity_userSigningKey","ownuseridentity_wasPreviouslyVerified","ownuseridentity_withdrawVerification","ownuseridentity_hasVerificationViolation","PickledInboundGroupSessionFinalization","__wbg_pickledinboundgroupsession_free","PickledInboundGroupSession","__unwrap","jsValue","pickle","__wbg_get_pickledinboundgroupsession_pickle","__wbg_get_pickledinboundgroupsession_senderKey","senderSigningKey","__wbg_get_pickledinboundgroupsession_senderSigningKey","__wbg_get_pickledinboundgroupsession_roomId","__wbg_set_pickledinboundgroupsession_roomId","imported","__wbg_get_pickledinboundgroupsession_imported","__wbg_set_pickledinboundgroupsession_imported","backedUp","__wbg_get_pickledinboundgroupsession_backedUp","__wbg_set_pickledinboundgroupsession_backedUp","pickledinboundgroupsession_new","PickledSessionFinalization","__wbg_pickledsession_free","PickledSession","__wbg_get_pickledsession_pickle","__wbg_get_pickledsession_senderKey","createdUsingFallbackKey","__wbg_get_pickledsession_createdUsingFallbackKey","__wbg_set_pickledsession_createdUsingFallbackKey","creationTime","__wbg_get_pickledsession_creationTime","__wbg_set_pickledsession_creationTime","lastUseTime","__wbg_get_pickledsession_lastUseTime","__wbg_set_pickledsession_lastUseTime","pickledsession_new","PutDehydratedDeviceRequestFinalization","__wbg_putdehydrateddevicerequest_free","PutDehydratedDeviceRequest","__wbg_get_putdehydrateddevicerequest_body","putdehydrateddevicerequest_new","QrFinalization","__wbg_qr_free","Qr","qr_state","hasBeenScanned","qr_hasBeenScanned","hasBeenConfirmed","qr_hasBeenConfirmed","qr_userId","otherUserId","qr_otherUserId","otherDeviceId","qr_otherDeviceId","weStarted","qr_weStarted","cancelInfo","qr_cancelInfo","isDone","qr_isDone","isCancelled","qr_isCancelled","isSelfVerification","qr_isSelfVerification","reciprocated","qr_reciprocated","flowId","qr_flowId","qr_roomId","toQrCode","qr_toQrCode","QrCode","toBytes","qr_toBytes","reciprocate","qr_reciprocate","confirmScanning","qr_confirmScanning","cancel","qr_cancel","cancelWithCode","qr_cancelWithCode","registerChangesCallback","qr_registerChangesCallback","QrCodeFinalization","__wbg_qrcode_free","renderIntoBuffer","qrcode_renderIntoBuffer","QrCodeDataFinalization","__wbg_qrcodedata_free","QrCodeData","rendezvous_url","server_name","qrcodedata_new","fromBytes","bytes","qrcodedata_fromBytes","qrcodedata_toBytes","qrcodedata_fromBase64","qrcodedata_toBase64","publicKey","qrcodedata_publicKey","rendezvousUrl","qrcodedata_rendezvousUrl","qrcodedata_serverName","mode","qrcodedata_mode","QrCodeScanFinalization","__wbg_qrcodescan_free","QrCodeScan","qrcodescan_fromBytes","RehydratedDeviceFinalization","__wbg_rehydrateddevice_free","RehydratedDevice","receiveEvents","rehydrateddevice_receiveEvents","RoomIdFinalization","__wbg_roomid_free","roomid_new","roomid_toString","RoomKeyCountsFinalization","__wbg_roomkeycounts_free","RoomKeyCounts","total","__wbg_get_roomkeycounts_total","__wbg_set_roomkeycounts_total","__wbg_get_roomkeycounts_backedUp","__wbg_set_roomkeycounts_backedUp","RoomKeyImportResultFinalization","__wbg_roomkeyimportresult_free","RoomKeyImportResult","importedCount","__wbg_get_roomkeyimportresult_importedCount","totalCount","__wbg_get_roomkeyimportresult_totalCount","roomkeyimportresult_keys","RoomKeyInfoFinalization","__wbg_roomkeyinfo_free","RoomKeyInfo","roomkeyinfo_algorithm","roomkeyinfo_roomId","roomkeyinfo_senderKey","roomkeyinfo_sessionId","RoomKeyWithheldInfoFinalization","__wbg_roomkeywithheldinfo_free","RoomKeyWithheldInfo","roomkeywithheldinfo_sender","roomkeywithheldinfo_algorithm","withheldCode","roomkeywithheldinfo_withheldCode","roomkeywithheldinfo_roomId","roomkeywithheldinfo_sessionId","RoomMessageRequestFinalization","__wbg_roommessagerequest_free","RoomMessageRequest","__wbg_get_roommessagerequest_id","__wbg_get_roommessagerequest_room_id","txn_id","__wbg_get_roommessagerequest_txn_id","__wbg_get_roommessagerequest_event_type","__wbg_get_roommessagerequest_body","roommessagerequest_new","roommessagerequest_type","RoomSettingsFinalization","__wbg_roomsettings_free","__wbg_get_roomsettings_algorithm","__wbg_set_roomsettings_algorithm","onlyAllowTrustedDevices","__wbg_get_roomsettings_onlyAllowTrustedDevices","__wbg_set_roomsettings_onlyAllowTrustedDevices","sessionRotationPeriodMs","__wbg_get_roomsettings_sessionRotationPeriodMs","__wbg_set_roomsettings_sessionRotationPeriodMs","sessionRotationPeriodMessages","__wbg_get_roomsettings_sessionRotationPeriodMessages","__wbg_set_roomsettings_sessionRotationPeriodMessages","roomsettings_new","SasFinalization","__wbg_sas_free","Sas","sas_userId","sas_deviceId","sas_otherUserId","sas_otherDeviceId","sas_flowId","sas_roomId","supportsEmoji","sas_supportsEmoji","startedFromRequest","sas_startedFromRequest","sas_isSelfVerification","haveWeConfirmed","sas_haveWeConfirmed","hasBeenAccepted","sas_hasBeenAccepted","sas_cancelInfo","sas_weStarted","accept","sas_accept","confirm","sas_confirm","sas_cancel","sas_cancelWithCode","timedOut","sas_timedOut","canBePresented","sas_canBePresented","sas_isDone","sas_isCancelled","emoji","sas_emoji","emojiIndex","sas_emojiIndex","decimals","sas_decimals","sas_registerChangesCallback","SecretsBundleFinalization","__wbg_secretsbundle_free","secretsbundle_masterKey","secretsbundle_selfSigningKey","secretsbundle_userSigningKey","backupBundle","secretsbundle_backupBundle","to_json","secretsbundle_to_json","from_json","json","secretsbundle_from_json","ServerNameFinalization","__wbg_servername_free","servername_new","host","servername_host","port","servername_port","isIpLiteral","servername_isIpLiteral","ShieldStateFinalization","__wbg_shieldstate_free","color","__wbg_get_shieldstate_color","__wbg_set_shieldstate_color","__wbg_get_shieldstate_code","__wbg_set_shieldstate_code","shieldstate_message","SignatureFinalization","__wbg_signature_free","signature_ed25519","signature_toBase64","SignatureUploadRequestFinalization","__wbg_signatureuploadrequest_free","__wbg_get_signatureuploadrequest_id","__wbg_get_signatureuploadrequest_body","signed_keys","signatureuploadrequest_new","signatureuploadrequest_type","SignatureVerificationFinalization","__wbg_signatureverification_free","SignatureVerification","deviceState","signatureverification_deviceState","userState","signatureverification_userState","trusted","signatureverification_trusted","SignaturesFinalization","__wbg_signatures_free","signatures_new","addSignature","signer","key_id","signatures_addSignature","getSignature","signatures_getSignature","signatures_get","clear","signatures_clear","signatures_isEmpty","count","signatures_count","asJSON","signatures_asJSON","StoreHandleFinalization","__wbg_storehandle_free","open","storehandle_open","openWithKey","store_key","storehandle_openWithKey","ToDeviceRequestFinalization","__wbg_todevicerequest_free","ToDeviceRequest","__wbg_get_todevicerequest_id","__wbg_get_todevicerequest_event_type","__wbg_get_todevicerequest_txn_id","__wbg_get_todevicerequest_body","todevicerequest_new","todevicerequest_type","TracingFinalization","__wbg_tracing_free","Tracing","isAvailable","tracing_isAvailable","min_level","tracing_new","minLevel","tracing_set_minLevel","turnOn","tracing_turnOn","turnOff","tracing_turnOff","UploadSigningKeysRequestFinalization","__wbg_uploadsigningkeysrequest_free","__wbg_get_uploadsigningkeysrequest_body","uploadsigningkeysrequest_new","UserDevicesFinalization","__wbg_userdevices_free","UserDevices","userdevices_get","isAnyVerified","userdevices_isAnyVerified","userdevices_keys","devices","userdevices_devices","UserIdFinalization","__wbg_userid_free","userid_new","userid_localpart","userid_serverName","isHistorical","userid_isHistorical","userid_toString","clone","userid_clone","VerificationRequestFinalization","__wbg_verificationrequest_free","request","own_user_id","own_device_id","other_user_id","verificationrequest_request","ownUserId","verificationrequest_ownUserId","verificationrequest_otherUserId","verificationrequest_otherDeviceId","verificationrequest_roomId","verificationrequest_cancelInfo","isPassive","verificationrequest_isPassive","isReady","verificationrequest_isReady","verificationrequest_timedOut","timeRemainingMillis","verificationrequest_timeRemainingMillis","theirSupportedMethods","verificationrequest_theirSupportedMethods","ourSupportedMethods","verificationrequest_ourSupportedMethods","verificationrequest_flowId","verificationrequest_isSelfVerification","verificationrequest_weStarted","verificationrequest_isDone","phase","verificationrequest_phase","verificationrequest_getVerification","verificationrequest_registerChangesCallback","verificationrequest_isCancelled","acceptWithMethods","verificationrequest_acceptWithMethods","verificationrequest_accept","verificationrequest_cancel","startSas","verificationrequest_startSas","generateQrCode","verificationrequest_generateQrCode","scanQrCode","verificationrequest_scanQrCode","VersionsFinalization","__wbg_versions_free","vodozemac","__wbg_get_versions_vodozemac","matrix_sdk_crypto","__wbg_get_versions_matrix_sdk_crypto","git_sha","__wbg_get_versions_git_sha","git_description","__wbg_get_versions_git_description","__wbg_String_8f0eb39a4a4c2f66","String","setInt32","__wbg_String_eecc4a11987127d6","__wbg_Window_b0044ac7db258535","Window","__wbg_WorkerGlobalScope_b74cefefc62a37da","WorkerGlobalScope","__wbg_add_883d9432f9188ef2","__wbg_add_9338901b80183e0f","arguments","__wbg_at_7d852dd9f194d43e","at","__wbg_backupkeys_new","__wbg_bound_55a8d08e0491e17a","IDBKeyRange","bound","__wbg_bound_f2afc3766d4545cf","arg3","__wbg_buffer_609cc3eee51ed158","__wbg_call_672a4d21634d4a24","__wbg_call_7cccdd69e0791ae2","__wbg_call_833bed5770ea2041","__wbg_call_b8adc8b1d0a0d8eb","arg4","__wbg_clearTimeout_5a54f8841c30079a","clearTimeout","__wbg_clear_f450db7eeb71163f","__wbg_close_26fc2e6856d8567a","__wbg_code_cfd8f6868bdaed9b","__wbg_continue_c46c11d3dbe1b030","continue","__wbg_count_613cb921d67a4f26","__wbg_count_ea1a2987dff7759e","__wbg_createIndex_873ac48adc772309","createIndex","__wbg_createIndex_fcfd513cf4581834","__wbg_createObjectStore_e566459f7161f82f","createObjectStore","__wbg_crosssigningbootstraprequests_new","__wbg_crosssigningkeyexport_new","__wbg_crosssigningstatus_new","__wbg_crypto_ed58b8e10a292839","crypto","__wbg_debug_3cb59063b29f58c1","console","__wbg_debug_8edd10d3d6b2631b","__wbg_decryptedroomevent_new","__wbg_dehydrateddevice_new","__wbg_dehydrateddevicekey_new","__wbg_deleteObjectStore_3f08ae00cd288224","deleteObjectStore","__wbg_delete_200677093b4cf756","delete","__wbg_delete_2ecf7cf20900b3a2","__wbg_device_new","__wbg_deviceid_new","__wbg_devicekey_new","__wbg_devicekeyid_new","__wbg_done_769e5ede4b31c67b","done","__wbg_emoji_new","__wbg_encryptioninfo_new","__wbg_entries_3265d4158b33e5dc","entries","__wbg_entries_c8a90a7ed73e84ce","__wbg_error_524f506f44df1645","error","__wbg_error_7534b8e9a36f1ab4","deferred0_0","deferred0_1","__wbg_error_c5c48c1ca56731d8","__wbg_error_ff4ddaabdfc5dbb3","__wbg_from_2a5d3e218e67aa85","from","__wbg_getAllKeys_b11d8835dc4be0e8","getAllKeys","__wbg_getAll_304e868beec2021f","getAll","__wbg_getAll_d1e60c13c0073374","__wbg_getAll_e6903c610babcd42","__wbg_getRandomValues_bcb4912f16000dc4","getRandomValues","__wbg_getTime_46267b1c24877e30","getTime","__wbg_get_67b2ba62fc30de12","Reflect","__wbg_get_8da03f81f6a1111e","__wbg_get_93e54e8e166fbcab","__wbg_get_b9b93047fe3cf45b","__wbg_getwithrefkey_1dc361bd10053bfe","__wbg_getwithrefkey_6550b2c093d2eb18","__wbg_global_b6f5c73312f62313","global","__wbg_inboundgroupsession_new","__wbg_index_e00ca5fff206ee3e","index","__wbg_indexedDB_601ec26c63e333de","indexedDB","__wbg_indexedDB_b1f49280282046f8","__wbg_indexedDB_f6b47b0dc333fd2f","__wbg_info_1643c3c2890128ab","info","__wbg_info_3daf2e093e091b66","__wbg_instanceof_ArrayBuffer_e14585432e3737fc","ArrayBuffer","__wbg_instanceof_Map_f3469ce2244d2430","Map","__wbg_instanceof_Promise_935168b8f4b49db3","Promise","__wbg_instanceof_Uint8Array_17156bcf118086a9","__wbg_isArray_a1eab7e0d067391b","__wbg_isSafeInteger_343e2beeeece1bb0","Number","isSafeInteger","__wbg_item_c3c26b4103ad5aaf","item","__wbg_iterator_9a24c88df860dc65","Symbol","iterator","__wbg_key_29fefecef430db96","__wbg_keysbackuprequest_new","__wbg_keysclaimrequest_new","__wbg_keysqueryrequest_new","__wbg_keysuploadrequest_new","__wbg_length_238152a0aedbb6e7","__wbg_length_a446193dc22c12f8","__wbg_length_e2d2a49132c1b256","__wbg_lowerBound_1872d19f5bcf83c6","lowerBound","__wbg_maybesignature_new","__wbg_megolmdecryptionerror_new","__wbg_message_5c5d919204d42400","__wbg_msCrypto_0a36e2ec3a343d26","msCrypto","__wbg_name_f2d27098bfd843e7","__wbg_new_23a2665fac83c611","state0","closure430_externref_shim","__wbg_adapter_761","__wbg_new_31a97dac4f10fab7","Date","__wbg_new_405e22f390576ce2","__wbg_new_5e0be73521bc8c17","__wbg_new_78feb108b6472713","__wbg_new_7a91e41fe43b3c92","Uint8ClampedArray","__wbg_new_8a6f238a6ece86ea","__wbg_new_a12002a7f91c75be","__wbg_new_a239edaa1dc2968f","Set","__wbg_newnoargs_105ed471475aaf50","Function","__wbg_newwithbyteoffsetandlength_6d34787141015158","__wbg_newwithbyteoffsetandlength_d97e637ebe145a9a","__wbg_newwithlength_a381634e90c276d4","__wbg_newwithlength_ee8e1b95dea9d37c","__wbg_newwithmessage_baedba94f03976fd","DOMException","__wbg_next_25feadfc0913fea9","next","__wbg_next_6574e1a8a62d1055","__wbg_node_02999533c4ea02e3","node","__wbg_now_2c95c9de01293173","now","__wbg_now_807e54c39636c349","__wbg_objectStoreNames_9bb1ab04a7012aaf","objectStoreNames","__wbg_objectStore_21878d46d25b64b6","objectStore","__wbg_oldVersion_e8337811e52861c6","oldVersion","__wbg_olmmachine_new","__wbg_openCursor_1adef2266972fb45","openCursor","__wbg_openCursor_238e247d18bde2cd","__wbg_openCursor_f4b061aa6d804b93","__wbg_open_88b1390d99a7c691","__wbg_open_e0c0b2993eb596e1","__wbg_otheruseridentity_new","__wbg_ownuseridentity_new","__wbg_parse_def2e24ef1252aff","parse","__wbg_performance_7a3ffd0b17f663ad","performance","__wbg_pickledinboundgroupsession_unwrap","__wbg_pickledsession_unwrap","__wbg_process_5c1d670bc53614b8","process","__wbg_push_737cfc8c1432c2c6","__wbg_put_066faa31a6a88f5b","put","__wbg_putdehydrateddevicerequest_new","__wbg_qr_new","__wbg_queueMicrotask_97d92b4fcc8a61c5","queueMicrotask","__wbg_queueMicrotask_d3219def82552485","__wbg_randomFillSync_ab2cfe79ebbf2740","randomFillSync","__wbg_readyState_4013cfdf4f22afb0","readyState","indexOf","__wbg_rehydrateddevice_new","__wbg_require_79b1e9274cde3c87","__wbg_resolve_4851785c9c5f573d","resolve","__wbg_result_f29afabdf2c05826","__wbg_roomid_unwrap","__wbg_roomkeycounts_new","__wbg_roomkeyimportresult_new","__wbg_roomkeyinfo_new","__wbg_roomkeywithheldinfo_new","__wbg_roommessagerequest_new","__wbg_roomsettings_new","__wbg_sas_new","__wbg_secretsbundle_new","__wbg_setTimeout_db2dbaeefb6f39c7","setTimeout","__wbg_set_37837023f3d740e8","__wbg_set_3807d5f0bfc24aa7","__wbg_set_3f1d0b984ed272ed","__wbg_set_65595bdd868b3009","__wbg_set_6775f73144c2ef27","__wbg_set_8fc6bf8a5b1071d1","__wbg_setonabort_3bf4db6614fa98e9","onabort","__wbg_setonblocked_aebf64bd39f1eca8","onblocked","__wbg_setoncomplete_4d19df0dadb7c4d4","oncomplete","__wbg_setonerror_b0d9d723b8fddbbb","onerror","__wbg_setonerror_d7e3056cc6e56085","__wbg_setonsuccess_afa464ee777a396d","onsuccess","__wbg_setonupgradeneeded_fcf7ce4f2eb0cb5f","onupgradeneeded","__wbg_setonversionchange_6ee07fa49ee1e3a5","onversionchange","__wbg_setunique_dd24c422aa05df89","unique","__wbg_signatures_new","__wbg_signatureuploadrequest_new","__wbg_signatureverification_new","__wbg_stack_0ed75d68575b0f3c","__wbg_static_accessor_GLOBAL_88a902d13a557d07","__wbg_static_accessor_GLOBAL_THIS_56578be7e9f832b0","globalThis","__wbg_static_accessor_SELF_37c5d418e4bf5819","self","__wbg_static_accessor_WINDOW_5de37043a91a9c40","window","__wbg_storehandle_new","__wbg_stringify_f7ed6987935b4a24","__wbg_subarray_aa9065fa9dc5df96","__wbg_target_0a62d9d79a2a1ede","target","__wbg_then_44b73946d2fb3e7d","then","__wbg_then_48b406749878a531","__wbg_todevicerequest_new","__wbg_transaction_babc423936946a37","transaction","__wbg_transaction_d6d07c3c9963c49e","__wbg_transaction_e713aa7b07ccaedd","__wbg_update_acd72607f506872a","update","__wbg_userdevices_new","__wbg_userid_new","__wbg_userid_unwrap","__wbg_value_68c4e9a54bb7fd5e","__wbg_value_cd1ffa7b1ab794f1","__wbg_values_53465c57fc8cd691","values","__wbg_verificationrequest_new","__wbg_version_a70a33e5bbc6d6db","__wbg_versions_c71aa1626a93e0a1","versions","__wbg_warn_4ca3906c248c47c4","warn","__wbg_warn_f4783a0419527b21","__wbindgen_as_number","__wbindgen_bigint_from_i64","__wbindgen_bigint_from_u64","__wbindgen_bigint_get_as_i64","setBigInt64","__wbindgen_boolean_get","__wbindgen_cb_drop","__wbindgen_closure_wrapper1048","__wbindgen_closure_wrapper2227","__wbindgen_closure_wrapper5458","__wbindgen_closure_wrapper6924","__wbindgen_closure_wrapper6929","__wbindgen_debug_string","__wbindgen_error_new","__wbindgen_in","__wbindgen_init_externref_table","table","grow","__wbindgen_is_array","__wbindgen_is_bigint","__wbindgen_is_function","__wbindgen_is_null","__wbindgen_is_object","__wbindgen_is_string","__wbindgen_is_undefined","__wbindgen_jsval_eq","__wbindgen_jsval_loose_eq","__wbindgen_memory","__wbindgen_number_get","setFloat64","__wbindgen_number_new","__wbindgen_string_get","__wbindgen_string_new","__wbindgen_throw","__wbindgen_try_into_number"],"sourceRoot":""}