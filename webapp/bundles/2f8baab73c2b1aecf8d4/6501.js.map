{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/6501.js","mappings":"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","sources":["webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/helper.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/data/const.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/data/dateSplits.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/date/matching.ts","webpack://soc-connect/./node_modules/fastest-levenshtein/esm/mod.js","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/levenshtein.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/data/l33tTable.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/data/translationKeys.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/TrieNode.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/Options.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/reverse.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/unmunger/getCleanPasswords.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/matching/l33t.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/regex/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/scoring/utils.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/scoring/uppercase.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/variants/scoring/l33t.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/spatial/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/scoring/estimate.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/bruteforce/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/date/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/regex/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/repeat/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/sequence/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/separator/scoring.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/scoring/index.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/repeat/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/sequence/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/spatial/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/separator/matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/Matching.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/TimeEstimates.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/bruteforce/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/date/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/dictionary/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/regex/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/repeat/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/sequence/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/spatial/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/matcher/separator/feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/Feedback.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/core/src/index.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/language-common/src/index.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/language-en/src/index.ts","webpack://soc-connect/./node_modules/@zxcvbn-ts/language-en/src/translations.ts"],"sourcesContent":["export const empty = (obj) => Object.keys(obj).length === 0;\nexport const extend = (listToExtend, list) => \n// eslint-disable-next-line prefer-spread\nlistToExtend.push.apply(listToExtend, list);\nexport const translate = (string, chrMap) => {\n    let newString = string;\n    Object.entries(chrMap).forEach(([key, value]) => {\n        const escapedKey = key.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n        const regex = new RegExp(escapedKey, 'g');\n        newString = newString.replace(regex, value);\n    });\n    return newString;\n};\n// mod implementation that works for negative numbers\nexport const mod = (n, m) => ((n % m) + m) % m;\n// sort on i primary, j secondary\nexport const sorted = (matches) => matches.sort((m1, m2) => m1.i - m2.i || m1.j - m2.j);\nexport const buildRankedDictionary = (orderedList) => {\n    const result = {};\n    let counter = 1; // rank starts at 1, not 0\n    orderedList.forEach((word) => {\n        result[word] = counter;\n        counter += 1;\n    });\n    return result;\n};\n//# sourceMappingURL=helper.js.map","import dateSplits from './dateSplits';\nexport const DATE_MAX_YEAR = 2050;\nexport const DATE_MIN_YEAR = 1000;\nexport const DATE_SPLITS = dateSplits;\nexport const BRUTEFORCE_CARDINALITY = 10;\nexport const MIN_GUESSES_BEFORE_GROWING_SEQUENCE = 10000;\nexport const MIN_SUBMATCH_GUESSES_SINGLE_CHAR = 10;\nexport const MIN_SUBMATCH_GUESSES_MULTI_CHAR = 50;\nexport const MIN_YEAR_SPACE = 20;\n// \\xbf-\\xdf is a range for almost all special uppercase letter like Ä and so on\nexport const START_UPPER = /^[A-Z\\xbf-\\xdf][^A-Z\\xbf-\\xdf]+$/;\nexport const END_UPPER = /^[^A-Z\\xbf-\\xdf]+[A-Z\\xbf-\\xdf]$/;\n// \\xdf-\\xff is a range for almost all special lowercase letter like ä and so on\nexport const ALL_UPPER = /^[A-Z\\xbf-\\xdf]+$/;\nexport const ALL_UPPER_INVERTED = /^[^a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER = /^[a-z\\xdf-\\xff]+$/;\nexport const ALL_LOWER_INVERTED = /^[^A-Z\\xbf-\\xdf]+$/;\nexport const ONE_LOWER = /[a-z\\xdf-\\xff]/;\nexport const ONE_UPPER = /[A-Z\\xbf-\\xdf]/;\nexport const ALPHA_INVERTED = /[^A-Za-z\\xbf-\\xdf]/gi;\nexport const ALL_DIGIT = /^\\d+$/;\nexport const REFERENCE_YEAR = new Date().getFullYear();\nexport const REGEXEN = { recentYear: /19\\d\\d|200\\d|201\\d|202\\d/g };\n/* Separators */\nexport const SEPERATOR_CHARS = [\n    ' ',\n    ',',\n    ';',\n    ':',\n    '|',\n    '/',\n    '\\\\',\n    '_',\n    '.',\n    '-',\n];\nexport const SEPERATOR_CHAR_COUNT = SEPERATOR_CHARS.length;\n//# sourceMappingURL=const.js.map","export default {\n    4: [\n        // for length-4 strings, eg 1191 or 9111, two ways to split:\n        [1, 2],\n        [2, 3], // 91 1 1\n    ],\n    5: [\n        [1, 3],\n        [2, 3],\n        //  [2, 3], // 91 1 11    <- duplicate previous one\n        [2, 4], // 91 11 1    <- New and must be added as bug fix\n    ],\n    6: [\n        [1, 2],\n        [2, 4],\n        [4, 5], // 1991 1 1\n    ],\n    //  1111991\n    7: [\n        [1, 3],\n        [2, 3],\n        [4, 5],\n        [4, 6], // 1991 11 1\n    ],\n    8: [\n        [2, 4],\n        [4, 6], // 1991 11 11\n    ],\n};\n//# sourceMappingURL=dateSplits.js.map","import { DATE_MAX_YEAR, DATE_MIN_YEAR, DATE_SPLITS, REFERENCE_YEAR, } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  date matching ----------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchDate {\n    /*\n     * a \"date\" is recognized as:\n     *   any 3-tuple that starts or ends with a 2- or 4-digit year,\n     *   with 2 or 0 separator chars (1.1.91 or 1191),\n     *   maybe zero-padded (01-01-91 vs 1-1-91),\n     *   a month between 1 and 12,\n     *   a day between 1 and 31.\n     *\n     * note: this isn't true date parsing in that \"feb 31st\" is allowed,\n     * this doesn't check for leap years, etc.\n     *\n     * recipe:\n     * start with regex to find maybe-dates, then attempt to map the integers\n     * onto month-day-year to filter the maybe-dates into dates.\n     * finally, remove matches that are substrings of other matches to reduce noise.\n     *\n     * note: instead of using a lazy or greedy regex to find many dates over the full string,\n     * this uses a ^...$ regex against every substring of the password -- less performant but leads\n     * to every possible date match.\n     */\n    match({ password }) {\n        const matches = [\n            ...this.getMatchesWithoutSeparator(password),\n            ...this.getMatchesWithSeparator(password),\n        ];\n        const filteredMatches = this.filterNoise(matches);\n        return sorted(filteredMatches);\n    }\n    getMatchesWithSeparator(password) {\n        const matches = [];\n        const maybeDateWithSeparator = /^(\\d{1,4})([\\s/\\\\_.-])(\\d{1,2})\\2(\\d{1,4})$/;\n        // # dates with separators are between length 6 '1/1/91' and 10 '11/11/1991'\n        for (let i = 0; i <= Math.abs(password.length - 6); i += 1) {\n            for (let j = i + 5; j <= i + 9; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                const regexMatch = maybeDateWithSeparator.exec(token);\n                if (regexMatch != null) {\n                    const dmy = this.mapIntegersToDayMonthYear([\n                        parseInt(regexMatch[1], 10),\n                        parseInt(regexMatch[3], 10),\n                        parseInt(regexMatch[4], 10),\n                    ]);\n                    if (dmy != null) {\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: regexMatch[2],\n                            year: dmy.year,\n                            month: dmy.month,\n                            day: dmy.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-statements\n    getMatchesWithoutSeparator(password) {\n        const matches = [];\n        const maybeDateNoSeparator = /^\\d{4,8}$/;\n        const metric = (candidate) => Math.abs(candidate.year - REFERENCE_YEAR);\n        // # dates without separators are between length 4 '1191' and 8 '11111991'\n        for (let i = 0; i <= Math.abs(password.length - 4); i += 1) {\n            for (let j = i + 3; j <= i + 7; j += 1) {\n                if (j >= password.length) {\n                    break;\n                }\n                const token = password.slice(i, +j + 1 || 9e9);\n                if (maybeDateNoSeparator.exec(token)) {\n                    const candidates = [];\n                    const index = token.length;\n                    const splittedDates = DATE_SPLITS[index];\n                    splittedDates.forEach(([k, l]) => {\n                        const dmy = this.mapIntegersToDayMonthYear([\n                            parseInt(token.slice(0, k), 10),\n                            parseInt(token.slice(k, l), 10),\n                            parseInt(token.slice(l), 10),\n                        ]);\n                        if (dmy != null) {\n                            candidates.push(dmy);\n                        }\n                    });\n                    if (candidates.length > 0) {\n                        /*\n                         * at this point: different possible dmy mappings for the same i,j substring.\n                         * match the candidate date that likely takes the fewest guesses: a year closest\n                         * to 2000.\n                         * (scoring.REFERENCE_YEAR).\n                         *\n                         * ie, considering '111504', prefer 11-15-04 to 1-1-1504\n                         * (interpreting '04' as 2004)\n                         */\n                        let bestCandidate = candidates[0];\n                        let minDistance = metric(candidates[0]);\n                        candidates.slice(1).forEach((candidate) => {\n                            const distance = metric(candidate);\n                            if (distance < minDistance) {\n                                bestCandidate = candidate;\n                                minDistance = distance;\n                            }\n                        });\n                        matches.push({\n                            pattern: 'date',\n                            token,\n                            i,\n                            j,\n                            separator: '',\n                            year: bestCandidate.year,\n                            month: bestCandidate.month,\n                            day: bestCandidate.day,\n                        });\n                    }\n                }\n            }\n        }\n        return matches;\n    }\n    /*\n     * matches now contains all valid date strings in a way that is tricky to capture\n     * with regexes only. while thorough, it will contain some unintuitive noise:\n     *\n     * '2015_06_04', in addition to matching 2015_06_04, will also contain\n     * 5(!) other date matches: 15_06_04, 5_06_04, ..., even 2015 (matched as 5/1/2020)\n     *\n     * to reduce noise, remove date matches that are strict substrings of others\n     */\n    filterNoise(matches) {\n        return matches.filter((match) => {\n            let isSubmatch = false;\n            const matchesLength = matches.length;\n            for (let o = 0; o < matchesLength; o += 1) {\n                const otherMatch = matches[o];\n                if (match !== otherMatch) {\n                    if (otherMatch.i <= match.i && otherMatch.j >= match.j) {\n                        isSubmatch = true;\n                        break;\n                    }\n                }\n            }\n            return !isSubmatch;\n        });\n    }\n    /*\n     * given a 3-tuple, discard if:\n     *   middle int is over 31 (for all dmy formats, years are never allowed in the middle)\n     *   middle int is zero\n     *   any int is over the max allowable year\n     *   any int is over two digits but under the min allowable year\n     *   2 integers are over 31, the max allowable day\n     *   2 integers are zero\n     *   all integers are over 12, the max allowable month\n     */\n    // eslint-disable-next-line complexity, max-statements\n    mapIntegersToDayMonthYear(integers) {\n        if (integers[1] > 31 || integers[1] <= 0) {\n            return null;\n        }\n        let over12 = 0;\n        let over31 = 0;\n        let under1 = 0;\n        for (let o = 0, len1 = integers.length; o < len1; o += 1) {\n            const int = integers[o];\n            if ((int > 99 && int < DATE_MIN_YEAR) || int > DATE_MAX_YEAR) {\n                return null;\n            }\n            if (int > 31) {\n                over31 += 1;\n            }\n            if (int > 12) {\n                over12 += 1;\n            }\n            if (int <= 0) {\n                under1 += 1;\n            }\n        }\n        if (over31 >= 2 || over12 === 3 || under1 >= 2) {\n            return null;\n        }\n        return this.getDayMonth(integers);\n    }\n    // eslint-disable-next-line max-statements\n    getDayMonth(integers) {\n        // first look for a four digit year: yyyy + daymonth or daymonth + yyyy\n        const possibleYearSplits = [\n            [integers[2], integers.slice(0, 2)],\n            [integers[0], integers.slice(1, 3)], // year first\n        ];\n        const possibleYearSplitsLength = possibleYearSplits.length;\n        for (let j = 0; j < possibleYearSplitsLength; j += 1) {\n            const [y, rest] = possibleYearSplits[j];\n            if (DATE_MIN_YEAR <= y && y <= DATE_MAX_YEAR) {\n                const dm = this.mapIntegersToDayMonth(rest);\n                if (dm != null) {\n                    return {\n                        year: y,\n                        month: dm.month,\n                        day: dm.day,\n                    };\n                }\n                /*\n                 * for a candidate that includes a four-digit year,\n                 * when the remaining integers don't match to a day and month,\n                 * it is not a date.\n                 */\n                return null;\n            }\n        }\n        // given no four-digit year, two digit years are the most flexible int to match, so\n        // try to parse a day-month out of integers[0..1] or integers[1..0]\n        for (let k = 0; k < possibleYearSplitsLength; k += 1) {\n            const [y, rest] = possibleYearSplits[k];\n            const dm = this.mapIntegersToDayMonth(rest);\n            if (dm != null) {\n                return {\n                    year: this.twoToFourDigitYear(y),\n                    month: dm.month,\n                    day: dm.day,\n                };\n            }\n        }\n        return null;\n    }\n    mapIntegersToDayMonth(integers) {\n        const temp = [integers, integers.slice().reverse()];\n        for (let i = 0; i < temp.length; i += 1) {\n            const data = temp[i];\n            const day = data[0];\n            const month = data[1];\n            if (day >= 1 && day <= 31 && month >= 1 && month <= 12) {\n                return {\n                    day,\n                    month,\n                };\n            }\n        }\n        return null;\n    }\n    twoToFourDigitYear(year) {\n        if (year > 99) {\n            return year;\n        }\n        if (year > 50) {\n            // 87 -> 1987\n            return year + 1900;\n        }\n        // 15 -> 2015\n        return year + 2000;\n    }\n}\nexport default MatchDate;\n//# sourceMappingURL=matching.js.map","const peq = new Uint32Array(0x10000);\nconst myers_32 = (a, b) => {\n    const n = a.length;\n    const m = b.length;\n    const lst = 1 << (n - 1);\n    let pv = -1;\n    let mv = 0;\n    let sc = n;\n    let i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] |= 1 << i;\n    }\n    for (i = 0; i < m; i++) {\n        let eq = peq[b.charCodeAt(i)];\n        const xv = eq | mv;\n        eq |= ((eq & pv) + pv) ^ pv;\n        mv |= ~(eq | pv);\n        pv &= eq;\n        if (mv & lst) {\n            sc++;\n        }\n        if (pv & lst) {\n            sc--;\n        }\n        mv = (mv << 1) | 1;\n        pv = (pv << 1) | ~(xv | mv);\n        mv &= xv;\n    }\n    i = n;\n    while (i--) {\n        peq[a.charCodeAt(i)] = 0;\n    }\n    return sc;\n};\nconst myers_x = (b, a) => {\n    const n = a.length;\n    const m = b.length;\n    const mhc = [];\n    const phc = [];\n    const hsize = Math.ceil(n / 32);\n    const vsize = Math.ceil(m / 32);\n    for (let i = 0; i < hsize; i++) {\n        phc[i] = -1;\n        mhc[i] = 0;\n    }\n    let j = 0;\n    for (; j < vsize - 1; j++) {\n        let mv = 0;\n        let pv = -1;\n        const start = j * 32;\n        const vlen = Math.min(32, m) + start;\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] |= 1 << k;\n        }\n        for (let i = 0; i < n; i++) {\n            const eq = peq[a.charCodeAt(i)];\n            const pb = (phc[(i / 32) | 0] >>> i) & 1;\n            const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n            const xv = eq | mv;\n            const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n            let ph = mv | ~(xh | pv);\n            let mh = pv & xh;\n            if ((ph >>> 31) ^ pb) {\n                phc[(i / 32) | 0] ^= 1 << i;\n            }\n            if ((mh >>> 31) ^ mb) {\n                mhc[(i / 32) | 0] ^= 1 << i;\n            }\n            ph = (ph << 1) | pb;\n            mh = (mh << 1) | mb;\n            pv = mh | ~(xv | ph);\n            mv = ph & xv;\n        }\n        for (let k = start; k < vlen; k++) {\n            peq[b.charCodeAt(k)] = 0;\n        }\n    }\n    let mv = 0;\n    let pv = -1;\n    const start = j * 32;\n    const vlen = Math.min(32, m - start) + start;\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] |= 1 << k;\n    }\n    let score = m;\n    for (let i = 0; i < n; i++) {\n        const eq = peq[a.charCodeAt(i)];\n        const pb = (phc[(i / 32) | 0] >>> i) & 1;\n        const mb = (mhc[(i / 32) | 0] >>> i) & 1;\n        const xv = eq | mv;\n        const xh = ((((eq | mb) & pv) + pv) ^ pv) | eq | mb;\n        let ph = mv | ~(xh | pv);\n        let mh = pv & xh;\n        score += (ph >>> (m - 1)) & 1;\n        score -= (mh >>> (m - 1)) & 1;\n        if ((ph >>> 31) ^ pb) {\n            phc[(i / 32) | 0] ^= 1 << i;\n        }\n        if ((mh >>> 31) ^ mb) {\n            mhc[(i / 32) | 0] ^= 1 << i;\n        }\n        ph = (ph << 1) | pb;\n        mh = (mh << 1) | mb;\n        pv = mh | ~(xv | ph);\n        mv = ph & xv;\n    }\n    for (let k = start; k < vlen; k++) {\n        peq[b.charCodeAt(k)] = 0;\n    }\n    return score;\n};\nconst distance = (a, b) => {\n    if (a.length < b.length) {\n        const tmp = b;\n        b = a;\n        a = tmp;\n    }\n    if (b.length === 0) {\n        return a.length;\n    }\n    if (a.length <= 32) {\n        return myers_32(a, b);\n    }\n    return myers_x(a, b);\n};\nconst closest = (str, arr) => {\n    let min_distance = Infinity;\n    let min_index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const dist = distance(str, arr[i]);\n        if (dist < min_distance) {\n            min_distance = dist;\n            min_index = i;\n        }\n    }\n    return arr[min_index];\n};\nexport { closest, distance };\n","import { distance } from 'fastest-levenshtein';\nconst getUsedThreshold = (password, entry, threshold) => {\n    const isPasswordToShort = password.length <= entry.length;\n    const isThresholdLongerThanPassword = password.length <= threshold;\n    const shouldUsePasswordLength = isPasswordToShort || isThresholdLongerThanPassword;\n    // if password is too small use the password length divided by 4 while the threshold needs to be at least 1\n    return shouldUsePasswordLength ? Math.ceil(password.length / 4) : threshold;\n};\nconst findLevenshteinDistance = (password, rankedDictionary, threshold) => {\n    let foundDistance = 0;\n    const found = Object.keys(rankedDictionary).find((entry) => {\n        const usedThreshold = getUsedThreshold(password, entry, threshold);\n        if (Math.abs(password.length - entry.length) > usedThreshold) {\n            return false;\n        }\n        const foundEntryDistance = distance(password, entry);\n        const isInThreshold = foundEntryDistance <= usedThreshold;\n        if (isInThreshold) {\n            foundDistance = foundEntryDistance;\n        }\n        return isInThreshold;\n    });\n    if (found) {\n        return {\n            levenshteinDistance: foundDistance,\n            levenshteinDistanceEntry: found,\n        };\n    }\n    return {};\n};\nexport default findLevenshteinDistance;\n//# sourceMappingURL=levenshtein.js.map","export default {\n    a: ['4', '@'],\n    b: ['8'],\n    c: ['(', '{', '[', '<'],\n    d: ['6', '|)'],\n    e: ['3'],\n    f: ['#'],\n    g: ['6', '9', '&'],\n    h: ['#', '|-|'],\n    i: ['1', '!', '|'],\n    k: ['<', '|<'],\n    l: ['!', '1', '|', '7'],\n    m: ['^^', 'nn', '2n', '/\\\\\\\\/\\\\\\\\'],\n    n: ['//'],\n    o: ['0', '()'],\n    q: ['9'],\n    u: ['|_|'],\n    s: ['$', '5'],\n    t: ['+', '7'],\n    v: ['<', '>', '/'],\n    w: ['^/', 'uu', 'vv', '2u', '2v', '\\\\\\\\/\\\\\\\\/'],\n    x: ['%', '><'],\n    z: ['2'],\n};\n//# sourceMappingURL=l33tTable.js.map","export default {\n    warnings: {\n        straightRow: 'straightRow',\n        keyPattern: 'keyPattern',\n        simpleRepeat: 'simpleRepeat',\n        extendedRepeat: 'extendedRepeat',\n        sequences: 'sequences',\n        recentYears: 'recentYears',\n        dates: 'dates',\n        topTen: 'topTen',\n        topHundred: 'topHundred',\n        common: 'common',\n        similarToCommon: 'similarToCommon',\n        wordByItself: 'wordByItself',\n        namesByThemselves: 'namesByThemselves',\n        commonNames: 'commonNames',\n        userInputs: 'userInputs',\n        pwned: 'pwned',\n    },\n    suggestions: {\n        l33t: 'l33t',\n        reverseWords: 'reverseWords',\n        allUppercase: 'allUppercase',\n        capitalization: 'capitalization',\n        dates: 'dates',\n        recentYears: 'recentYears',\n        associatedYears: 'associatedYears',\n        sequences: 'sequences',\n        repeated: 'repeated',\n        longerKeyboardPattern: 'longerKeyboardPattern',\n        anotherWord: 'anotherWord',\n        useWords: 'useWords',\n        noNeed: 'noNeed',\n        pwned: 'pwned',\n    },\n    timeEstimation: {\n        ltSecond: 'ltSecond',\n        second: 'second',\n        seconds: 'seconds',\n        minute: 'minute',\n        minutes: 'minutes',\n        hour: 'hour',\n        hours: 'hours',\n        day: 'day',\n        days: 'days',\n        month: 'month',\n        months: 'months',\n        year: 'year',\n        years: 'years',\n        centuries: 'centuries',\n    },\n};\n//# sourceMappingURL=translationKeys.js.map","export default class TrieNode {\n    constructor(parents = []) {\n        this.parents = parents;\n        // eslint-disable-next-line no-use-before-define\n        this.children = new Map();\n    }\n    addSub(key, ...subs) {\n        const firstChar = key.charAt(0);\n        if (!this.children.has(firstChar)) {\n            this.children.set(firstChar, new TrieNode([...this.parents, firstChar]));\n        }\n        let cur = this.children.get(firstChar);\n        for (let i = 1; i < key.length; i += 1) {\n            const c = key.charAt(i);\n            if (!cur.hasChild(c)) {\n                cur.addChild(c);\n            }\n            cur = cur.getChild(c);\n        }\n        cur.subs = (cur.subs || []).concat(subs);\n        return this;\n    }\n    getChild(child) {\n        return this.children.get(child);\n    }\n    isTerminal() {\n        return !!this.subs;\n    }\n    addChild(child) {\n        if (!this.hasChild(child)) {\n            this.children.set(child, new TrieNode([...this.parents, child]));\n        }\n    }\n    hasChild(child) {\n        return this.children.has(child);\n    }\n}\n//# sourceMappingURL=TrieNode.js.map","export default (l33tTable, triNode) => {\n    Object.entries(l33tTable).forEach(([letter, substitutions]) => {\n        substitutions.forEach((substitution) => {\n            triNode.addSub(substitution, letter);\n        });\n    });\n    return triNode;\n};\n//# sourceMappingURL=l33tTableToTrieNode.js.map","import { buildRankedDictionary } from './helper';\nimport l33tTable from './data/l33tTable';\nimport translationKeys from './data/translationKeys';\nimport TrieNode from './matcher/dictionary/variants/matching/unmunger/TrieNode';\nimport l33tTableToTrieNode from './matcher/dictionary/variants/matching/unmunger/l33tTableToTrieNode';\nexport class Options {\n    constructor() {\n        this.matchers = {};\n        this.l33tTable = l33tTable;\n        this.trieNodeRoot = l33tTableToTrieNode(l33tTable, new TrieNode());\n        this.dictionary = {\n            userInputs: [],\n        };\n        this.rankedDictionaries = {};\n        this.rankedDictionariesMaxWordSize = {};\n        this.translations = translationKeys;\n        this.graphs = {};\n        this.useLevenshteinDistance = false;\n        this.levenshteinThreshold = 2;\n        this.l33tMaxSubstitutions = 100;\n        this.maxLength = 256;\n        this.setRankedDictionaries();\n    }\n    // eslint-disable-next-line max-statements,complexity\n    setOptions(options = {}) {\n        if (options.l33tTable) {\n            this.l33tTable = options.l33tTable;\n            this.trieNodeRoot = l33tTableToTrieNode(options.l33tTable, new TrieNode());\n        }\n        if (options.dictionary) {\n            this.dictionary = options.dictionary;\n            this.setRankedDictionaries();\n        }\n        if (options.translations) {\n            this.setTranslations(options.translations);\n        }\n        if (options.graphs) {\n            this.graphs = options.graphs;\n        }\n        if (options.useLevenshteinDistance !== undefined) {\n            this.useLevenshteinDistance = options.useLevenshteinDistance;\n        }\n        if (options.levenshteinThreshold !== undefined) {\n            this.levenshteinThreshold = options.levenshteinThreshold;\n        }\n        if (options.l33tMaxSubstitutions !== undefined) {\n            this.l33tMaxSubstitutions = options.l33tMaxSubstitutions;\n        }\n        if (options.maxLength !== undefined) {\n            this.maxLength = options.maxLength;\n        }\n    }\n    setTranslations(translations) {\n        if (this.checkCustomTranslations(translations)) {\n            this.translations = translations;\n        }\n        else {\n            throw new Error('Invalid translations object fallback to keys');\n        }\n    }\n    checkCustomTranslations(translations) {\n        let valid = true;\n        Object.keys(translationKeys).forEach((type) => {\n            if (type in translations) {\n                const translationType = type;\n                Object.keys(translationKeys[translationType]).forEach((key) => {\n                    if (!(key in translations[translationType])) {\n                        valid = false;\n                    }\n                });\n            }\n            else {\n                valid = false;\n            }\n        });\n        return valid;\n    }\n    setRankedDictionaries() {\n        const rankedDictionaries = {};\n        const rankedDictionariesMaxWorkSize = {};\n        Object.keys(this.dictionary).forEach((name) => {\n            rankedDictionaries[name] = buildRankedDictionary(this.dictionary[name]);\n            rankedDictionariesMaxWorkSize[name] =\n                this.getRankedDictionariesMaxWordSize(this.dictionary[name]);\n        });\n        this.rankedDictionaries = rankedDictionaries;\n        this.rankedDictionariesMaxWordSize = rankedDictionariesMaxWorkSize;\n    }\n    getRankedDictionariesMaxWordSize(list) {\n        const data = list.map((el) => {\n            if (typeof el !== 'string') {\n                return el.toString().length;\n            }\n            return el.length;\n        });\n        // do not use Math.max(...data) because it can result in max stack size error because every entry will be used as an argument\n        if (data.length === 0) {\n            return 0;\n        }\n        return data.reduce((a, b) => Math.max(a, b), -Infinity);\n    }\n    buildSanitizedRankedDictionary(list) {\n        const sanitizedInputs = [];\n        list.forEach((input) => {\n            const inputType = typeof input;\n            if (inputType === 'string' ||\n                inputType === 'number' ||\n                inputType === 'boolean') {\n                sanitizedInputs.push(input.toString().toLowerCase());\n            }\n        });\n        return buildRankedDictionary(sanitizedInputs);\n    }\n    extendUserInputsDictionary(dictionary) {\n        if (!this.dictionary.userInputs) {\n            this.dictionary.userInputs = [];\n        }\n        const newList = [...this.dictionary.userInputs, ...dictionary];\n        this.rankedDictionaries.userInputs =\n            this.buildSanitizedRankedDictionary(newList);\n        this.rankedDictionariesMaxWordSize.userInputs =\n            this.getRankedDictionariesMaxWordSize(newList);\n    }\n    addMatcher(name, matcher) {\n        if (this.matchers[name]) {\n            console.info(`Matcher ${name} already exists`);\n        }\n        else {\n            this.matchers[name] = matcher;\n        }\n    }\n}\nexport const zxcvbnOptions = new Options();\n//# sourceMappingURL=Options.js.map","/*\n * -------------------------------------------------------------------------------\n *  Dictionary reverse matching --------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchReverse {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    match({ password }) {\n        const passwordReversed = password.split('').reverse().join('');\n        return this.defaultMatch({\n            password: passwordReversed,\n        }).map((match) => ({\n            ...match,\n            token: match.token.split('').reverse().join(''),\n            reversed: true,\n            // map coordinates back to original string\n            i: password.length - 1 - match.j,\n            j: password.length - 1 - match.i,\n        }));\n    }\n}\nexport default MatchReverse;\n//# sourceMappingURL=reverse.js.map","class CleanPasswords {\n    constructor({ substr, limit, trieRoot }) {\n        this.buffer = [];\n        this.finalPasswords = [];\n        this.substr = substr;\n        this.limit = limit;\n        this.trieRoot = trieRoot;\n    }\n    getAllPossibleSubsAtIndex(index) {\n        const nodes = [];\n        let cur = this.trieRoot;\n        for (let i = index; i < this.substr.length; i += 1) {\n            const character = this.substr.charAt(i);\n            cur = cur.getChild(character);\n            if (!cur) {\n                break;\n            }\n            nodes.push(cur);\n        }\n        return nodes;\n    }\n    // eslint-disable-next-line complexity,max-statements\n    helper({ onlyFullSub, isFullSub, index, subIndex, changes, lastSubLetter, consecutiveSubCount, }) {\n        if (this.finalPasswords.length >= this.limit) {\n            return;\n        }\n        if (index === this.substr.length) {\n            if (onlyFullSub === isFullSub) {\n                this.finalPasswords.push({ password: this.buffer.join(''), changes });\n            }\n            return;\n        }\n        // first, exhaust all possible substitutions at this index\n        const nodes = [...this.getAllPossibleSubsAtIndex(index)];\n        let hasSubs = false;\n        // iterate backward to get wider substitutions first\n        for (let i = index + nodes.length - 1; i >= index; i -= 1) {\n            const cur = nodes[i - index];\n            if (cur.isTerminal()) {\n                // Skip if this would be a 4th or more consecutive substitution of the same letter\n                // this should work in all language as there shouldn't be the same letter more than four times in a row\n                // So we can ignore the rest to save calculation time\n                if (lastSubLetter === cur.parents.join('') &&\n                    consecutiveSubCount >= 3) {\n                    // eslint-disable-next-line no-continue\n                    continue;\n                }\n                hasSubs = true;\n                const subs = cur.subs;\n                // eslint-disable-next-line no-restricted-syntax\n                for (const sub of subs) {\n                    this.buffer.push(sub);\n                    const newSubs = changes.concat({\n                        i: subIndex,\n                        letter: sub,\n                        substitution: cur.parents.join(''),\n                    });\n                    // recursively build the rest of the string\n                    this.helper({\n                        onlyFullSub,\n                        isFullSub,\n                        index: i + 1,\n                        subIndex: subIndex + sub.length,\n                        changes: newSubs,\n                        lastSubLetter: cur.parents.join(''),\n                        consecutiveSubCount: lastSubLetter === cur.parents.join('')\n                            ? consecutiveSubCount + 1\n                            : 1,\n                    });\n                    // backtrack by ignoring the added postfix\n                    this.buffer.pop();\n                    if (this.finalPasswords.length >= this.limit) {\n                        return;\n                    }\n                }\n            }\n        }\n        // next, generate all combos without doing a substitution at this index\n        // if a partial substitution is requested or there are no substitutions at this index\n        if (!onlyFullSub || !hasSubs) {\n            const firstChar = this.substr.charAt(index);\n            this.buffer.push(firstChar);\n            this.helper({\n                onlyFullSub,\n                isFullSub: isFullSub && !hasSubs,\n                index: index + 1,\n                subIndex: subIndex + 1,\n                changes,\n                lastSubLetter,\n                consecutiveSubCount,\n            });\n            this.buffer.pop();\n        }\n    }\n    getAll() {\n        // only full substitution\n        this.helper({\n            onlyFullSub: true,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        // only partial substitution\n        this.helper({\n            onlyFullSub: false,\n            isFullSub: true,\n            index: 0,\n            subIndex: 0,\n            changes: [],\n            lastSubLetter: undefined,\n            consecutiveSubCount: 0,\n        });\n        return this.finalPasswords;\n    }\n}\nconst getCleanPasswords = (password, limit, trieRoot) => {\n    const helper = new CleanPasswords({\n        substr: password,\n        limit,\n        trieRoot,\n    });\n    return helper.getAll();\n};\nexport default getCleanPasswords;\n//# sourceMappingURL=getCleanPasswords.js.map","import { zxcvbnOptions } from '../../../../Options';\nimport getCleanPasswords from './unmunger/getCleanPasswords';\nconst getExtras = (passwordWithSubs, i, j) => {\n    const previousChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i < i;\n    });\n    const iUnsubbed = previousChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, i);\n    const usedChanges = passwordWithSubs.changes.filter((changes) => {\n        return changes.i >= i && changes.i <= j;\n    });\n    const jUnsubbed = usedChanges.reduce((value, change) => {\n        return value - change.letter.length + change.substitution.length;\n    }, j - i + iUnsubbed);\n    const filtered = [];\n    const subDisplay = [];\n    usedChanges.forEach((value) => {\n        const existingIndex = filtered.findIndex((t) => {\n            return t.letter === value.letter && t.substitution === value.substitution;\n        });\n        if (existingIndex < 0) {\n            filtered.push({\n                letter: value.letter,\n                substitution: value.substitution,\n            });\n            subDisplay.push(`${value.substitution} -> ${value.letter}`);\n        }\n    });\n    return {\n        i: iUnsubbed,\n        j: jUnsubbed,\n        subs: filtered,\n        subDisplay: subDisplay.join(', '),\n    };\n};\n/*\n * -------------------------------------------------------------------------------\n *  Dictionary l33t matching -----------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchL33t {\n    constructor(defaultMatch) {\n        this.defaultMatch = defaultMatch;\n    }\n    isAlreadyIncluded(matches, newMatch) {\n        return matches.some((l33tMatch) => {\n            return Object.entries(l33tMatch).every(([key, value]) => {\n                return key === 'subs' || value === newMatch[key];\n            });\n        });\n    }\n    match({ password }) {\n        const matches = [];\n        const subbedPasswords = getCleanPasswords(password, zxcvbnOptions.l33tMaxSubstitutions, zxcvbnOptions.trieNodeRoot);\n        let hasFullMatch = false;\n        let isFullSubstitution = true;\n        subbedPasswords.forEach((subbedPassword) => {\n            if (hasFullMatch) {\n                return;\n            }\n            const matchedDictionary = this.defaultMatch({\n                password: subbedPassword.password,\n                useLevenshtein: isFullSubstitution,\n            });\n            // only the first entry has a full substitution\n            isFullSubstitution = false;\n            matchedDictionary.forEach((match) => {\n                if (!hasFullMatch) {\n                    hasFullMatch = match.i === 0 && match.j === password.length - 1;\n                }\n                const extras = getExtras(subbedPassword, match.i, match.j);\n                const token = password.slice(extras.i, +extras.j + 1 || 9e9);\n                const newMatch = {\n                    ...match,\n                    l33t: true,\n                    token,\n                    ...extras,\n                };\n                const alreadyIncluded = this.isAlreadyIncluded(matches, newMatch);\n                // only return the matches that contain an actual substitution\n                if (token.toLowerCase() !== match.matchedWord && !alreadyIncluded) {\n                    matches.push(newMatch);\n                }\n            });\n        });\n        // filter single-character l33t matches to reduce noise.\n        // otherwise '1' matches 'i', '4' matches 'a', both very common English words\n        // with low dictionary rank.\n        return matches.filter((match) => match.token.length > 1);\n    }\n}\nexport default MatchL33t;\n//# sourceMappingURL=l33t.js.map","import findLevenshteinDistance from '../../levenshtein';\nimport { sorted } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\nimport Reverse from './variants/matching/reverse';\nimport L33t from './variants/matching/l33t';\nclass MatchDictionary {\n    constructor() {\n        this.l33t = new L33t(this.defaultMatch);\n        this.reverse = new Reverse(this.defaultMatch);\n    }\n    match({ password }) {\n        const matches = [\n            ...this.defaultMatch({\n                password,\n            }),\n            ...this.reverse.match({ password }),\n            ...this.l33t.match({ password }),\n        ];\n        return sorted(matches);\n    }\n    defaultMatch({ password, useLevenshtein = true }) {\n        const matches = [];\n        const passwordLength = password.length;\n        const passwordLower = password.toLowerCase();\n        // eslint-disable-next-line complexity,max-statements\n        Object.keys(zxcvbnOptions.rankedDictionaries).forEach((dictionaryName) => {\n            const rankedDict = zxcvbnOptions.rankedDictionaries[dictionaryName];\n            const longestDictionaryWordSize = zxcvbnOptions.rankedDictionariesMaxWordSize[dictionaryName];\n            const searchWidth = Math.min(longestDictionaryWordSize, passwordLength);\n            for (let i = 0; i < passwordLength; i += 1) {\n                const searchEnd = Math.min(i + searchWidth, passwordLength);\n                for (let j = i; j < searchEnd; j += 1) {\n                    const usedPassword = passwordLower.slice(i, +j + 1 || 9e9);\n                    const isInDictionary = usedPassword in rankedDict;\n                    let foundLevenshteinDistance = {};\n                    // only use levenshtein distance on full password to minimize the performance drop\n                    // and because otherwise there would be to many false positives\n                    const isFullPassword = i === 0 && j === passwordLength - 1;\n                    if (zxcvbnOptions.useLevenshteinDistance &&\n                        isFullPassword &&\n                        !isInDictionary &&\n                        useLevenshtein) {\n                        foundLevenshteinDistance = findLevenshteinDistance(usedPassword, rankedDict, zxcvbnOptions.levenshteinThreshold);\n                    }\n                    const isLevenshteinMatch = Object.keys(foundLevenshteinDistance).length !== 0;\n                    if (isInDictionary || isLevenshteinMatch) {\n                        const usedRankPassword = isLevenshteinMatch\n                            ? foundLevenshteinDistance.levenshteinDistanceEntry\n                            : usedPassword;\n                        const rank = rankedDict[usedRankPassword];\n                        matches.push({\n                            pattern: 'dictionary',\n                            i,\n                            j,\n                            token: password.slice(i, +j + 1 || 9e9),\n                            matchedWord: usedPassword,\n                            rank,\n                            dictionaryName: dictionaryName,\n                            reversed: false,\n                            l33t: false,\n                            ...foundLevenshteinDistance,\n                        });\n                    }\n                }\n            }\n        });\n        return matches;\n    }\n}\nexport default MatchDictionary;\n//# sourceMappingURL=matching.js.map","import { REGEXEN } from '../../data/const';\nimport { sorted } from '../../helper';\n/*\n * -------------------------------------------------------------------------------\n *  regex matching ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass MatchRegex {\n    match({ password, regexes = REGEXEN }) {\n        const matches = [];\n        Object.keys(regexes).forEach((name) => {\n            const regex = regexes[name];\n            regex.lastIndex = 0; // keeps regexMatch stateless\n            let regexMatch;\n            // eslint-disable-next-line no-cond-assign\n            while ((regexMatch = regex.exec(password))) {\n                if (regexMatch) {\n                    const token = regexMatch[0];\n                    matches.push({\n                        pattern: 'regex',\n                        token,\n                        i: regexMatch.index,\n                        j: regexMatch.index + regexMatch[0].length - 1,\n                        regexName: name,\n                        regexMatch,\n                    });\n                }\n            }\n        });\n        return sorted(matches);\n    }\n}\nexport default MatchRegex;\n//# sourceMappingURL=matching.js.map","export default {\n    // binomial coefficients\n    // src: http://blog.plover.com/math/choose.html\n    nCk(n, k) {\n        let count = n;\n        if (k > count) {\n            return 0;\n        }\n        if (k === 0) {\n            return 1;\n        }\n        let coEff = 1;\n        for (let i = 1; i <= k; i += 1) {\n            coEff *= count;\n            coEff /= i;\n            count -= 1;\n        }\n        return coEff;\n    },\n    log10(n) {\n        if (n === 0)\n            return 0;\n        return Math.log(n) / Math.log(10); // IE doesn't support Math.log10 :(\n    },\n    log2(n) {\n        return Math.log(n) / Math.log(2);\n    },\n    factorial(num) {\n        let rval = 1;\n        for (let i = 2; i <= num; i += 1)\n            rval *= i;\n        return rval;\n    },\n};\n//# sourceMappingURL=utils.js.map","import utils from '../../../../scoring/utils';\nimport { START_UPPER, END_UPPER, ALL_UPPER_INVERTED, ALL_LOWER_INVERTED, ONE_LOWER, ONE_UPPER, ALPHA_INVERTED, } from '../../../../data/const';\nconst getVariations = (cleanedWord) => {\n    const wordArray = cleanedWord.split('');\n    const upperCaseCount = wordArray.filter((char) => char.match(ONE_UPPER)).length;\n    const lowerCaseCount = wordArray.filter((char) => char.match(ONE_LOWER)).length;\n    let variations = 0;\n    const variationLength = Math.min(upperCaseCount, lowerCaseCount);\n    for (let i = 1; i <= variationLength; i += 1) {\n        variations += utils.nCk(upperCaseCount + lowerCaseCount, i);\n    }\n    return variations;\n};\nexport default (word) => {\n    // clean words of non alpha characters to remove the reward effekt to capitalize the first letter https://github.com/dropbox/zxcvbn/issues/232\n    const cleanedWord = word.replace(ALPHA_INVERTED, '');\n    if (cleanedWord.match(ALL_LOWER_INVERTED) ||\n        cleanedWord.toLowerCase() === cleanedWord) {\n        return 1;\n    }\n    // a capitalized word is the most common capitalization scheme,\n    // so it only doubles the search space (uncapitalized + capitalized).\n    // all caps and end-capitalized are common enough too, underestimate as 2x factor to be safe.\n    const commonCases = [START_UPPER, END_UPPER, ALL_UPPER_INVERTED];\n    const commonCasesLength = commonCases.length;\n    for (let i = 0; i < commonCasesLength; i += 1) {\n        const regex = commonCases[i];\n        if (cleanedWord.match(regex)) {\n            return 2;\n        }\n    }\n    // otherwise calculate the number of ways to capitalize U+L uppercase+lowercase letters\n    // with U uppercase letters or less. or, if there's more uppercase than lower (for eg. PASSwORD),\n    // the number of ways to lowercase U+L letters with L lowercase letters or less.\n    return getVariations(cleanedWord);\n};\n//# sourceMappingURL=uppercase.js.map","import utils from '../../../../scoring/utils';\nconst countSubstring = (string, substring) => {\n    let count = 0;\n    let pos = string.indexOf(substring);\n    while (pos >= 0) {\n        count += 1;\n        pos = string.indexOf(substring, pos + substring.length);\n    }\n    return count;\n};\nconst getCounts = ({ sub, token }) => {\n    // lower-case match.token before calculating: capitalization shouldn't affect l33t calc.\n    const tokenLower = token.toLowerCase();\n    // num of subbed chars\n    const subbedCount = countSubstring(tokenLower, sub.substitution);\n    // num of unsubbed chars\n    const unsubbedCount = countSubstring(tokenLower, sub.letter);\n    return {\n        subbedCount,\n        unsubbedCount,\n    };\n};\nexport default ({ l33t, subs, token }) => {\n    if (!l33t) {\n        return 1;\n    }\n    let variations = 1;\n    subs.forEach((sub) => {\n        const { subbedCount, unsubbedCount } = getCounts({ sub, token });\n        if (subbedCount === 0 || unsubbedCount === 0) {\n            // for this sub, password is either fully subbed (444) or fully unsubbed (aaa)\n            // treat that as doubling the space (attacker needs to try fully subbed chars in addition to\n            // unsubbed.)\n            variations *= 2;\n        }\n        else {\n            // this case is similar to capitalization:\n            // with aa44a, U = 3, S = 2, attacker needs to try unsubbed + one sub + two subs\n            const p = Math.min(unsubbedCount, subbedCount);\n            let possibilities = 0;\n            for (let i = 1; i <= p; i += 1) {\n                possibilities += utils.nCk(unsubbedCount + subbedCount, i);\n            }\n            variations *= possibilities;\n        }\n    });\n    return variations;\n};\n//# sourceMappingURL=l33t.js.map","import utils from '../../scoring/utils';\nimport { zxcvbnOptions } from '../../Options';\nconst calcAverageDegree = (graph) => {\n    let average = 0;\n    Object.keys(graph).forEach((key) => {\n        const neighbors = graph[key];\n        average += neighbors.filter((entry) => !!entry).length;\n    });\n    average /= Object.entries(graph).length;\n    return average;\n};\nconst estimatePossiblePatterns = ({ token, graph, turns, }) => {\n    const startingPosition = Object.keys(zxcvbnOptions.graphs[graph]).length;\n    const averageDegree = calcAverageDegree(zxcvbnOptions.graphs[graph]);\n    let guesses = 0;\n    const tokenLength = token.length;\n    // # estimate the number of possible patterns w/ tokenLength or less with turns or less.\n    for (let i = 2; i <= tokenLength; i += 1) {\n        const possibleTurns = Math.min(turns, i - 1);\n        for (let j = 1; j <= possibleTurns; j += 1) {\n            guesses += utils.nCk(i - 1, j - 1) * startingPosition * averageDegree ** j;\n        }\n    }\n    return guesses;\n};\nexport default ({ graph, token, shiftedCount, turns, }) => {\n    let guesses = estimatePossiblePatterns({ token, graph, turns });\n    // add extra guesses for shifted keys. (% instead of 5, A instead of a.)\n    // math is similar to extra guesses of l33t substitutions in dictionary matches.\n    if (shiftedCount) {\n        const unShiftedCount = token.length - shiftedCount;\n        if (shiftedCount === 0 || unShiftedCount === 0) {\n            guesses *= 2;\n        }\n        else {\n            let shiftedVariations = 0;\n            for (let i = 1; i <= Math.min(shiftedCount, unShiftedCount); i += 1) {\n                shiftedVariations += utils.nCk(shiftedCount + unShiftedCount, i);\n            }\n            guesses *= shiftedVariations;\n        }\n    }\n    return Math.round(guesses);\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../data/const';\nimport utils from './utils';\nimport { zxcvbnOptions } from '../Options';\nimport bruteforceMatcher from '../matcher/bruteforce/scoring';\nimport dateMatcher from '../matcher/date/scoring';\nimport dictionaryMatcher from '../matcher/dictionary/scoring';\nimport regexMatcher from '../matcher/regex/scoring';\nimport repeatMatcher from '../matcher/repeat/scoring';\nimport sequenceMatcher from '../matcher/sequence/scoring';\nimport spatialMatcher from '../matcher/spatial/scoring';\nimport separatorMatcher from '../matcher/separator/scoring';\nconst getMinGuesses = (match, password) => {\n    let minGuesses = 1;\n    if (match.token.length < password.length) {\n        if (match.token.length === 1) {\n            minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR;\n        }\n        else {\n            minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR;\n        }\n    }\n    return minGuesses;\n};\nconst matchers = {\n    bruteforce: bruteforceMatcher,\n    date: dateMatcher,\n    dictionary: dictionaryMatcher,\n    regex: regexMatcher,\n    repeat: repeatMatcher,\n    sequence: sequenceMatcher,\n    spatial: spatialMatcher,\n    separator: separatorMatcher,\n};\nconst getScoring = (name, match) => {\n    if (matchers[name]) {\n        return matchers[name](match);\n    }\n    if (zxcvbnOptions.matchers[name] &&\n        'scoring' in zxcvbnOptions.matchers[name]) {\n        return zxcvbnOptions.matchers[name].scoring(match);\n    }\n    return 0;\n};\n// ------------------------------------------------------------------------------\n// guess estimation -- one function per match pattern ---------------------------\n// ------------------------------------------------------------------------------\n// eslint-disable-next-line complexity, max-statements\nexport default (match, password) => {\n    const extraData = {};\n    // a match's guess estimate doesn't change. cache it.\n    if ('guesses' in match && match.guesses != null) {\n        return match;\n    }\n    const minGuesses = getMinGuesses(match, password);\n    const estimationResult = getScoring(match.pattern, match);\n    let guesses = 0;\n    if (typeof estimationResult === 'number') {\n        guesses = estimationResult;\n    }\n    else if (match.pattern === 'dictionary') {\n        guesses = estimationResult.calculation;\n        extraData.baseGuesses = estimationResult.baseGuesses;\n        extraData.uppercaseVariations = estimationResult.uppercaseVariations;\n        extraData.l33tVariations = estimationResult.l33tVariations;\n    }\n    const matchGuesses = Math.max(guesses, minGuesses);\n    return {\n        ...match,\n        ...extraData,\n        guesses: matchGuesses,\n        guessesLog10: utils.log10(matchGuesses),\n    };\n};\n//# sourceMappingURL=estimate.js.map","import { BRUTEFORCE_CARDINALITY, MIN_SUBMATCH_GUESSES_SINGLE_CHAR, MIN_SUBMATCH_GUESSES_MULTI_CHAR, } from '../../data/const';\nexport default ({ token }) => {\n    let guesses = BRUTEFORCE_CARDINALITY ** token.length;\n    if (guesses === Number.POSITIVE_INFINITY) {\n        guesses = Number.MAX_VALUE;\n    }\n    let minGuesses;\n    // small detail: make bruteforce matches at minimum one guess bigger than smallest allowed\n    // submatch guesses, such that non-bruteforce submatches over the same [i..j] take precedence.\n    if (token.length === 1) {\n        minGuesses = MIN_SUBMATCH_GUESSES_SINGLE_CHAR + 1;\n    }\n    else {\n        minGuesses = MIN_SUBMATCH_GUESSES_MULTI_CHAR + 1;\n    }\n    return Math.max(guesses, minGuesses);\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ year, separator }) => {\n    // base guesses: (year distance from REFERENCE_YEAR) * num_days * num_years\n    const yearSpace = Math.max(Math.abs(year - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    let guesses = yearSpace * 365;\n    // add factor of 4 for separator selection (one of ~4 choices)\n    if (separator) {\n        guesses *= 4;\n    }\n    return guesses;\n};\n//# sourceMappingURL=scoring.js.map","import uppercaseVariant from './variants/scoring/uppercase';\nimport l33tVariant from './variants/scoring/l33t';\nexport default ({ rank, reversed, l33t, subs, token, dictionaryName, }) => {\n    const baseGuesses = rank; // keep these as properties for display purposes\n    const uppercaseVariations = uppercaseVariant(token);\n    const l33tVariations = l33tVariant({ l33t, subs, token });\n    const reversedVariations = (reversed && 2) || 1;\n    let calculation;\n    if (dictionaryName === 'diceware') {\n        // diceware dictionaries are special, so we get a simple scoring of 1/2 of 6^5 (6 digits on 5 dice)\n        // to get fix entropy of ~12.9 bits for every entry https://en.wikipedia.org/wiki/Diceware#:~:text=The%20level%20of,bits\n        calculation = 6 ** 5 / 2;\n    }\n    else {\n        calculation =\n            baseGuesses * uppercaseVariations * l33tVariations * reversedVariations;\n    }\n    return {\n        baseGuesses,\n        uppercaseVariations,\n        l33tVariations,\n        calculation,\n    };\n};\n//# sourceMappingURL=scoring.js.map","import { MIN_YEAR_SPACE, REFERENCE_YEAR } from '../../data/const';\nexport default ({ regexName, regexMatch, token, }) => {\n    const charClassBases = {\n        alphaLower: 26,\n        alphaUpper: 26,\n        alpha: 52,\n        alphanumeric: 62,\n        digits: 10,\n        symbols: 33,\n    };\n    if (regexName in charClassBases) {\n        return (charClassBases[regexName] ** token.length);\n    }\n    // TODO add more regex types for example special dates like 09.11\n    // eslint-disable-next-line default-case\n    switch (regexName) {\n        case 'recentYear':\n            // conservative estimate of year space: num years from REFERENCE_YEAR.\n            // if year is close to REFERENCE_YEAR, estimate a year space of MIN_YEAR_SPACE.\n            return Math.max(Math.abs(parseInt(regexMatch[0], 10) - REFERENCE_YEAR), MIN_YEAR_SPACE);\n    }\n    return 0;\n};\n//# sourceMappingURL=scoring.js.map","export default ({ baseGuesses, repeatCount }) => baseGuesses * repeatCount;\n//# sourceMappingURL=scoring.js.map","export default ({ token, ascending }) => {\n    const firstChr = token.charAt(0);\n    let baseGuesses = 0;\n    const startingPoints = ['a', 'A', 'z', 'Z', '0', '1', '9'];\n    // lower guesses for obvious starting points\n    if (startingPoints.includes(firstChr)) {\n        baseGuesses = 4;\n    }\n    else if (firstChr.match(/\\d/)) {\n        baseGuesses = 10; // digits\n    }\n    else {\n        // could give a higher base for uppercase,\n        // assigning 26 to both upper and lower sequences is more conservative.\n        baseGuesses = 26;\n    }\n    // need to try a descending sequence in addition to every ascending sequence ->\n    // 2x guesses\n    if (!ascending) {\n        baseGuesses *= 2;\n    }\n    return baseGuesses * token.length;\n};\n//# sourceMappingURL=scoring.js.map","import { SEPERATOR_CHAR_COUNT } from '../../data/const';\nexport default () => {\n    return SEPERATOR_CHAR_COUNT;\n};\n//# sourceMappingURL=scoring.js.map","import utils from './utils';\nimport estimateGuesses from './estimate';\nimport { MIN_GUESSES_BEFORE_GROWING_SEQUENCE } from '../data/const';\nconst scoringHelper = {\n    password: '',\n    optimal: {},\n    excludeAdditive: false,\n    separatorRegex: undefined,\n    fillArray(size, valueType) {\n        const result = [];\n        for (let i = 0; i < size; i += 1) {\n            let value = [];\n            if (valueType === 'object') {\n                value = {};\n            }\n            result.push(value);\n        }\n        return result;\n    },\n    // helper: make bruteforce match objects spanning i to j, inclusive.\n    makeBruteforceMatch(i, j) {\n        return {\n            pattern: 'bruteforce',\n            token: this.password.slice(i, +j + 1 || 9e9),\n            i,\n            j,\n        };\n    },\n    // helper: considers whether a length-sequenceLength\n    // sequence ending at match m is better (fewer guesses)\n    // than previously encountered sequences, updating state if so.\n    update(match, sequenceLength) {\n        const k = match.j;\n        const estimatedMatch = estimateGuesses(match, this.password);\n        let pi = estimatedMatch.guesses;\n        if (sequenceLength > 1) {\n            // we're considering a length-sequenceLength sequence ending with match m:\n            // obtain the product term in the minimization function by multiplying m's guesses\n            // by the product of the length-(sequenceLength-1)\n            // sequence ending just before m, at m.i - 1.\n            pi *= this.optimal.pi[estimatedMatch.i - 1][sequenceLength - 1];\n        }\n        // calculate the minimization func\n        let g = utils.factorial(sequenceLength) * pi;\n        if (!this.excludeAdditive) {\n            g += MIN_GUESSES_BEFORE_GROWING_SEQUENCE ** (sequenceLength - 1);\n        }\n        // update state if new best.\n        // first see if any competing sequences covering this prefix,\n        // with sequenceLength or fewer matches,\n        // fare better than this sequence. if so, skip it and return.\n        let shouldSkip = false;\n        Object.keys(this.optimal.g[k]).forEach((competingPatternLength) => {\n            const competingMetricMatch = this.optimal.g[k][competingPatternLength];\n            if (parseInt(competingPatternLength, 10) <= sequenceLength) {\n                if (competingMetricMatch <= g) {\n                    shouldSkip = true;\n                }\n            }\n        });\n        if (!shouldSkip) {\n            // this sequence might be part of the final optimal sequence.\n            this.optimal.g[k][sequenceLength] = g;\n            this.optimal.m[k][sequenceLength] = estimatedMatch;\n            this.optimal.pi[k][sequenceLength] = pi;\n        }\n    },\n    // helper: evaluate bruteforce matches ending at passwordCharIndex.\n    bruteforceUpdate(passwordCharIndex) {\n        // see if a single bruteforce match spanning the passwordCharIndex-prefix is optimal.\n        let match = this.makeBruteforceMatch(0, passwordCharIndex);\n        this.update(match, 1);\n        for (let i = 1; i <= passwordCharIndex; i += 1) {\n            // generate passwordCharIndex bruteforce matches, spanning from (i=1, j=passwordCharIndex) up to (i=passwordCharIndex, j=passwordCharIndex).\n            // see if adding these new matches to any of the sequences in optimal[i-1]\n            // leads to new bests.\n            match = this.makeBruteforceMatch(i, passwordCharIndex);\n            const tmp = this.optimal.m[i - 1];\n            // eslint-disable-next-line no-loop-func\n            Object.keys(tmp).forEach((sequenceLength) => {\n                const lastMatch = tmp[sequenceLength];\n                // corner: an optimal sequence will never have two adjacent bruteforce matches.\n                // it is strictly better to have a single bruteforce match spanning the same region:\n                // same contribution to the guess product with a lower length.\n                // --> safe to skip those cases.\n                if (lastMatch.pattern !== 'bruteforce') {\n                    // try adding m to this length-sequenceLength sequence.\n                    this.update(match, parseInt(sequenceLength, 10) + 1);\n                }\n            });\n        }\n    },\n    // helper: step backwards through optimal.m starting at the end,\n    // constructing the final optimal match sequence.\n    unwind(passwordLength) {\n        const optimalMatchSequence = [];\n        let k = passwordLength - 1;\n        // find the final best sequence length and score\n        let sequenceLength = 0;\n        // eslint-disable-next-line no-loss-of-precision\n        let g = 2e308;\n        const temp = this.optimal.g[k];\n        // safety check for empty passwords\n        if (temp) {\n            Object.keys(temp).forEach((candidateSequenceLength) => {\n                const candidateMetricMatch = temp[candidateSequenceLength];\n                if (candidateMetricMatch < g) {\n                    sequenceLength = parseInt(candidateSequenceLength, 10);\n                    g = candidateMetricMatch;\n                }\n            });\n        }\n        while (k >= 0) {\n            const match = this.optimal.m[k][sequenceLength];\n            optimalMatchSequence.unshift(match);\n            k = match.i - 1;\n            sequenceLength -= 1;\n        }\n        return optimalMatchSequence;\n    },\n};\nexport default {\n    // ------------------------------------------------------------------------------\n    // search --- most guessable match sequence -------------------------------------\n    // ------------------------------------------------------------------------------\n    //\n    // takes a sequence of overlapping matches, returns the non-overlapping sequence with\n    // minimum guesses. the following is a O(l_max * (n + m)) dynamic programming algorithm\n    // for a length-n password with m candidate matches. l_max is the maximum optimal\n    // sequence length spanning each prefix of the password. In practice it rarely exceeds 5 and the\n    // search terminates rapidly.\n    //\n    // the optimal \"minimum guesses\" sequence is here defined to be the sequence that\n    // minimizes the following function:\n    //\n    //    g = sequenceLength! * Product(m.guesses for m in sequence) + D^(sequenceLength - 1)\n    //\n    // where sequenceLength is the length of the sequence.\n    //\n    // the factorial term is the number of ways to order sequenceLength patterns.\n    //\n    // the D^(sequenceLength-1) term is another length penalty, roughly capturing the idea that an\n    // attacker will try lower-length sequences first before trying length-sequenceLength sequences.\n    //\n    // for example, consider a sequence that is date-repeat-dictionary.\n    //  - an attacker would need to try other date-repeat-dictionary combinations,\n    //    hence the product term.\n    //  - an attacker would need to try repeat-date-dictionary, dictionary-repeat-date,\n    //    ..., hence the factorial term.\n    //  - an attacker would also likely try length-1 (dictionary) and length-2 (dictionary-date)\n    //    sequences before length-3. assuming at minimum D guesses per pattern type,\n    //    D^(sequenceLength-1) approximates Sum(D^i for i in [1..sequenceLength-1]\n    //\n    // ------------------------------------------------------------------------------\n    mostGuessableMatchSequence(password, matches, excludeAdditive = false) {\n        scoringHelper.password = password;\n        scoringHelper.excludeAdditive = excludeAdditive;\n        const passwordLength = password.length;\n        // partition matches into sublists according to ending index j\n        let matchesByCoordinateJ = scoringHelper.fillArray(passwordLength, 'array');\n        matches.forEach((match) => {\n            matchesByCoordinateJ[match.j].push(match);\n        });\n        // small detail: for deterministic output, sort each sublist by i.\n        matchesByCoordinateJ = matchesByCoordinateJ.map((match) => match.sort((m1, m2) => m1.i - m2.i));\n        scoringHelper.optimal = {\n            // optimal.m[k][sequenceLength] holds final match in the best length-sequenceLength\n            // match sequence covering the\n            // password prefix up to k, inclusive.\n            // if there is no length-sequenceLength sequence that scores better (fewer guesses) than\n            // a shorter match sequence spanning the same prefix,\n            // optimal.m[k][sequenceLength] is undefined.\n            m: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the product term Prod(m.guesses for m in sequence).\n            // optimal.pi allows for fast (non-looping) updates to the minimization function.\n            pi: scoringHelper.fillArray(passwordLength, 'object'),\n            // same structure as optimal.m -- holds the overall metric.\n            g: scoringHelper.fillArray(passwordLength, 'object'),\n        };\n        for (let k = 0; k < passwordLength; k += 1) {\n            matchesByCoordinateJ[k].forEach((match) => {\n                if (match.i > 0) {\n                    Object.keys(scoringHelper.optimal.m[match.i - 1]).forEach((sequenceLength) => {\n                        scoringHelper.update(match, parseInt(sequenceLength, 10) + 1);\n                    });\n                }\n                else {\n                    scoringHelper.update(match, 1);\n                }\n            });\n            scoringHelper.bruteforceUpdate(k);\n        }\n        const optimalMatchSequence = scoringHelper.unwind(passwordLength);\n        const optimalSequenceLength = optimalMatchSequence.length;\n        const guesses = this.getGuesses(password, optimalSequenceLength);\n        return {\n            password,\n            guesses,\n            guessesLog10: utils.log10(guesses),\n            sequence: optimalMatchSequence,\n        };\n    },\n    getGuesses(password, optimalSequenceLength) {\n        const passwordLength = password.length;\n        let guesses = 0;\n        if (password.length === 0) {\n            guesses = 1;\n        }\n        else {\n            guesses =\n                scoringHelper.optimal.g[passwordLength - 1][optimalSequenceLength];\n        }\n        return guesses;\n    },\n};\n//# sourceMappingURL=index.js.map","import scoring from '../../scoring';\n/*\n *-------------------------------------------------------------------------------\n * repeats (aaa, abcabcabc) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchRepeat {\n    // eslint-disable-next-line max-statements\n    match({ password, omniMatch }) {\n        const matches = [];\n        let lastIndex = 0;\n        while (lastIndex < password.length) {\n            const greedyMatch = this.getGreedyMatch(password, lastIndex);\n            const lazyMatch = this.getLazyMatch(password, lastIndex);\n            if (greedyMatch == null) {\n                break;\n            }\n            const { match, baseToken } = this.setMatchToken(greedyMatch, lazyMatch);\n            if (match) {\n                const j = match.index + match[0].length - 1;\n                const baseGuesses = this.getBaseGuesses(baseToken, omniMatch);\n                matches.push(this.normalizeMatch(baseToken, j, match, baseGuesses));\n                lastIndex = j + 1;\n            }\n        }\n        const hasPromises = matches.some((match) => {\n            return match instanceof Promise;\n        });\n        if (hasPromises) {\n            return Promise.all(matches);\n        }\n        return matches;\n    }\n    // eslint-disable-next-line max-params\n    normalizeMatch(baseToken, j, match, baseGuesses) {\n        const baseMatch = {\n            pattern: 'repeat',\n            i: match.index,\n            j,\n            token: match[0],\n            baseToken,\n            baseGuesses: 0,\n            repeatCount: match[0].length / baseToken.length,\n        };\n        if (baseGuesses instanceof Promise) {\n            return baseGuesses.then((resolvedBaseGuesses) => {\n                return {\n                    ...baseMatch,\n                    baseGuesses: resolvedBaseGuesses,\n                };\n            });\n        }\n        return {\n            ...baseMatch,\n            baseGuesses,\n        };\n    }\n    getGreedyMatch(password, lastIndex) {\n        const greedy = /(.+)\\1+/g;\n        greedy.lastIndex = lastIndex;\n        return greedy.exec(password);\n    }\n    getLazyMatch(password, lastIndex) {\n        const lazy = /(.+?)\\1+/g;\n        lazy.lastIndex = lastIndex;\n        return lazy.exec(password);\n    }\n    setMatchToken(greedyMatch, lazyMatch) {\n        const lazyAnchored = /^(.+?)\\1+$/;\n        let match;\n        let baseToken = '';\n        if (lazyMatch && greedyMatch[0].length > lazyMatch[0].length) {\n            // greedy beats lazy for 'aabaab'\n            // greedy: [aabaab, aab]\n            // lazy:   [aa,     a]\n            match = greedyMatch;\n            // greedy's repeated string might itself be repeated, eg.\n            // aabaab in aabaabaabaab.\n            // run an anchored lazy match on greedy's repeated string\n            // to find the shortest repeated string\n            const temp = lazyAnchored.exec(match[0]);\n            if (temp) {\n                baseToken = temp[1];\n            }\n        }\n        else {\n            // lazy beats greedy for 'aaaaa'\n            // greedy: [aaaa,  aa]\n            // lazy:   [aaaaa, a]\n            match = lazyMatch;\n            if (match) {\n                baseToken = match[1];\n            }\n        }\n        return {\n            match,\n            baseToken,\n        };\n    }\n    getBaseGuesses(baseToken, omniMatch) {\n        const matches = omniMatch.match(baseToken);\n        if (matches instanceof Promise) {\n            return matches.then((resolvedMatches) => {\n                const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, resolvedMatches);\n                return baseAnalysis.guesses;\n            });\n        }\n        const baseAnalysis = scoring.mostGuessableMatchSequence(baseToken, matches);\n        return baseAnalysis.guesses;\n    }\n}\nexport default MatchRepeat;\n//# sourceMappingURL=matching.js.map","import { ALL_UPPER, ALL_LOWER, ALL_DIGIT } from '../../data/const';\n/*\n *-------------------------------------------------------------------------------\n * sequences (abcdef) ------------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSequence {\n    constructor() {\n        this.MAX_DELTA = 5;\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        /*\n         * Identifies sequences by looking for repeated differences in unicode codepoint.\n         * this allows skipping, such as 9753, and also matches some extended unicode sequences\n         * such as Greek and Cyrillic alphabets.\n         *\n         * for example, consider the input 'abcdb975zy'\n         *\n         * password: a   b   c   d   b    9   7   5   z   y\n         * index:    0   1   2   3   4    5   6   7   8   9\n         * delta:      1   1   1  -2  -41  -2  -2  69   1\n         *\n         * expected result:\n         * [(i, j, delta), ...] = [(0, 3, 1), (5, 7, -2), (8, 9, 1)]\n         */\n        const result = [];\n        if (password.length === 1) {\n            return [];\n        }\n        let i = 0;\n        let lastDelta = null;\n        const passwordLength = password.length;\n        for (let k = 1; k < passwordLength; k += 1) {\n            const delta = password.charCodeAt(k) - password.charCodeAt(k - 1);\n            if (lastDelta == null) {\n                lastDelta = delta;\n            }\n            if (delta !== lastDelta) {\n                const j = k - 1;\n                this.update({\n                    i,\n                    j,\n                    delta: lastDelta,\n                    password,\n                    result,\n                });\n                i = j;\n                lastDelta = delta;\n            }\n        }\n        this.update({\n            i,\n            j: passwordLength - 1,\n            delta: lastDelta,\n            password,\n            result,\n        });\n        return result;\n    }\n    update({ i, j, delta, password, result }) {\n        if (j - i > 1 || Math.abs(delta) === 1) {\n            const absoluteDelta = Math.abs(delta);\n            if (absoluteDelta > 0 && absoluteDelta <= this.MAX_DELTA) {\n                const token = password.slice(i, +j + 1 || 9e9);\n                const { sequenceName, sequenceSpace } = this.getSequence(token);\n                return result.push({\n                    pattern: 'sequence',\n                    i,\n                    j,\n                    token: password.slice(i, +j + 1 || 9e9),\n                    sequenceName,\n                    sequenceSpace,\n                    ascending: delta > 0,\n                });\n            }\n        }\n        return null;\n    }\n    getSequence(token) {\n        // TODO conservatively stick with roman alphabet size.\n        //  (this could be improved)\n        let sequenceName = 'unicode';\n        let sequenceSpace = 26;\n        if (ALL_LOWER.test(token)) {\n            sequenceName = 'lower';\n            sequenceSpace = 26;\n        }\n        else if (ALL_UPPER.test(token)) {\n            sequenceName = 'upper';\n            sequenceSpace = 26;\n        }\n        else if (ALL_DIGIT.test(token)) {\n            sequenceName = 'digits';\n            sequenceSpace = 10;\n        }\n        return {\n            sequenceName,\n            sequenceSpace,\n        };\n    }\n}\nexport default MatchSequence;\n//# sourceMappingURL=matching.js.map","import { sorted, extend } from '../../helper';\nimport { zxcvbnOptions } from '../../Options';\n/*\n * ------------------------------------------------------------------------------\n * spatial match (qwerty/dvorak/keypad and so on) -----------------------------------------\n * ------------------------------------------------------------------------------\n */\nclass MatchSpatial {\n    constructor() {\n        this.SHIFTED_RX = /[~!@#$%^&*()_+QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?]/;\n    }\n    match({ password }) {\n        const matches = [];\n        Object.keys(zxcvbnOptions.graphs).forEach((graphName) => {\n            const graph = zxcvbnOptions.graphs[graphName];\n            extend(matches, this.helper(password, graph, graphName));\n        });\n        return sorted(matches);\n    }\n    checkIfShifted(graphName, password, index) {\n        if (!graphName.includes('keypad') &&\n            // initial character is shifted\n            this.SHIFTED_RX.test(password.charAt(index))) {\n            return 1;\n        }\n        return 0;\n    }\n    // eslint-disable-next-line complexity, max-statements\n    helper(password, graph, graphName) {\n        let shiftedCount;\n        const matches = [];\n        let i = 0;\n        const passwordLength = password.length;\n        while (i < passwordLength - 1) {\n            let j = i + 1;\n            let lastDirection = null;\n            let turns = 0;\n            shiftedCount = this.checkIfShifted(graphName, password, i);\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const prevChar = password.charAt(j - 1);\n                const adjacents = graph[prevChar] || [];\n                let found = false;\n                let foundDirection = -1;\n                let curDirection = -1;\n                // consider growing pattern by one character if j hasn't gone over the edge.\n                if (j < passwordLength) {\n                    const curChar = password.charAt(j);\n                    const adjacentsLength = adjacents.length;\n                    for (let k = 0; k < adjacentsLength; k += 1) {\n                        const adjacent = adjacents[k];\n                        curDirection += 1;\n                        // eslint-disable-next-line max-depth\n                        if (adjacent) {\n                            const adjacentIndex = adjacent.indexOf(curChar);\n                            // eslint-disable-next-line max-depth\n                            if (adjacentIndex !== -1) {\n                                found = true;\n                                foundDirection = curDirection;\n                                // eslint-disable-next-line max-depth\n                                if (adjacentIndex === 1) {\n                                    // # index 1 in the adjacency means the key is shifted,\n                                    // # 0 means unshifted: A vs a, % vs 5, etc.\n                                    // # for example, 'q' is adjacent to the entry '2@'.\n                                    // # @ is shifted w/ index 1, 2 is unshifted.\n                                    shiftedCount += 1;\n                                }\n                                // eslint-disable-next-line max-depth\n                                if (lastDirection !== foundDirection) {\n                                    // # adding a turn is correct even in the initial\n                                    // case when last_direction is null:\n                                    // # every spatial pattern starts with a turn.\n                                    turns += 1;\n                                    lastDirection = foundDirection;\n                                }\n                                break;\n                            }\n                        }\n                    }\n                }\n                // if the current pattern continued, extend j and try to grow again\n                if (found) {\n                    j += 1;\n                    // otherwise push the pattern discovered so far, if any...\n                }\n                else {\n                    // don't consider length 1 or 2 chains.\n                    if (j - i > 2) {\n                        matches.push({\n                            pattern: 'spatial',\n                            i,\n                            j: j - 1,\n                            token: password.slice(i, j),\n                            graph: graphName,\n                            turns,\n                            shiftedCount,\n                        });\n                    }\n                    // ...and then start a new search for the rest of the password.\n                    i = j;\n                    break;\n                }\n            }\n        }\n        return matches;\n    }\n}\nexport default MatchSpatial;\n//# sourceMappingURL=matching.js.map","import { SEPERATOR_CHARS } from '../../data/const';\nconst separatorRegex = new RegExp(`[${SEPERATOR_CHARS.join('')}]`);\n/*\n *-------------------------------------------------------------------------------\n * separators (any semi-repeated special character) -----------------------------\n *-------------------------------------------------------------------------------\n */\nclass MatchSeparator {\n    static getMostUsedSeparatorChar(password) {\n        const mostUsedSeperators = [\n            ...password\n                .split('')\n                .filter((c) => separatorRegex.test(c))\n                .reduce((memo, c) => {\n                const m = memo.get(c);\n                if (m) {\n                    memo.set(c, m + 1);\n                }\n                else {\n                    memo.set(c, 1);\n                }\n                return memo;\n            }, new Map())\n                .entries(),\n        ].sort(([_a, a], [_b, b]) => b - a);\n        if (!mostUsedSeperators.length)\n            return undefined;\n        const match = mostUsedSeperators[0];\n        // If the special character is only used once, don't treat it like a separator\n        if (match[1] < 2)\n            return undefined;\n        return match[0];\n    }\n    static getSeparatorRegex(separator) {\n        return new RegExp(`([^${separator}\\n])(${separator})(?!${separator})`, 'g');\n        // negative lookbehind can be added again in a few years when it is more supported by the browsers (currently 2023)\n        // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n        // return new RegExp(`(?<!${separator})(${separator})(?!${separator})`, 'g')\n    }\n    // eslint-disable-next-line max-statements\n    match({ password }) {\n        const result = [];\n        if (password.length === 0)\n            return result;\n        const mostUsedSpecial = MatchSeparator.getMostUsedSeparatorChar(password);\n        if (mostUsedSpecial === undefined)\n            return result;\n        const isSeparator = MatchSeparator.getSeparatorRegex(mostUsedSpecial);\n        // eslint-disable-next-line no-restricted-syntax\n        for (const match of password.matchAll(isSeparator)) {\n            // eslint-disable-next-line no-continue\n            if (match.index === undefined)\n                continue;\n            // add one to the index because we changed the regex from negative lookbehind to something simple.\n            // this simple approach uses the first character before the separater too but we only need the index of the separater\n            // https://github.com/zxcvbn-ts/zxcvbn/issues/202\n            const i = match.index + 1;\n            result.push({\n                pattern: 'separator',\n                token: mostUsedSpecial,\n                i,\n                j: i,\n            });\n        }\n        return result;\n    }\n}\nexport default MatchSeparator;\n//# sourceMappingURL=matching.js.map","import { extend, sorted } from './helper';\nimport dateMatcher from './matcher/date/matching';\nimport dictionaryMatcher from './matcher/dictionary/matching';\nimport regexMatcher from './matcher/regex/matching';\nimport repeatMatcher from './matcher/repeat/matching';\nimport sequenceMatcher from './matcher/sequence/matching';\nimport spatialMatcher from './matcher/spatial/matching';\nimport separatorMatcher from './matcher/separator/matching';\nimport { zxcvbnOptions } from './Options';\nclass Matching {\n    constructor() {\n        this.matchers = {\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            // @ts-ignore => TODO resolve this type issue. This is because it is possible to be async\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n    }\n    match(password) {\n        const matches = [];\n        const promises = [];\n        const matchers = [\n            ...Object.keys(this.matchers),\n            ...Object.keys(zxcvbnOptions.matchers),\n        ];\n        matchers.forEach((key) => {\n            if (!this.matchers[key] && !zxcvbnOptions.matchers[key]) {\n                return;\n            }\n            const Matcher = this.matchers[key]\n                ? this.matchers[key]\n                : zxcvbnOptions.matchers[key].Matching;\n            const usedMatcher = new Matcher();\n            const result = usedMatcher.match({\n                password,\n                omniMatch: this,\n            });\n            if (result instanceof Promise) {\n                result.then((response) => {\n                    extend(matches, response);\n                });\n                promises.push(result);\n            }\n            else {\n                extend(matches, result);\n            }\n        });\n        if (promises.length > 0) {\n            return new Promise((resolve, reject) => {\n                Promise.all(promises)\n                    .then(() => {\n                    resolve(sorted(matches));\n                })\n                    .catch((error) => {\n                    reject(error);\n                });\n            });\n        }\n        return sorted(matches);\n    }\n}\nexport default Matching;\n//# sourceMappingURL=Matching.js.map","import { zxcvbnOptions } from './Options';\nconst SECOND = 1;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 31;\nconst YEAR = MONTH * 12;\nconst CENTURY = YEAR * 100;\nconst times = {\n    second: SECOND,\n    minute: MINUTE,\n    hour: HOUR,\n    day: DAY,\n    month: MONTH,\n    year: YEAR,\n    century: CENTURY,\n};\n/*\n * -------------------------------------------------------------------------------\n *  Estimates time for an attacker ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass TimeEstimates {\n    translate(displayStr, value) {\n        let key = displayStr;\n        if (value !== undefined && value !== 1) {\n            key += 's';\n        }\n        const { timeEstimation } = zxcvbnOptions.translations;\n        return timeEstimation[key].replace('{base}', `${value}`);\n    }\n    estimateAttackTimes(guesses) {\n        const crackTimesSeconds = {\n            onlineThrottling100PerHour: guesses / (100 / 3600),\n            onlineNoThrottling10PerSecond: guesses / 10,\n            offlineSlowHashing1e4PerSecond: guesses / 1e4,\n            offlineFastHashing1e10PerSecond: guesses / 1e10,\n        };\n        const crackTimesDisplay = {\n            onlineThrottling100PerHour: '',\n            onlineNoThrottling10PerSecond: '',\n            offlineSlowHashing1e4PerSecond: '',\n            offlineFastHashing1e10PerSecond: '',\n        };\n        Object.keys(crackTimesSeconds).forEach((scenario) => {\n            const seconds = crackTimesSeconds[scenario];\n            crackTimesDisplay[scenario] =\n                this.displayTime(seconds);\n        });\n        return {\n            crackTimesSeconds,\n            crackTimesDisplay,\n            score: this.guessesToScore(guesses),\n        };\n    }\n    guessesToScore(guesses) {\n        const DELTA = 5;\n        if (guesses < 1e3 + DELTA) {\n            // risky password: \"too guessable\"\n            return 0;\n        }\n        if (guesses < 1e6 + DELTA) {\n            // modest protection from throttled online attacks: \"very guessable\"\n            return 1;\n        }\n        if (guesses < 1e8 + DELTA) {\n            // modest protection from unthrottled online attacks: \"somewhat guessable\"\n            return 2;\n        }\n        if (guesses < 1e10 + DELTA) {\n            // modest protection from offline attacks: \"safely unguessable\"\n            // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n            return 3;\n        }\n        // strong protection from offline attacks under same scenario: \"very unguessable\"\n        return 4;\n    }\n    displayTime(seconds) {\n        let displayStr = 'centuries';\n        let base;\n        const timeKeys = Object.keys(times);\n        const foundIndex = timeKeys.findIndex((time) => seconds < times[time]);\n        if (foundIndex > -1) {\n            displayStr = timeKeys[foundIndex - 1];\n            if (foundIndex !== 0) {\n                base = Math.round(seconds / times[displayStr]);\n            }\n            else {\n                displayStr = 'ltSecond';\n            }\n        }\n        return this.translate(displayStr, base);\n    }\n}\nexport default TimeEstimates;\n//# sourceMappingURL=TimeEstimates.js.map","export default () => {\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.dates,\n        suggestions: [zxcvbnOptions.translations.suggestions.dates],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nimport { ALL_UPPER_INVERTED, START_UPPER } from '../../data/const';\nconst getDictionaryWarningPassword = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch && !match.l33t && !match.reversed) {\n        if (match.rank <= 10) {\n            warning = zxcvbnOptions.translations.warnings.topTen;\n        }\n        else if (match.rank <= 100) {\n            warning = zxcvbnOptions.translations.warnings.topHundred;\n        }\n        else {\n            warning = zxcvbnOptions.translations.warnings.common;\n        }\n    }\n    else if (match.guessesLog10 <= 4) {\n        warning = zxcvbnOptions.translations.warnings.similarToCommon;\n    }\n    return warning;\n};\nconst getDictionaryWarningWikipedia = (match, isSoleMatch) => {\n    let warning = null;\n    if (isSoleMatch) {\n        warning = zxcvbnOptions.translations.warnings.wordByItself;\n    }\n    return warning;\n};\nconst getDictionaryWarningNames = (match, isSoleMatch) => {\n    if (isSoleMatch) {\n        return zxcvbnOptions.translations.warnings.namesByThemselves;\n    }\n    return zxcvbnOptions.translations.warnings.commonNames;\n};\nconst getDictionaryWarning = (match, isSoleMatch) => {\n    let warning = null;\n    const dictName = match.dictionaryName;\n    const isAName = dictName === 'lastnames' || dictName.toLowerCase().includes('firstnames');\n    if (dictName === 'passwords') {\n        warning = getDictionaryWarningPassword(match, isSoleMatch);\n    }\n    else if (dictName.includes('wikipedia')) {\n        warning = getDictionaryWarningWikipedia(match, isSoleMatch);\n    }\n    else if (isAName) {\n        warning = getDictionaryWarningNames(match, isSoleMatch);\n    }\n    else if (dictName === 'userInputs') {\n        warning = zxcvbnOptions.translations.warnings.userInputs;\n    }\n    return warning;\n};\nexport default (match, isSoleMatch) => {\n    const warning = getDictionaryWarning(match, isSoleMatch);\n    const suggestions = [];\n    const word = match.token;\n    if (word.match(START_UPPER)) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.capitalization);\n    }\n    else if (word.match(ALL_UPPER_INVERTED) && word.toLowerCase() !== word) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.allUppercase);\n    }\n    if (match.reversed && match.token.length >= 4) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.reverseWords);\n    }\n    if (match.l33t) {\n        suggestions.push(zxcvbnOptions.translations.suggestions.l33t);\n    }\n    return {\n        warning,\n        suggestions,\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    if (match.regexName === 'recentYear') {\n        return {\n            warning: zxcvbnOptions.translations.warnings.recentYears,\n            suggestions: [\n                zxcvbnOptions.translations.suggestions.recentYears,\n                zxcvbnOptions.translations.suggestions.associatedYears,\n            ],\n        };\n    }\n    return {\n        warning: null,\n        suggestions: [],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.extendedRepeat;\n    if (match.baseToken.length === 1) {\n        warning = zxcvbnOptions.translations.warnings.simpleRepeat;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.repeated],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default () => {\n    return {\n        warning: zxcvbnOptions.translations.warnings.sequences,\n        suggestions: [zxcvbnOptions.translations.suggestions.sequences],\n    };\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from '../../Options';\nexport default (match) => {\n    let warning = zxcvbnOptions.translations.warnings.keyPattern;\n    if (match.turns === 1) {\n        warning = zxcvbnOptions.translations.warnings.straightRow;\n    }\n    return {\n        warning,\n        suggestions: [zxcvbnOptions.translations.suggestions.longerKeyboardPattern],\n    };\n};\n//# sourceMappingURL=feedback.js.map","export default () => {\n    // no suggestions\n    return null;\n};\n//# sourceMappingURL=feedback.js.map","import { zxcvbnOptions } from './Options';\nimport bruteforceMatcher from './matcher/bruteforce/feedback';\nimport dateMatcher from './matcher/date/feedback';\nimport dictionaryMatcher from './matcher/dictionary/feedback';\nimport regexMatcher from './matcher/regex/feedback';\nimport repeatMatcher from './matcher/repeat/feedback';\nimport sequenceMatcher from './matcher/sequence/feedback';\nimport spatialMatcher from './matcher/spatial/feedback';\nimport separatorMatcher from './matcher/separator/feedback';\nconst defaultFeedback = {\n    warning: null,\n    suggestions: [],\n};\n/*\n * -------------------------------------------------------------------------------\n *  Generate feedback ---------------------------------------------------------------\n * -------------------------------------------------------------------------------\n */\nclass Feedback {\n    constructor() {\n        this.matchers = {\n            bruteforce: bruteforceMatcher,\n            date: dateMatcher,\n            dictionary: dictionaryMatcher,\n            regex: regexMatcher,\n            repeat: repeatMatcher,\n            sequence: sequenceMatcher,\n            spatial: spatialMatcher,\n            separator: separatorMatcher,\n        };\n        this.defaultFeedback = {\n            warning: null,\n            suggestions: [],\n        };\n        this.setDefaultSuggestions();\n    }\n    setDefaultSuggestions() {\n        this.defaultFeedback.suggestions.push(zxcvbnOptions.translations.suggestions.useWords, zxcvbnOptions.translations.suggestions.noNeed);\n    }\n    getFeedback(score, sequence) {\n        if (sequence.length === 0) {\n            return this.defaultFeedback;\n        }\n        if (score > 2) {\n            return defaultFeedback;\n        }\n        const extraFeedback = zxcvbnOptions.translations.suggestions.anotherWord;\n        const longestMatch = this.getLongestMatch(sequence);\n        let feedback = this.getMatchFeedback(longestMatch, sequence.length === 1);\n        if (feedback !== null && feedback !== undefined) {\n            feedback.suggestions.unshift(extraFeedback);\n        }\n        else {\n            feedback = {\n                warning: null,\n                suggestions: [extraFeedback],\n            };\n        }\n        return feedback;\n    }\n    getLongestMatch(sequence) {\n        let longestMatch = sequence[0];\n        const slicedSequence = sequence.slice(1);\n        slicedSequence.forEach((match) => {\n            if (match.token.length > longestMatch.token.length) {\n                longestMatch = match;\n            }\n        });\n        return longestMatch;\n    }\n    getMatchFeedback(match, isSoleMatch) {\n        if (this.matchers[match.pattern]) {\n            return this.matchers[match.pattern](match, isSoleMatch);\n        }\n        if (zxcvbnOptions.matchers[match.pattern] &&\n            'feedback' in zxcvbnOptions.matchers[match.pattern]) {\n            return zxcvbnOptions.matchers[match.pattern].feedback(match, isSoleMatch);\n        }\n        return defaultFeedback;\n    }\n}\nexport default Feedback;\n//# sourceMappingURL=Feedback.js.map","import Matching from './Matching';\nimport scoring from './scoring';\nimport TimeEstimates from './TimeEstimates';\nimport Feedback from './Feedback';\nimport { zxcvbnOptions, Options } from './Options';\nimport debounce from './debounce';\nconst time = () => new Date().getTime();\nconst createReturnValue = (resolvedMatches, password, start) => {\n    const feedback = new Feedback();\n    const timeEstimates = new TimeEstimates();\n    const matchSequence = scoring.mostGuessableMatchSequence(password, resolvedMatches);\n    const calcTime = time() - start;\n    const attackTimes = timeEstimates.estimateAttackTimes(matchSequence.guesses);\n    return {\n        calcTime,\n        ...matchSequence,\n        ...attackTimes,\n        feedback: feedback.getFeedback(attackTimes.score, matchSequence.sequence),\n    };\n};\nconst main = (password, userInputs) => {\n    if (userInputs) {\n        zxcvbnOptions.extendUserInputsDictionary(userInputs);\n    }\n    const matching = new Matching();\n    return matching.match(password);\n};\nexport const zxcvbn = (password, userInputs) => {\n    const start = time();\n    const matches = main(password, userInputs);\n    if (matches instanceof Promise) {\n        throw new Error('You are using a Promised matcher, please use `zxcvbnAsync` for it.');\n    }\n    return createReturnValue(matches, password, start);\n};\nexport const zxcvbnAsync = async (password, userInputs) => {\n    const usedPassword = password.substring(0, zxcvbnOptions.maxLength);\n    const start = time();\n    const matches = await main(usedPassword, userInputs);\n    return createReturnValue(matches, usedPassword, start);\n};\nexport * from './types';\nexport { zxcvbnOptions, Options, debounce };\n//# sourceMappingURL=index.js.map","import tempAdjacencyGraphs from './adjacencyGraphs.json';\nimport diceware from './diceware.json';\nimport passwords from './passwords.json';\nconst dictionary = { diceware, passwords };\n// reinit the variable because the typescript compile will otherwise just reexport the json file which will break as it's a json file\nconst adjacencyGraphs = tempAdjacencyGraphs;\nexport { dictionary, adjacencyGraphs };\n//# sourceMappingURL=index.js.map","// This file is auto generated by data-scripts/_helpers/runtime.ts\nimport commonWords from './commonWords.json';\nimport firstnames from './firstnames.json';\nimport lastnames from './lastnames.json';\nimport wikipedia from './wikipedia.json';\nimport translations from './translations';\nconst dictionary = { commonWords, firstnames, lastnames, wikipedia };\nexport { dictionary, translations };\n//# sourceMappingURL=index.js.map","export default {\n    warnings: {\n        straightRow: 'Straight rows of keys on your keyboard are easy to guess.',\n        keyPattern: 'Short keyboard patterns are easy to guess.',\n        simpleRepeat: 'Repeated characters like \"aaa\" are easy to guess.',\n        extendedRepeat: 'Repeated character patterns like \"abcabcabc\" are easy to guess.',\n        sequences: 'Common character sequences like \"abc\" are easy to guess.',\n        recentYears: 'Recent years are easy to guess.',\n        dates: 'Dates are easy to guess.',\n        topTen: 'This is a heavily used password.',\n        topHundred: 'This is a frequently used password.',\n        common: 'This is a commonly used password.',\n        similarToCommon: 'This is similar to a commonly used password.',\n        wordByItself: 'Single words are easy to guess.',\n        namesByThemselves: 'Single names or surnames are easy to guess.',\n        commonNames: 'Common names and surnames are easy to guess.',\n        userInputs: 'There should not be any personal or page related data.',\n        pwned: 'Your password was exposed by a data breach on the Internet.',\n    },\n    suggestions: {\n        l33t: \"Avoid predictable letter substitutions like '@' for 'a'.\",\n        reverseWords: 'Avoid reversed spellings of common words.',\n        allUppercase: 'Capitalize some, but not all letters.',\n        capitalization: 'Capitalize more than the first letter.',\n        dates: 'Avoid dates and years that are associated with you.',\n        recentYears: 'Avoid recent years.',\n        associatedYears: 'Avoid years that are associated with you.',\n        sequences: 'Avoid common character sequences.',\n        repeated: 'Avoid repeated words and characters.',\n        longerKeyboardPattern: 'Use longer keyboard patterns and change typing direction multiple times.',\n        anotherWord: 'Add more words that are less common.',\n        useWords: 'Use multiple words, but avoid common phrases.',\n        noNeed: 'You can create strong passwords without using symbols, numbers, or uppercase letters.',\n        pwned: 'If you use this password elsewhere, you should change it.',\n    },\n    timeEstimation: {\n        ltSecond: 'less than a second',\n        second: '{base} second',\n        seconds: '{base} seconds',\n        minute: '{base} minute',\n        minutes: '{base} minutes',\n        hour: '{base} hour',\n        hours: '{base} hours',\n        day: '{base} day',\n        days: '{base} days',\n        month: '{base} month',\n        months: '{base} months',\n        year: '{base} year',\n        years: '{base} years',\n        centuries: 'centuries',\n    },\n};\n//# sourceMappingURL=translations.js.map"],"names":["extend","listToExtend","list","push","apply","sorted","matches","sort","m1","m2","i","j","buildRankedDictionary","orderedList","result","counter","forEach","word","DATE_SPLITS","START_UPPER","END_UPPER","ALL_UPPER","ALL_UPPER_INVERTED","ALL_LOWER","ALL_LOWER_INVERTED","ONE_LOWER","ONE_UPPER","ALPHA_INVERTED","ALL_DIGIT","REFERENCE_YEAR","Date","getFullYear","REGEXEN","recentYear","SEPERATOR_CHARS","SEPERATOR_CHAR_COUNT","length","MatchDate","match","password","this","getMatchesWithoutSeparator","getMatchesWithSeparator","filteredMatches","filterNoise","maybeDateWithSeparator","Math","abs","token","slice","regexMatch","exec","dmy","mapIntegersToDayMonthYear","parseInt","pattern","separator","year","month","day","maybeDateNoSeparator","metric","candidate","candidates","index","k","l","bestCandidate","minDistance","distance","filter","isSubmatch","matchesLength","o","otherMatch","integers","over12","over31","under1","len1","int","getDayMonth","possibleYearSplits","possibleYearSplitsLength","y","rest","dm","mapIntegersToDayMonth","twoToFourDigitYear","temp","reverse","data","peq","Uint32Array","a","b","tmp","n","m","lst","pv","mv","sc","charCodeAt","eq","xv","myers_32","mhc","phc","hsize","ceil","vsize","start","vlen","min","pb","mb","xh","ph","mh","score","myers_x","findLevenshteinDistance","rankedDictionary","threshold","foundDistance","found","Object","keys","find","entry","usedThreshold","getUsedThreshold","isPasswordToShort","isThresholdLongerThanPassword","foundEntryDistance","isInThreshold","levenshteinDistance","levenshteinDistanceEntry","c","d","e","f","g","h","q","u","s","t","v","w","x","z","warnings","straightRow","keyPattern","simpleRepeat","extendedRepeat","sequences","recentYears","dates","topTen","topHundred","common","similarToCommon","wordByItself","namesByThemselves","commonNames","userInputs","pwned","suggestions","l33t","reverseWords","allUppercase","capitalization","associatedYears","repeated","longerKeyboardPattern","anotherWord","useWords","noNeed","timeEstimation","ltSecond","second","seconds","minute","minutes","hour","hours","days","months","years","centuries","TrieNode","constructor","parents","children","Map","addSub","key","subs","firstChar","charAt","has","set","cur","get","hasChild","addChild","getChild","concat","child","isTerminal","l33tTable","triNode","entries","letter","substitutions","substitution","zxcvbnOptions","matchers","trieNodeRoot","l33tTableToTrieNode","dictionary","rankedDictionaries","rankedDictionariesMaxWordSize","translations","translationKeys","graphs","useLevenshteinDistance","levenshteinThreshold","l33tMaxSubstitutions","maxLength","setRankedDictionaries","setOptions","options","setTranslations","undefined","checkCustomTranslations","Error","valid","type","translationType","rankedDictionariesMaxWorkSize","name","getRankedDictionariesMaxWordSize","map","el","toString","reduce","max","Infinity","buildSanitizedRankedDictionary","sanitizedInputs","input","inputType","toLowerCase","extendUserInputsDictionary","newList","addMatcher","matcher","console","info","MatchReverse","defaultMatch","passwordReversed","split","join","reversed","CleanPasswords","substr","limit","trieRoot","buffer","finalPasswords","getAllPossibleSubsAtIndex","nodes","character","helper","onlyFullSub","isFullSub","subIndex","changes","lastSubLetter","consecutiveSubCount","hasSubs","sub","newSubs","pop","getAll","MatchL33t","isAlreadyIncluded","newMatch","some","l33tMatch","every","value","subbedPasswords","getCleanPasswords","hasFullMatch","isFullSubstitution","subbedPassword","matchedDictionary","useLevenshtein","extras","getExtras","passwordWithSubs","iUnsubbed","change","usedChanges","jUnsubbed","filtered","subDisplay","findIndex","alreadyIncluded","matchedWord","MatchDictionary","L33t","Reverse","passwordLength","passwordLower","dictionaryName","rankedDict","longestDictionaryWordSize","searchWidth","searchEnd","usedPassword","isInDictionary","foundLevenshteinDistance","isFullPassword","isLevenshteinMatch","rank","MatchRegex","regexes","regex","lastIndex","regexName","nCk","count","coEff","log10","log","log2","factorial","num","rval","cleanedWord","replace","commonCases","commonCasesLength","wordArray","upperCaseCount","char","lowerCaseCount","variations","variationLength","utils","getVariations","countSubstring","string","substring","pos","indexOf","subbedCount","unsubbedCount","getCounts","tokenLower","p","possibilities","estimatePossiblePatterns","graph","turns","startingPosition","averageDegree","average","neighbors","calcAverageDegree","guesses","tokenLength","possibleTurns","bruteforce","minGuesses","Number","POSITIVE_INFINITY","MAX_VALUE","MIN_SUBMATCH_GUESSES_SINGLE_CHAR","MIN_SUBMATCH_GUESSES_MULTI_CHAR","date","baseGuesses","uppercaseVariations","uppercaseVariant","l33tVariations","l33tVariant","calculation","charClassBases","alphaLower","alphaUpper","alpha","alphanumeric","digits","symbols","repeat","repeatCount","sequence","ascending","firstChr","includes","spatial","shiftedCount","unShiftedCount","shiftedVariations","round","extraData","getMinGuesses","estimationResult","getScoring","scoring","matchGuesses","guessesLog10","scoringHelper","optimal","excludeAdditive","separatorRegex","fillArray","size","valueType","makeBruteforceMatch","update","sequenceLength","estimatedMatch","estimateGuesses","pi","shouldSkip","competingPatternLength","competingMetricMatch","bruteforceUpdate","passwordCharIndex","unwind","optimalMatchSequence","candidateSequenceLength","candidateMetricMatch","unshift","mostGuessableMatchSequence","matchesByCoordinateJ","optimalSequenceLength","getGuesses","MatchRepeat","omniMatch","greedyMatch","getGreedyMatch","lazyMatch","getLazyMatch","baseToken","setMatchToken","getBaseGuesses","normalizeMatch","Promise","all","baseMatch","then","resolvedBaseGuesses","greedy","lazy","lazyAnchored","resolvedMatches","MatchSequence","MAX_DELTA","lastDelta","delta","absoluteDelta","sequenceName","sequenceSpace","getSequence","test","MatchSpatial","SHIFTED_RX","graphName","checkIfShifted","lastDirection","adjacents","foundDirection","curDirection","curChar","adjacentsLength","adjacent","adjacentIndex","RegExp","MatchSeparator","getMostUsedSeparatorChar","mostUsedSeperators","memo","_a","_b","getSeparatorRegex","mostUsedSpecial","isSeparator","matchAll","Matching","dateMatcher","dictionaryMatcher","regexMatcher","repeatMatcher","sequenceMatcher","spatialMatcher","separatorMatcher","promises","response","resolve","reject","catch","error","MONTH","DAY","YEAR","times","SECOND","MINUTE","HOUR","century","TimeEstimates","translate","displayStr","estimateAttackTimes","crackTimesSeconds","onlineThrottling100PerHour","onlineNoThrottling10PerSecond","offlineSlowHashing1e4PerSecond","offlineFastHashing1e10PerSecond","crackTimesDisplay","scenario","displayTime","guessesToScore","base","timeKeys","foundIndex","time","warning","getDictionaryWarning","isSoleMatch","dictName","isAName","getDictionaryWarningPassword","getDictionaryWarningWikipedia","getDictionaryWarningNames","defaultFeedback","Feedback","bruteforceMatcher","setDefaultSuggestions","getFeedback","extraFeedback","longestMatch","getLongestMatch","feedback","getMatchFeedback","getTime","createReturnValue","timeEstimates","matchSequence","calcTime","attackTimes","main","zxcvbn","diceware","passwords","adjacencyGraphs","commonWords","firstnames","lastnames","wikipedia"],"sourceRoot":""}