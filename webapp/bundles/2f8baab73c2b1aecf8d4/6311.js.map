{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/6311.js","mappings":"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","sources":["webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/components/EditionButtons.tsx","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/hooks/useInitialContent.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/EditWysiwygComposer.tsx","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/hooks/useWysiwygEditActionHandler.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/hooks/useEditing.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/createMessageContent.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/message.ts","webpack://soc-connect/./src/components/views/rooms/wysiwyg_composer/utils/isContentModified.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX } from \"react\";\r\n\r\nimport { _t } from \"../../../../../languageHandler\";\r\nimport AccessibleButton, { type ButtonEvent } from \"../../../elements/AccessibleButton\";\r\n\r\ninterface EditionButtonsProps {\r\n    onCancelClick: (e: ButtonEvent) => void;\r\n    onSaveClick: (e: ButtonEvent) => void;\r\n    isSaveDisabled?: boolean;\r\n}\r\n\r\nexport function EditionButtons({\r\n    onCancelClick,\r\n    onSaveClick,\r\n    isSaveDisabled = false,\r\n}: EditionButtonsProps): JSX.Element {\r\n    return (\r\n        <div className=\"mx_EditWysiwygComposer_buttons\">\r\n            <AccessibleButton kind=\"secondary\" onClick={onCancelClick}>\r\n                {_t(\"action|cancel\")}\r\n            </AccessibleButton>\r\n            <AccessibleButton kind=\"primary\" onClick={onSaveClick} disabled={isSaveDisabled}>\r\n                {_t(\"action|save\")}\r\n            </AccessibleButton>\r\n        </div>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type MatrixClient, type Room } from \"matrix-js-sdk/src/matrix\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport { useMatrixClientContext } from \"../../../../../contexts/MatrixClientContext\";\r\nimport { parseEvent } from \"../../../../../editor/deserialize\";\r\nimport { CommandPartCreator, type Part } from \"../../../../../editor/parts\";\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\nfunction getFormattedContent(editorStateTransfer: EditorStateTransfer): string {\r\n    return (\r\n        editorStateTransfer\r\n            .getEvent()\r\n            .getContent()\r\n            .formatted_body?.replace(/<mx-reply>.*<\\/mx-reply>/, \"\") || \"\"\r\n    );\r\n}\r\n\r\nexport function parseEditorStateTransfer(\r\n    editorStateTransfer: EditorStateTransfer,\r\n    room: Room,\r\n    mxClient: MatrixClient,\r\n): string {\r\n    const partCreator = new CommandPartCreator(room, mxClient);\r\n\r\n    let parts: (Part | undefined)[] = [];\r\n    if (editorStateTransfer.hasEditorState()) {\r\n        // if restoring state from a previous editor,\r\n        // restore serialized parts from the state\r\n        const serializedParts = editorStateTransfer.getSerializedParts();\r\n        if (serializedParts !== null) {\r\n            parts = serializedParts.map((p) => partCreator.deserializePart(p));\r\n        }\r\n    } else {\r\n        // otherwise, either restore serialized parts from localStorage or parse the body of the event\r\n        // TODO local storage\r\n        // const restoredParts = this.restoreStoredEditorState(partCreator);\r\n\r\n        if (editorStateTransfer.getEvent().getContent().format === \"org.matrix.custom.html\") {\r\n            return getFormattedContent(editorStateTransfer);\r\n        }\r\n\r\n        parts = parseEvent(editorStateTransfer.getEvent(), partCreator, {\r\n            shouldEscape: SettingsStore.getValue(\"MessageComposerInput.useMarkdown\"),\r\n        });\r\n    }\r\n\r\n    return parts.reduce((content, part) => content + part?.text, \"\");\r\n    // Todo local storage\r\n    // this.saveStoredEditorState();\r\n}\r\n\r\nexport function useInitialContent(editorStateTransfer: EditorStateTransfer): string | undefined {\r\n    const { room } = useScopedRoomContext(\"room\");\r\n    const mxClient = useMatrixClientContext();\r\n\r\n    return useMemo<string | undefined>(() => {\r\n        if (editorStateTransfer && room && mxClient) {\r\n            return parseEditorStateTransfer(editorStateTransfer, room, mxClient);\r\n        }\r\n    }, [editorStateTransfer, room, mxClient]);\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX, type RefObject, useMemo, type ReactNode } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport type EditorStateTransfer from \"../../../../utils/EditorStateTransfer\";\r\nimport { WysiwygComposer } from \"./components/WysiwygComposer\";\r\nimport { EditionButtons } from \"./components/EditionButtons\";\r\nimport { useWysiwygEditActionHandler } from \"./hooks/useWysiwygEditActionHandler\";\r\nimport { useEditing } from \"./hooks/useEditing\";\r\nimport { useInitialContent } from \"./hooks/useInitialContent\";\r\nimport { ComposerContext, getDefaultContextValue } from \"./ComposerContext\";\r\nimport { type ComposerFunctions } from \"./types\";\r\n\r\ninterface ContentProps {\r\n    disabled?: boolean;\r\n    composerFunctions: ComposerFunctions;\r\n    ref?: RefObject<HTMLElement | null>;\r\n}\r\n\r\nconst Content = function Content({ disabled = false, composerFunctions, ref }: ContentProps): ReactNode {\r\n    useWysiwygEditActionHandler(disabled, ref, composerFunctions);\r\n    return null;\r\n};\r\n\r\ninterface EditWysiwygComposerProps {\r\n    disabled?: boolean;\r\n    onChange?: (content: string) => void;\r\n    editorStateTransfer: EditorStateTransfer;\r\n    className?: string;\r\n}\r\n\r\n// Default needed for React.lazy\r\nexport default function EditWysiwygComposer({\r\n    editorStateTransfer,\r\n    className,\r\n    ...props\r\n}: EditWysiwygComposerProps): JSX.Element {\r\n    const defaultContextValue = useMemo(() => getDefaultContextValue({ editorStateTransfer }), [editorStateTransfer]);\r\n    const initialContent = useInitialContent(editorStateTransfer);\r\n    const isReady = !editorStateTransfer || initialContent !== undefined;\r\n\r\n    const { editMessage, endEditing, onChange, isSaveDisabled } = useEditing(editorStateTransfer, initialContent);\r\n\r\n    if (!isReady) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <ComposerContext.Provider value={defaultContextValue}>\r\n            <WysiwygComposer\r\n                className={classNames(\"mx_EditWysiwygComposer\", className)}\r\n                initialContent={initialContent}\r\n                onChange={onChange}\r\n                onSend={editMessage}\r\n                {...props}\r\n            >\r\n                {(ref, composerFunctions) => (\r\n                    <>\r\n                        <Content disabled={props.disabled} ref={ref} composerFunctions={composerFunctions} />\r\n                        <EditionButtons\r\n                            onCancelClick={endEditing}\r\n                            onSaveClick={editMessage}\r\n                            isSaveDisabled={isSaveDisabled}\r\n                        />\r\n                    </>\r\n                )}\r\n            </WysiwygComposer>\r\n        </ComposerContext.Provider>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RefObject, useCallback, useRef } from \"react\";\r\n\r\nimport defaultDispatcher from \"../../../../../dispatcher/dispatcher\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { type ActionPayload } from \"../../../../../dispatcher/payloads\";\r\nimport { TimelineRenderingType } from \"../../../../../contexts/RoomContext\";\r\nimport { useDispatcher } from \"../../../../../hooks/useDispatcher\";\r\nimport { focusComposer } from \"./utils\";\r\nimport { ComposerType } from \"../../../../../dispatcher/payloads/ComposerInsertPayload\";\r\nimport { type ComposerFunctions } from \"../types\";\r\nimport { setSelection } from \"../utils/selection\";\r\nimport { useComposerContext } from \"../ComposerContext\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\nexport function useWysiwygEditActionHandler(\r\n    disabled: boolean,\r\n    composerElement: RefObject<HTMLElement | null> | undefined,\r\n    composerFunctions: ComposerFunctions,\r\n): void {\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n    const composerContext = useComposerContext();\r\n    const timeoutId = useRef<number | null>(null);\r\n\r\n    const handler = useCallback(\r\n        (payload: ActionPayload) => {\r\n            // don't let the user into the composer if it is disabled - all of these branches lead\r\n            // to the cursor being in the composer\r\n            if (disabled || !composerElement?.current) return;\r\n\r\n            const context = payload.context ?? TimelineRenderingType.Room;\r\n\r\n            switch (payload.action) {\r\n                case Action.FocusEditMessageComposer:\r\n                    focusComposer(composerElement, context, roomContext, timeoutId);\r\n                    break;\r\n                case Action.ComposerInsert:\r\n                    if (payload.timelineRenderingType !== roomContext.timelineRenderingType) break;\r\n                    if (payload.composerType !== ComposerType.Edit) break;\r\n\r\n                    if (payload.text) {\r\n                        setSelection(composerContext.selection).then(() => composerFunctions.insertText(payload.text));\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        [disabled, composerElement, composerFunctions, timeoutId, roomContext, composerContext],\r\n    );\r\n\r\n    useDispatcher(defaultDispatcher, handler);\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type ISendEventResponse } from \"matrix-js-sdk/src/matrix\";\r\nimport { useCallback, useState } from \"react\";\r\n\r\nimport { useMatrixClientContext } from \"../../../../../contexts/MatrixClientContext\";\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\nimport { endEditing } from \"../utils/editing\";\r\nimport { editMessage } from \"../utils/message\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\nexport function useEditing(\r\n    editorStateTransfer: EditorStateTransfer,\r\n    initialContent?: string,\r\n): {\r\n    isSaveDisabled: boolean;\r\n    onChange(content: string): void;\r\n    editMessage(): Promise<ISendEventResponse | undefined>;\r\n    endEditing(): void;\r\n} {\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n    const mxClient = useMatrixClientContext();\r\n\r\n    const [isSaveDisabled, setIsSaveDisabled] = useState(true);\r\n    const [content, setContent] = useState(initialContent);\r\n    const onChange = useCallback(\r\n        (_content: string) => {\r\n            setContent(_content);\r\n            setIsSaveDisabled((_isSaveDisabled) => _isSaveDisabled && _content === initialContent);\r\n        },\r\n        [initialContent],\r\n    );\r\n\r\n    const editMessageMemoized = useCallback(async () => {\r\n        if (mxClient === undefined || content === undefined) {\r\n            return;\r\n        }\r\n        return editMessage(content, { roomContext, mxClient, editorStateTransfer });\r\n    }, [content, roomContext, mxClient, editorStateTransfer]);\r\n\r\n    const endEditingMemoized = useCallback(() => endEditing(roomContext), [roomContext]);\r\n    return { onChange, editMessage: editMessageMemoized, endEditing: endEditingMemoized, isSaveDisabled };\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { richToPlain, plainToRich } from \"@vector-im/matrix-wysiwyg\";\r\nimport { type IContent, type IEventRelation, MatrixEvent, MsgType } from \"matrix-js-sdk/src/matrix\";\r\nimport {\r\n    type ReplacementEvent,\r\n    type RoomMessageEventContent,\r\n    type RoomMessageTextEventContent,\r\n} from \"matrix-js-sdk/src/types\";\r\n\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport { parsePermalink } from \"../../../../../utils/permalinks/Permalinks\";\r\nimport { addReplyToMessageContent } from \"../../../../../utils/Reply\";\r\nimport { isNotNull } from \"../../../../../Typeguards\";\r\n\r\nexport const EMOTE_PREFIX = \"/me \";\r\n\r\n// Merges favouring the given relation\r\nfunction attachRelation(content: IContent, relation?: IEventRelation): void {\r\n    if (relation) {\r\n        content[\"m.relates_to\"] = {\r\n            ...(content[\"m.relates_to\"] || {}),\r\n            ...relation,\r\n        };\r\n    }\r\n}\r\n\r\ninterface CreateMessageContentParams {\r\n    relation?: IEventRelation;\r\n    replyToEvent?: MatrixEvent;\r\n    editedEvent?: MatrixEvent;\r\n}\r\n\r\nconst isMatrixEvent = (e: MatrixEvent | undefined): e is MatrixEvent => e instanceof MatrixEvent;\r\n\r\nexport async function createMessageContent(\r\n    message: string,\r\n    isHTML: boolean,\r\n    { relation, replyToEvent, editedEvent }: CreateMessageContentParams,\r\n): Promise<RoomMessageEventContent> {\r\n    const isEditing = isMatrixEvent(editedEvent);\r\n\r\n    const isEmote = message.startsWith(EMOTE_PREFIX);\r\n    if (isEmote) {\r\n        // if we are dealing with an emote we want to remove the prefix so that `/me` does not\r\n        // appear after the `* <userName>` text in the timeline\r\n        message = message.slice(EMOTE_PREFIX.length);\r\n    }\r\n    if (message.startsWith(\"//\")) {\r\n        // if user wants to enter a single slash at the start of a message, this\r\n        // is how they have to do it (due to it clashing with commands), so here we\r\n        // remove the first character to make sure //word displays as /word\r\n        message = message.slice(1);\r\n    }\r\n\r\n    // if we're editing rich text, the message content is pure html\r\n    // BUT if we're not, the message content will be plain text where we need to convert the mentions\r\n    const body = isHTML ? await richToPlain(message, false) : convertPlainTextToBody(message);\r\n\r\n    const content = {\r\n        msgtype: isEmote ? MsgType.Emote : MsgType.Text,\r\n        body: isEditing ? `* ${body}` : body,\r\n    } as RoomMessageTextEventContent & ReplacementEvent<RoomMessageTextEventContent>;\r\n\r\n    // TODO markdown support\r\n\r\n    const isMarkdownEnabled = SettingsStore.getValue(\"MessageComposerInput.useMarkdown\");\r\n    const formattedBody = isHTML ? message : isMarkdownEnabled ? await plainToRich(message, true) : null;\r\n\r\n    if (formattedBody) {\r\n        content.format = \"org.matrix.custom.html\";\r\n        content.formatted_body = isEditing ? `* ${formattedBody}` : formattedBody;\r\n    }\r\n\r\n    if (isEditing) {\r\n        content[\"m.new_content\"] = {\r\n            msgtype: content.msgtype,\r\n            body: body,\r\n        };\r\n\r\n        if (formattedBody) {\r\n            content[\"m.new_content\"].format = \"org.matrix.custom.html\";\r\n            content[\"m.new_content\"][\"formatted_body\"] = formattedBody;\r\n        }\r\n    }\r\n\r\n    const newRelation = isEditing ? { ...relation, rel_type: \"m.replace\", event_id: editedEvent.getId() } : relation;\r\n\r\n    // TODO Do we need to attach mentions here?\r\n    // TODO Handle editing?\r\n    attachRelation(content, newRelation);\r\n\r\n    if (!isEditing && replyToEvent) {\r\n        addReplyToMessageContent(content, replyToEvent);\r\n    }\r\n\r\n    return content;\r\n}\r\n\r\n/**\r\n * Without a model, we need to manually amend mentions in uncontrolled message content\r\n * to make sure that mentions meet the matrix specification.\r\n *\r\n * @param content - the output from the `MessageComposer` state when in plain text mode\r\n * @returns - a string formatted with the mentions replaced as required\r\n */\r\nfunction convertPlainTextToBody(content: string): string {\r\n    const document = new DOMParser().parseFromString(content, \"text/html\");\r\n    const mentions = Array.from(document.querySelectorAll(\"a[data-mention-type]\"));\r\n\r\n    mentions.forEach((mention) => {\r\n        const mentionType = mention.getAttribute(\"data-mention-type\");\r\n        switch (mentionType) {\r\n            case \"at-room\": {\r\n                mention.replaceWith(\"@room\");\r\n                break;\r\n            }\r\n            case \"user\": {\r\n                const innerText = mention.innerHTML;\r\n                mention.replaceWith(innerText);\r\n                break;\r\n            }\r\n            case \"room\": {\r\n                // for this case we use parsePermalink to try and get the mx id\r\n                const href = mention.getAttribute(\"href\");\r\n\r\n                // if the mention has no href attribute, leave it alone\r\n                if (href === null) break;\r\n\r\n                // otherwise, attempt to parse the room alias or id from the href\r\n                const permalinkParts = parsePermalink(href);\r\n\r\n                // then if we have permalink parts with a valid roomIdOrAlias, replace the\r\n                // room mention with that text\r\n                if (isNotNull(permalinkParts) && isNotNull(permalinkParts.roomIdOrAlias)) {\r\n                    mention.replaceWith(permalinkParts.roomIdOrAlias);\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    return document.body.innerHTML;\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022, 2023 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type Composer as ComposerEvent } from \"@matrix-org/analytics-events/types/typescript/Composer\";\r\nimport {\r\n    type IEventRelation,\r\n    type MatrixEvent,\r\n    type ISendEventResponse,\r\n    type MatrixClient,\r\n    THREAD_RELATION_TYPE,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { type RoomMessageEventContent } from \"matrix-js-sdk/src/types\";\r\n\r\nimport { PosthogAnalytics } from \"../../../../../PosthogAnalytics\";\r\nimport SettingsStore from \"../../../../../settings/SettingsStore\";\r\nimport { decorateStartSendingTime, sendRoundTripMetric } from \"../../../../../sendTimePerformanceMetrics\";\r\nimport { doMaybeLocalRoomAction } from \"../../../../../utils/local-room\";\r\nimport { CHAT_EFFECTS } from \"../../../../../effects\";\r\nimport { containsEmoji } from \"../../../../../effects/utils\";\r\nimport { type IRoomState } from \"../../../../structures/RoomView\";\r\nimport dis from \"../../../../../dispatcher/dispatcher\";\r\nimport { createRedactEventDialog } from \"../../../dialogs/ConfirmRedactDialog\";\r\nimport { endEditing, cancelPreviousPendingEdit } from \"./editing\";\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\nimport { createMessageContent, EMOTE_PREFIX } from \"./createMessageContent\";\r\nimport { isContentModified } from \"./isContentModified\";\r\nimport { CommandCategories, getCommand } from \"../../../../../SlashCommands\";\r\nimport { runSlashCommand, shouldSendAnyway } from \"../../../../../editor/commands\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { addReplyToMessageContent } from \"../../../../../utils/Reply\";\r\nimport { attachRelation } from \"../../SendMessageComposer\";\r\n\r\nexport interface SendMessageParams {\r\n    mxClient: MatrixClient;\r\n    relation?: IEventRelation;\r\n    replyToEvent?: MatrixEvent;\r\n    roomContext: Pick<IRoomState, \"timelineRenderingType\" | \"room\">;\r\n}\r\n\r\nexport async function sendMessage(\r\n    message: string,\r\n    isHTML: boolean,\r\n    { roomContext, mxClient, ...params }: SendMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const { relation, replyToEvent } = params;\r\n    const { room } = roomContext;\r\n    const roomId = room?.roomId;\r\n\r\n    if (!roomId) {\r\n        return;\r\n    }\r\n\r\n    const posthogEvent: ComposerEvent = {\r\n        eventName: \"Composer\",\r\n        isEditing: false,\r\n        messageType: \"Text\",\r\n        isReply: Boolean(replyToEvent),\r\n        // TODO thread\r\n        inThread: relation?.rel_type === THREAD_RELATION_TYPE.name,\r\n    };\r\n\r\n    // TODO thread\r\n    /*if (posthogEvent.inThread) {\r\n        const threadRoot = room.findEventById(relation?.event_id);\r\n        posthogEvent.startsThread = threadRoot?.getThread()?.events.length === 1;\r\n    }*/\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>(posthogEvent);\r\n\r\n    let content: RoomMessageEventContent | null = null;\r\n\r\n    // Slash command handling here approximates what can be found in SendMessageComposer.sendMessage()\r\n    // but note that the /me and // special cases are handled by the call to createMessageContent\r\n    if (message.startsWith(\"/\") && !message.startsWith(\"//\") && !message.startsWith(EMOTE_PREFIX)) {\r\n        const { cmd, args } = getCommand(message);\r\n        if (cmd) {\r\n            const threadId = relation?.rel_type === THREAD_RELATION_TYPE.name ? relation?.event_id : null;\r\n            let commandSuccessful: boolean;\r\n            [content, commandSuccessful] = await runSlashCommand(mxClient, cmd, args, roomId, threadId ?? null);\r\n\r\n            if (!commandSuccessful) {\r\n                return; // errored\r\n            }\r\n\r\n            if (\r\n                content &&\r\n                (cmd.category === CommandCategories.messages || cmd.category === CommandCategories.effects)\r\n            ) {\r\n                attachRelation(content, relation);\r\n                if (replyToEvent) {\r\n                    addReplyToMessageContent(content, replyToEvent);\r\n                }\r\n            } else {\r\n                // instead of setting shouldSend to false as in SendMessageComposer, just return\r\n                return;\r\n            }\r\n        } else {\r\n            const sendAnyway = await shouldSendAnyway(message);\r\n            // re-focus the composer after QuestionDialog is closed\r\n            dis.dispatch({\r\n                action: Action.FocusAComposer,\r\n                context: roomContext.timelineRenderingType,\r\n            });\r\n            // if !sendAnyway bail to let the user edit the composer and try again\r\n            if (!sendAnyway) return;\r\n        }\r\n    }\r\n\r\n    // if content is null, we haven't done any slash command processing, so generate some content\r\n    content ??= await createMessageContent(message, isHTML, params);\r\n\r\n    // TODO replace emotion end of message ?\r\n\r\n    // TODO quick reaction\r\n\r\n    // don't bother sending an empty message\r\n    if (!content.body.trim()) {\r\n        return;\r\n    }\r\n\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        decorateStartSendingTime(content);\r\n    }\r\n\r\n    const threadId = relation?.event_id && relation?.rel_type === THREAD_RELATION_TYPE.name ? relation.event_id : null;\r\n\r\n    const prom = doMaybeLocalRoomAction(\r\n        roomId,\r\n        (actualRoomId: string) => mxClient.sendMessage(actualRoomId, threadId, content!),\r\n        mxClient,\r\n    );\r\n\r\n    if (replyToEvent) {\r\n        // Clear reply_to_event as we put the message into the queue\r\n        // if the send fails, retry will handle resending.\r\n        dis.dispatch({\r\n            action: \"reply_to_event\",\r\n            event: null,\r\n            context: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    dis.dispatch({ action: \"message_sent\" });\r\n    CHAT_EFFECTS.forEach((effect) => {\r\n        if (content && containsEmoji(content, effect.emojis)) {\r\n            // For initial threads launch, chat effects are disabled\r\n            // see #19731\r\n            const isNotThread = relation?.rel_type !== THREAD_RELATION_TYPE.name;\r\n            if (isNotThread) {\r\n                dis.dispatch({ action: `effects.${effect.command}` });\r\n            }\r\n        }\r\n    });\r\n    if (SettingsStore.getValue(\"Performance.addSendMessageTimingMetadata\")) {\r\n        prom.then((resp) => {\r\n            sendRoundTripMetric(mxClient, roomId, resp.event_id);\r\n        });\r\n    }\r\n\r\n    // TODO save history\r\n    // TODO save local state\r\n\r\n    //if (shouldSend && SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n    if (SettingsStore.getValue(\"scrollToBottomOnMessageSent\")) {\r\n        dis.dispatch({\r\n            action: \"scroll_to_bottom\",\r\n            timelineRenderingType: roomContext.timelineRenderingType,\r\n        });\r\n    }\r\n\r\n    return prom;\r\n}\r\n\r\ninterface EditMessageParams {\r\n    mxClient: MatrixClient;\r\n    roomContext: Pick<IRoomState, \"timelineRenderingType\">;\r\n    editorStateTransfer: EditorStateTransfer;\r\n}\r\n\r\nexport async function editMessage(\r\n    html: string,\r\n    { roomContext, mxClient, editorStateTransfer }: EditMessageParams,\r\n): Promise<ISendEventResponse | undefined> {\r\n    const editedEvent = editorStateTransfer.getEvent();\r\n\r\n    PosthogAnalytics.instance.trackEvent<ComposerEvent>({\r\n        eventName: \"Composer\",\r\n        isEditing: true,\r\n        messageType: \"Text\",\r\n        inThread: Boolean(editedEvent?.getThread()),\r\n        isReply: Boolean(editedEvent.replyEventId),\r\n    });\r\n\r\n    // TODO emoji\r\n    // Replace emoticon at the end of the message\r\n    /*    if (SettingsStore.getValue('MessageComposerInput.autoReplaceEmoji')) {\r\n        const caret = this.editorRef.current?.getCaret();\r\n        const position = this.model.positionForOffset(caret.offset, caret.atNodeEnd);\r\n        this.editorRef.current?.replaceEmoticon(position, REGEX_EMOTICON);\r\n    }*/\r\n    const editContent = await createMessageContent(html, true, { editedEvent });\r\n    const newContent = editContent[\"m.new_content\"]!;\r\n\r\n    const shouldSend = true;\r\n\r\n    if (newContent?.body === \"\") {\r\n        cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n        createRedactEventDialog({\r\n            mxEvent: editedEvent,\r\n            onCloseDialog: () => {\r\n                endEditing(roomContext);\r\n            },\r\n        });\r\n        return;\r\n    }\r\n\r\n    let response: Promise<ISendEventResponse> | undefined;\r\n\r\n    const roomId = editedEvent.getRoomId();\r\n\r\n    // If content is modified then send an updated event into the room\r\n    if (isContentModified(newContent, editorStateTransfer) && roomId) {\r\n        // TODO Slash Commands\r\n\r\n        if (shouldSend) {\r\n            cancelPreviousPendingEdit(mxClient, editorStateTransfer);\r\n\r\n            const event = editorStateTransfer.getEvent();\r\n            const threadId = event.threadRootId || null;\r\n\r\n            response = mxClient.sendMessage(roomId, threadId, editContent);\r\n            dis.dispatch({ action: \"message_sent\" });\r\n        }\r\n    }\r\n\r\n    endEditing(roomContext);\r\n    return response;\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RoomMessageEventContent, type RoomMessageTextEventContent } from \"matrix-js-sdk/src/types\";\r\n\r\nimport type EditorStateTransfer from \"../../../../../utils/EditorStateTransfer\";\r\n\r\nexport function isContentModified(\r\n    newContent: RoomMessageEventContent,\r\n    editorStateTransfer: EditorStateTransfer,\r\n): boolean {\r\n    // if nothing has changed then bail\r\n    const oldContent = editorStateTransfer.getEvent().getContent<RoomMessageEventContent>();\r\n    if (\r\n        oldContent[\"msgtype\"] === newContent[\"msgtype\"] &&\r\n        oldContent[\"body\"] === newContent[\"body\"] &&\r\n        (<RoomMessageTextEventContent>oldContent)[\"format\"] === (<RoomMessageTextEventContent>newContent)[\"format\"] &&\r\n        (<RoomMessageTextEventContent>oldContent)[\"formatted_body\"] ===\r\n            (<RoomMessageTextEventContent>newContent)[\"formatted_body\"]\r\n    ) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"names":["EditionButtons","onCancelClick","onSaveClick","isSaveDisabled","React","className","AccessibleButton","kind","onClick","_t","disabled","useInitialContent","editorStateTransfer","room","useScopedRoomContext","mxClient","useMatrixClientContext","useMemo","partCreator","CommandPartCreator","parts","hasEditorState","serializedParts","getSerializedParts","map","p","deserializePart","getEvent","getContent","format","_editorStateTransfer$","formatted_body","replace","getFormattedContent","parseEvent","shouldEscape","SettingsStore","getValue","reduce","content","part","text","parseEditorStateTransfer","Content","composerFunctions","ref","composerElement","roomContext","composerContext","useComposerContext","timeoutId","useRef","handler","useCallback","payload","_payload$context","current","context","TimelineRenderingType","Room","action","Action","FocusEditMessageComposer","focusComposer","ComposerInsert","timelineRenderingType","composerType","ComposerType","Edit","setSelection","selection","then","insertText","useDispatcher","defaultDispatcher","useWysiwygEditActionHandler","EditWysiwygComposer","_ref","props","_objectWithoutProperties","_excluded","defaultContextValue","getDefaultContextValue","initialContent","isReady","undefined","editMessage","endEditing","onChange","setIsSaveDisabled","useState","setContent","_content","_isSaveDisabled","async","useEditing","ComposerContext","Provider","value","WysiwygComposer","_extends","classNames","onSend","EMOTE_PREFIX","isMatrixEvent","e","MatrixEvent","createMessageContent","message","isHTML","relation","replyToEvent","editedEvent","isEditing","isEmote","startsWith","slice","length","body","richToPlain","document","DOMParser","parseFromString","Array","from","querySelectorAll","forEach","mention","getAttribute","replaceWith","innerText","innerHTML","href","permalinkParts","parsePermalink","isNotNull","roomIdOrAlias","convertPlainTextToBody","msgtype","MsgType","Emote","Text","isMarkdownEnabled","formattedBody","plainToRich","_objectSpread","attachRelation","rel_type","event_id","getId","addReplyToMessageContent","sendMessage","params","roomId","posthogEvent","eventName","messageType","isReply","Boolean","inThread","THREAD_RELATION_TYPE","name","PosthogAnalytics","instance","trackEvent","cmd","args","getCommand","threadId","commandSuccessful","runSlashCommand","category","CommandCategories","messages","effects","sendAnyway","shouldSendAnyway","dis","dispatch","FocusAComposer","trim","decorateStartSendingTime","prom","doMaybeLocalRoomAction","actualRoomId","event","CHAT_EFFECTS","effect","containsEmoji","emojis","command","resp","sendRoundTripMetric","html","getThread","replyEventId","editContent","newContent","cancelPreviousPendingEdit","createRedactEventDialog","mxEvent","onCloseDialog","response","getRoomId","oldContent","isContentModified","threadRootId"],"sourceRoot":""}