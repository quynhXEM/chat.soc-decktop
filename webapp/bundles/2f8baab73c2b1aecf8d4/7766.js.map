{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/7766.js","mappings":"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","sources":["webpack://soc-connect/./src/components/views/location/LiveDurationDropdown.tsx","webpack://soc-connect/./src/components/views/location/shareLocation.ts","webpack://soc-connect/./src/components/views/location/LocationPicker.tsx","webpack://soc-connect/./src/components/views/location/ShareDialogButtons.tsx","webpack://soc-connect/./src/components/views/location/ShareType.tsx","webpack://soc-connect/./src/components/views/location/EnableLiveShare.tsx","webpack://soc-connect/./src/components/views/location/LocationShareMenu.tsx","webpack://soc-connect/./src/components/views/location/LocationButton.tsx","webpack://soc-connect/./src/components/views/location/Marker.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type ReactElement } from \"react\";\r\n\r\nimport { formatDuration } from \"../../../DateUtils\";\r\nimport { _t } from \"../../../languageHandler\";\r\nimport Dropdown from \"../elements/Dropdown\";\r\nimport { type NonEmptyArray } from \"../../../@types/common\";\r\n\r\nconst DURATION_MS = {\r\n    fifteenMins: 900000,\r\n    oneHour: 3600000,\r\n    eightHours: 28800000,\r\n};\r\n\r\nexport const DEFAULT_DURATION_MS = DURATION_MS.fifteenMins;\r\n\r\ninterface Props {\r\n    timeout: number;\r\n    onChange: (timeout: number) => void;\r\n}\r\n\r\nconst getLabel = (durationMs: number): string => {\r\n    return _t(\"location_sharing|live_share_button\", { duration: formatDuration(durationMs) });\r\n};\r\n\r\nconst LiveDurationDropdown: React.FC<Props> = ({ timeout, onChange }) => {\r\n    const options = Object.values(DURATION_MS).map((duration) => ({\r\n        key: duration.toString(),\r\n        duration,\r\n        label: getLabel(duration),\r\n    }));\r\n\r\n    // timeout is not one of our default values\r\n    // eg it was set by another client\r\n    if (!Object.values(DURATION_MS).includes(timeout)) {\r\n        options.push({\r\n            key: timeout.toString(),\r\n            duration: timeout,\r\n            label: getLabel(timeout),\r\n        });\r\n    }\r\n\r\n    const onOptionChange = (key: string): void => {\r\n        // stringified value back to number\r\n        onChange(+key);\r\n    };\r\n\r\n    return (\r\n        <Dropdown\r\n            id=\"live-duration\"\r\n            data-testid=\"live-duration-dropdown\"\r\n            label={getLabel(timeout)}\r\n            value={timeout.toString()}\r\n            onOptionChange={onOptionChange}\r\n            className=\"mx_LiveDurationDropdown\"\r\n        >\r\n            {\r\n                options.map(({ key, label }) => (\r\n                    <div data-testid={`live-duration-option-${key}`} key={key}>\r\n                        {label}\r\n                    </div>\r\n                )) as NonEmptyArray<ReactElement & { key: string }>\r\n            }\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default LiveDurationDropdown;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport {\r\n    type MatrixClient,\r\n    type IEventRelation,\r\n    type MatrixError,\r\n    THREAD_RELATION_TYPE,\r\n    ContentHelpers,\r\n    LocationAssetType,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { type RoomMessageEventContent } from \"matrix-js-sdk/src/types\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport Modal from \"../../../Modal\";\r\nimport QuestionDialog, { type IQuestionDialogProps } from \"../dialogs/QuestionDialog\";\r\nimport SdkConfig from \"../../../SdkConfig\";\r\nimport { OwnBeaconStore } from \"../../../stores/OwnBeaconStore\";\r\nimport { doMaybeLocalRoomAction } from \"../../../utils/local-room\";\r\n\r\nexport enum LocationShareType {\r\n    Own = \"Own\",\r\n    Pin = \"Pin\",\r\n    Live = \"Live\",\r\n}\r\n\r\nexport type LocationShareProps = {\r\n    timeout?: number;\r\n    uri?: string;\r\n    timestamp?: number;\r\n};\r\n\r\n// default duration to 5min for now\r\nconst DEFAULT_LIVE_DURATION = 300000;\r\n\r\nexport type ShareLocationFn = (props: LocationShareProps) => Promise<void>;\r\n\r\nconst getPermissionsErrorParams = (\r\n    shareType: LocationShareType,\r\n): {\r\n    errorMessage: string;\r\n    modalParams: IQuestionDialogProps;\r\n} => {\r\n    const errorMessage =\r\n        shareType === LocationShareType.Live\r\n            ? \"Insufficient permissions to start sharing your live location\"\r\n            : \"Insufficient permissions to send your location\";\r\n\r\n    const modalParams = {\r\n        title: _t(\"location_sharing|error_no_perms_title\"),\r\n        description: _t(\"location_sharing|error_no_perms_description\"),\r\n        button: _t(\"action|ok\"),\r\n        hasCancelButton: false,\r\n        onFinished: () => {}, // NOOP\r\n    };\r\n    return { modalParams, errorMessage };\r\n};\r\n\r\nconst getDefaultErrorParams = (\r\n    shareType: LocationShareType,\r\n    openMenu: () => void,\r\n): {\r\n    errorMessage: string;\r\n    modalParams: IQuestionDialogProps;\r\n} => {\r\n    const errorMessage =\r\n        shareType === LocationShareType.Live\r\n            ? \"We couldn't start sharing your live location\"\r\n            : \"We couldn't send your location\";\r\n    const modalParams = {\r\n        title: _t(\"location_sharing|error_send_title\"),\r\n        description: _t(\"location_sharing|error_send_description\", {\r\n            brand: SdkConfig.get().brand,\r\n        }),\r\n        button: _t(\"action|try_again\"),\r\n        cancelButton: _t(\"action|cancel\"),\r\n        onFinished: (tryAgain: boolean) => {\r\n            if (tryAgain) {\r\n                openMenu();\r\n            }\r\n        },\r\n    };\r\n    return { modalParams, errorMessage };\r\n};\r\n\r\nconst handleShareError = (error: unknown, openMenu: () => void, shareType: LocationShareType): void => {\r\n    const { modalParams, errorMessage } =\r\n        (error as MatrixError).errcode === \"M_FORBIDDEN\"\r\n            ? getPermissionsErrorParams(shareType)\r\n            : getDefaultErrorParams(shareType, openMenu);\r\n\r\n    logger.error(errorMessage, error);\r\n\r\n    Modal.createDialog(QuestionDialog, modalParams);\r\n};\r\n\r\nexport const shareLiveLocation =\r\n    (client: MatrixClient, roomId: string, displayName: string, openMenu: () => void): ShareLocationFn =>\r\n    async ({ timeout }): Promise<void> => {\r\n        const description = _t(\"location_sharing|live_description\", { displayName });\r\n        try {\r\n            await OwnBeaconStore.instance.createLiveBeacon(\r\n                roomId,\r\n                ContentHelpers.makeBeaconInfoContent(\r\n                    timeout ?? DEFAULT_LIVE_DURATION,\r\n                    true /* isLive */,\r\n                    description,\r\n                    LocationAssetType.Self,\r\n                ),\r\n            );\r\n        } catch (error) {\r\n            handleShareError(error, openMenu, LocationShareType.Live);\r\n        }\r\n    };\r\n\r\nexport const shareLocation =\r\n    (\r\n        client: MatrixClient,\r\n        roomId: string,\r\n        shareType: LocationShareType,\r\n        relation: IEventRelation | undefined,\r\n        openMenu: () => void,\r\n    ): ShareLocationFn =>\r\n    async ({ uri, timestamp }): Promise<void> => {\r\n        if (!uri) return;\r\n        try {\r\n            const threadId = (relation?.rel_type === THREAD_RELATION_TYPE.name && relation?.event_id) || null;\r\n            const assetType = shareType === LocationShareType.Pin ? LocationAssetType.Pin : LocationAssetType.Self;\r\n            const content = ContentHelpers.makeLocationContent(\r\n                undefined,\r\n                uri,\r\n                timestamp,\r\n                undefined,\r\n                assetType,\r\n            ) as RoomMessageEventContent;\r\n            await doMaybeLocalRoomAction(\r\n                roomId,\r\n                (actualRoomId: string) => client.sendMessage(actualRoomId, threadId, content),\r\n                client,\r\n            );\r\n        } catch (error) {\r\n            handleShareError(error, openMenu, shareType);\r\n        }\r\n    };\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type SyntheticEvent } from \"react\";\r\nimport maplibregl, { type MapMouseEvent } from \"maplibre-gl\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { type RoomMember, ClientEvent, type IClientWellKnown } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\r\nimport Modal from \"../../../Modal\";\r\nimport { tileServerFromWellKnown } from \"../../../utils/WellKnownUtils\";\r\nimport { type GenericPosition, genericPositionFromGeolocation, getGeoUri } from \"../../../utils/beacon\";\r\nimport { LocationShareError, findMapStyleUrl, positionFailureMessage } from \"../../../utils/location\";\r\nimport ErrorDialog from \"../dialogs/ErrorDialog\";\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\nimport { MapError } from \"./MapError\";\r\nimport LiveDurationDropdown, { DEFAULT_DURATION_MS } from \"./LiveDurationDropdown\";\r\nimport { LocationShareType, type ShareLocationFn } from \"./shareLocation\";\r\nimport Marker from \"./Marker\";\r\n\r\nexport interface ILocationPickerProps {\r\n    sender: RoomMember;\r\n    shareType: LocationShareType;\r\n    onChoose: ShareLocationFn;\r\n    onFinished(ev?: SyntheticEvent): void;\r\n}\r\n\r\ninterface IState {\r\n    timeout: number;\r\n    position?: GenericPosition;\r\n    error?: LocationShareError;\r\n}\r\n\r\nconst isSharingOwnLocation = (shareType: LocationShareType): boolean =>\r\n    shareType === LocationShareType.Own || shareType === LocationShareType.Live;\r\n\r\nclass LocationPicker extends React.Component<ILocationPickerProps, IState> {\r\n    public static contextType = MatrixClientContext;\r\n    declare public context: React.ContextType<typeof MatrixClientContext>;\r\n    private map?: maplibregl.Map;\r\n    private geolocate?: maplibregl.GeolocateControl;\r\n    private marker?: maplibregl.Marker;\r\n\r\n    public constructor(props: ILocationPickerProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            position: undefined,\r\n            timeout: DEFAULT_DURATION_MS,\r\n            error: undefined,\r\n        };\r\n    }\r\n\r\n    private getMarkerId = (): string => {\r\n        return \"mx_MLocationPicker_marker\";\r\n    };\r\n\r\n    public componentDidMount(): void {\r\n        this.context.on(ClientEvent.ClientWellKnown, this.updateStyleUrl);\r\n\r\n        try {\r\n            this.map = new maplibregl.Map({\r\n                container: \"mx_LocationPicker_map\",\r\n                style: findMapStyleUrl(this.context),\r\n                center: [0, 0],\r\n                zoom: 1,\r\n            });\r\n\r\n            // Add geolocate control to the map.\r\n            this.geolocate = new maplibregl.GeolocateControl({\r\n                positionOptions: {\r\n                    enableHighAccuracy: true,\r\n                },\r\n                trackUserLocation: false,\r\n            });\r\n\r\n            this.map.addControl(this.geolocate);\r\n\r\n            this.map.on(\"error\", (e) => {\r\n                logger.error(\r\n                    \"Failed to load map: check map_style_url in config.json has a valid URL and API key\",\r\n                    e.error,\r\n                );\r\n                this.setState({ error: LocationShareError.MapStyleUrlNotReachable });\r\n            });\r\n\r\n            this.map.on(\"load\", () => {\r\n                this.geolocate?.trigger();\r\n            });\r\n\r\n            this.geolocate.on(\"error\", this.onGeolocateError);\r\n\r\n            if (isSharingOwnLocation(this.props.shareType)) {\r\n                this.geolocate.on(\"geolocate\", this.onGeolocate);\r\n            }\r\n\r\n            if (this.props.shareType === LocationShareType.Pin) {\r\n                const navigationControl = new maplibregl.NavigationControl({\r\n                    showCompass: false,\r\n                    showZoom: true,\r\n                });\r\n                this.map.addControl(navigationControl, \"bottom-right\");\r\n                this.map.on(\"click\", this.onClick);\r\n            }\r\n        } catch (e) {\r\n            logger.error(\"Failed to render map\", e);\r\n            const errorMessage = (e as Error)?.message;\r\n            let errorType;\r\n            if (errorMessage === LocationShareError.MapStyleUrlNotConfigured)\r\n                errorType = LocationShareError.MapStyleUrlNotConfigured;\r\n            else if (errorMessage.includes(\"Failed to initialize WebGL\"))\r\n                errorType = LocationShareError.WebGLNotEnabled;\r\n            else errorType = LocationShareError.Default;\r\n            this.setState({ error: errorType });\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.geolocate?.off(\"error\", this.onGeolocateError);\r\n        this.geolocate?.off(\"geolocate\", this.onGeolocate);\r\n        this.map?.off(\"click\", this.onClick);\r\n        this.context.off(ClientEvent.ClientWellKnown, this.updateStyleUrl);\r\n    }\r\n\r\n    private addMarkerToMap = (): void => {\r\n        this.marker = new maplibregl.Marker({\r\n            element: document.getElementById(this.getMarkerId()) ?? undefined,\r\n            anchor: \"bottom\",\r\n            offset: [0, -1],\r\n        })\r\n            .setLngLat(new maplibregl.LngLat(0, 0))\r\n            .addTo(this.map!);\r\n    };\r\n\r\n    private updateStyleUrl = (clientWellKnown: IClientWellKnown): void => {\r\n        const style = tileServerFromWellKnown(clientWellKnown)?.[\"map_style_url\"];\r\n        if (style) {\r\n            this.map?.setStyle(style);\r\n        }\r\n    };\r\n\r\n    private onGeolocate = (position: GeolocationPosition): void => {\r\n        if (!this.marker) {\r\n            this.addMarkerToMap();\r\n        }\r\n        this.setState({ position: genericPositionFromGeolocation(position) });\r\n        this.marker?.setLngLat(new maplibregl.LngLat(position.coords.longitude, position.coords.latitude));\r\n    };\r\n\r\n    private onClick = (event: MapMouseEvent): void => {\r\n        if (!this.marker) {\r\n            this.addMarkerToMap();\r\n        }\r\n        this.marker?.setLngLat(event.lngLat);\r\n        this.setState({\r\n            position: {\r\n                timestamp: Date.now(),\r\n                latitude: event.lngLat.lat,\r\n                longitude: event.lngLat.lng,\r\n            },\r\n        });\r\n    };\r\n\r\n    private onGeolocateError = (e: GeolocationPositionError): void => {\r\n        logger.error(\"Could not fetch location\", e);\r\n        // close the dialog and show an error when trying to share own location\r\n        // pin drop location without permissions is ok\r\n        if (isSharingOwnLocation(this.props.shareType)) {\r\n            this.props.onFinished();\r\n            Modal.createDialog(ErrorDialog, {\r\n                title: _t(\"location_sharing|error_fetch_location\"),\r\n                description: positionFailureMessage(e.code),\r\n            });\r\n        }\r\n\r\n        if (this.geolocate) {\r\n            this.map?.removeControl(this.geolocate);\r\n        }\r\n    };\r\n\r\n    private onTimeoutChange = (timeout: number): void => {\r\n        this.setState({ timeout });\r\n    };\r\n\r\n    private onOk = (): void => {\r\n        const { timeout, position } = this.state;\r\n\r\n        this.props.onChoose(\r\n            position\r\n                ? { uri: getGeoUri(position), timestamp: position.timestamp, timeout }\r\n                : {\r\n                      timeout,\r\n                  },\r\n        );\r\n        this.props.onFinished();\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"mx_LocationPicker mx_LocationPicker_hasError\">\r\n                    <MapError error={this.state.error} onFinished={this.props.onFinished} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"mx_LocationPicker\">\r\n                <div id=\"mx_LocationPicker_map\" />\r\n\r\n                {this.props.shareType === LocationShareType.Pin && (\r\n                    <div className=\"mx_LocationPicker_pinText\">\r\n                        <span>\r\n                            {this.state.position\r\n                                ? _t(\"location_sharing|click_move_pin\")\r\n                                : _t(\"location_sharing|click_drop_pin\")}\r\n                        </span>\r\n                    </div>\r\n                )}\r\n                <div className=\"mx_LocationPicker_footer\">\r\n                    <form onSubmit={this.onOk}>\r\n                        {this.props.shareType === LocationShareType.Live && (\r\n                            <LiveDurationDropdown onChange={this.onTimeoutChange} timeout={this.state.timeout} />\r\n                        )}\r\n                        <AccessibleButton\r\n                            data-testid=\"location-picker-submit-button\"\r\n                            type=\"submit\"\r\n                            element=\"button\"\r\n                            kind=\"primary\"\r\n                            className=\"mx_LocationPicker_submitButton\"\r\n                            disabled={!this.state.position}\r\n                            onClick={this.onOk}\r\n                        >\r\n                            {_t(\"location_sharing|share_button\")}\r\n                        </AccessibleButton>\r\n                    </form>\r\n                </div>\r\n                <div id={this.getMarkerId()}>\r\n                    {/*\r\n                    maplibregl hijacks the div above to style the marker\r\n                    it must be in the dom when the map is initialised\r\n                    and keep a consistent class\r\n                    we want to hide the marker until it is set in the case of pin drop\r\n                    so hide the internal visible elements\r\n                    */}\r\n\r\n                    {!!this.marker && (\r\n                        <Marker\r\n                            roomMember={isSharingOwnLocation(this.props.shareType) ? this.props.sender : undefined}\r\n                            useMemberColor={this.props.shareType === LocationShareType.Live}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LocationPicker;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React from \"react\";\r\nimport CloseIcon from \"@vector-im/compound-design-tokens/assets/web/icons/close\";\r\nimport BackIcon from \"@vector-im/compound-design-tokens/assets/web/icons/chevron-left\";\r\n\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\nimport { _t } from \"../../../languageHandler\";\r\n\r\ninterface Props {\r\n    onCancel: () => void;\r\n    onBack: () => void;\r\n    displayBack?: boolean;\r\n}\r\n\r\nconst ShareDialogButtons: React.FC<Props> = ({ onBack, onCancel, displayBack }) => {\r\n    return (\r\n        <div className=\"mx_ShareDialogButtons\">\r\n            {displayBack && (\r\n                <AccessibleButton\r\n                    className=\"mx_ShareDialogButtons_button left\"\r\n                    data-testid=\"share-dialog-buttons-back\"\r\n                    aria-label={_t(\"action|back\")}\r\n                    onClick={onBack}\r\n                    element=\"button\"\r\n                >\r\n                    <BackIcon className=\"mx_ShareDialogButtons_button-icon\" />\r\n                </AccessibleButton>\r\n            )}\r\n            <AccessibleButton\r\n                className=\"mx_ShareDialogButtons_button right\"\r\n                data-testid=\"share-dialog-buttons-cancel\"\r\n                aria-label={_t(\"action|close\")}\r\n                onClick={onCancel}\r\n                element=\"button\"\r\n            >\r\n                <CloseIcon className=\"mx_ShareDialogButtons_button-icon\" />\r\n            </AccessibleButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShareDialogButtons;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type HTMLAttributes, useContext } from \"react\";\r\nimport LocationIcon from \"@vector-im/compound-design-tokens/assets/web/icons/location-pin-solid\";\r\n\r\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\r\nimport { _t } from \"../../../languageHandler\";\r\nimport { OwnProfileStore } from \"../../../stores/OwnProfileStore\";\r\nimport BaseAvatar from \"../avatars/BaseAvatar\";\r\nimport AccessibleButton, { type ButtonEvent } from \"../elements/AccessibleButton\";\r\nimport Heading from \"../typography/Heading\";\r\nimport { LocationShareType } from \"./shareLocation\";\r\nimport StyledLiveBeaconIcon from \"../beacon/StyledLiveBeaconIcon\";\r\n\r\nconst UserAvatar: React.FC = () => {\r\n    const matrixClient = useContext(MatrixClientContext);\r\n    const userId = matrixClient.getSafeUserId();\r\n    const displayName = OwnProfileStore.instance.displayName ?? undefined;\r\n    // 40 - 2px border\r\n    const avatarSize = \"36px\";\r\n    const avatarUrl = OwnProfileStore.instance.getHttpAvatarUrl(parseInt(avatarSize, 10)) ?? undefined;\r\n\r\n    return (\r\n        <div className={`mx_ShareType_option-icon ${LocationShareType.Own}`}>\r\n            <BaseAvatar\r\n                idName={userId}\r\n                name={displayName}\r\n                url={avatarUrl}\r\n                size={avatarSize}\r\n                className=\"mx_UserMenu_userAvatar_BaseAvatar\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ShareTypeOptionProps = HTMLAttributes<Element> & {\r\n    label: string;\r\n    shareType: LocationShareType;\r\n    onClick?: ((e: ButtonEvent) => void | Promise<void>) | null;\r\n};\r\nconst ShareTypeOption: React.FC<ShareTypeOptionProps> = ({ onClick, label, shareType, ...rest }) => (\r\n    <AccessibleButton element=\"button\" className=\"mx_ShareType_option\" onClick={onClick ?? null} {...rest}>\r\n        {shareType === LocationShareType.Own && <UserAvatar />}\r\n        {shareType === LocationShareType.Pin && (\r\n            <LocationIcon className={`mx_ShareType_option-icon ${LocationShareType.Pin}`} />\r\n        )}\r\n        {shareType === LocationShareType.Live && (\r\n            <StyledLiveBeaconIcon className={`mx_ShareType_option-icon ${LocationShareType.Live}`} />\r\n        )}\r\n\r\n        {label}\r\n    </AccessibleButton>\r\n);\r\n\r\ninterface Props {\r\n    setShareType: (shareType: LocationShareType) => void;\r\n    enabledShareTypes: LocationShareType[];\r\n}\r\nconst ShareType: React.FC<Props> = ({ setShareType, enabledShareTypes }) => {\r\n    const labels = {\r\n        [LocationShareType.Own]: _t(\"location_sharing|share_type_own\"),\r\n        [LocationShareType.Live]: _t(\"location_sharing|share_type_live\"),\r\n        [LocationShareType.Pin]: _t(\"location_sharing|share_type_pin\"),\r\n    };\r\n    return (\r\n        <div className=\"mx_ShareType\">\r\n            <LocationIcon className=\"mx_ShareType_badge\" />\r\n            <Heading className=\"mx_ShareType_heading\" size=\"3\">\r\n                {_t(\"location_sharing|share_type_prompt\")}\r\n            </Heading>\r\n            <div className=\"mx_ShareType_wrapper_options\">\r\n                {enabledShareTypes.map((type) => (\r\n                    <ShareTypeOption\r\n                        key={type}\r\n                        onClick={() => setShareType(type)}\r\n                        label={labels[type]}\r\n                        shareType={type}\r\n                        data-testid={`share-location-option-${type}`}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShareType;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport StyledLiveBeaconIcon from \"../beacon/StyledLiveBeaconIcon\";\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\nimport LabelledToggleSwitch from \"../elements/LabelledToggleSwitch\";\r\nimport Heading from \"../typography/Heading\";\r\n\r\ninterface Props {\r\n    onSubmit: () => void;\r\n}\r\n\r\nexport const EnableLiveShare: React.FC<Props> = ({ onSubmit }) => {\r\n    const [isEnabled, setEnabled] = useState(false);\r\n    return (\r\n        <div data-testid=\"location-picker-enable-live-share\" className=\"mx_EnableLiveShare\">\r\n            <StyledLiveBeaconIcon className=\"mx_EnableLiveShare_icon\" />\r\n            <Heading className=\"mx_EnableLiveShare_heading\" size=\"3\">\r\n                {_t(\"location_sharing|live_enable_heading\")}\r\n            </Heading>\r\n            <p className=\"mx_EnableLiveShare_description\">{_t(\"location_sharing|live_enable_description\")}</p>\r\n            <LabelledToggleSwitch\r\n                data-testid=\"enable-live-share-toggle\"\r\n                value={isEnabled}\r\n                onChange={setEnabled}\r\n                label={_t(\"location_sharing|live_toggle_label\")}\r\n            />\r\n            <AccessibleButton\r\n                data-testid=\"enable-live-share-submit\"\r\n                className=\"mx_EnableLiveShare_button\"\r\n                element=\"button\"\r\n                kind=\"primary\"\r\n                onClick={onSubmit}\r\n                disabled={!isEnabled}\r\n            >\r\n                {_t(\"action|ok\")}\r\n            </AccessibleButton>\r\n        </div>\r\n    );\r\n};\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type SyntheticEvent, useContext, useState } from \"react\";\r\nimport { type Room, type IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\r\nimport ContextMenu, { type MenuProps } from \"../../structures/ContextMenu\";\r\nimport LocationPicker, { type ILocationPickerProps } from \"./LocationPicker\";\r\nimport { shareLiveLocation, shareLocation, LocationShareType } from \"./shareLocation\";\r\nimport SettingsStore from \"../../../settings/SettingsStore\";\r\nimport ShareDialogButtons from \"./ShareDialogButtons\";\r\nimport ShareType from \"./ShareType\";\r\nimport { OwnProfileStore } from \"../../../stores/OwnProfileStore\";\r\nimport { EnableLiveShare } from \"./EnableLiveShare\";\r\nimport { useFeatureEnabled } from \"../../../hooks/useSettings\";\r\nimport { SettingLevel } from \"../../../settings/SettingLevel\";\r\n\r\ntype Props = Omit<ILocationPickerProps, \"onChoose\" | \"shareType\"> & {\r\n    onFinished: (ev?: SyntheticEvent) => void;\r\n    menuPosition: MenuProps;\r\n    openMenu: () => void;\r\n    roomId: Room[\"roomId\"];\r\n    relation?: IEventRelation;\r\n};\r\n\r\nconst getEnabledShareTypes = (relation?: IEventRelation): LocationShareType[] => {\r\n    const enabledShareTypes = [LocationShareType.Own];\r\n\r\n    // live locations cannot have a relation\r\n    // hide the option when composer has a relation\r\n    if (!relation) {\r\n        enabledShareTypes.push(LocationShareType.Live);\r\n    }\r\n\r\n    enabledShareTypes.push(LocationShareType.Pin);\r\n\r\n    return enabledShareTypes;\r\n};\r\n\r\nconst LocationShareMenu: React.FC<Props> = ({ menuPosition, onFinished, sender, roomId, openMenu, relation }) => {\r\n    const matrixClient = useContext(MatrixClientContext);\r\n    const enabledShareTypes = getEnabledShareTypes(relation);\r\n    const isLiveShareEnabled = useFeatureEnabled(\"feature_location_share_live\");\r\n\r\n    const multipleShareTypesEnabled = enabledShareTypes.length > 1;\r\n\r\n    const [shareType, setShareType] = useState<LocationShareType | undefined>(\r\n        multipleShareTypesEnabled ? undefined : LocationShareType.Own,\r\n    );\r\n\r\n    const displayName = OwnProfileStore.instance.displayName;\r\n    const userId = matrixClient.getSafeUserId();\r\n\r\n    const onLocationSubmit =\r\n        shareType === LocationShareType.Live\r\n            ? shareLiveLocation(matrixClient, roomId, displayName || userId, openMenu)\r\n            : shareLocation(matrixClient, roomId, shareType ?? LocationShareType.Own, relation, openMenu);\r\n\r\n    const onLiveShareEnableSubmit = (): void => {\r\n        SettingsStore.setValue(\"feature_location_share_live\", null, SettingLevel.DEVICE, true);\r\n    };\r\n\r\n    const shouldAdvertiseLiveLabsFlag = shareType === LocationShareType.Live && !isLiveShareEnabled;\r\n\r\n    return (\r\n        <ContextMenu {...menuPosition} onFinished={onFinished} managed={false}>\r\n            <div className=\"mx_LocationShareMenu\">\r\n                {shouldAdvertiseLiveLabsFlag && <EnableLiveShare onSubmit={onLiveShareEnableSubmit} />}\r\n                {!shouldAdvertiseLiveLabsFlag && !!shareType && (\r\n                    <LocationPicker\r\n                        sender={sender}\r\n                        shareType={shareType}\r\n                        onChoose={onLocationSubmit}\r\n                        onFinished={onFinished}\r\n                    />\r\n                )}\r\n                {!shareType && <ShareType setShareType={setShareType} enabledShareTypes={enabledShareTypes} />}\r\n                <ShareDialogButtons\r\n                    displayBack={!!shareType && multipleShareTypesEnabled}\r\n                    onBack={() => setShareType(undefined)}\r\n                    onCancel={onFinished}\r\n                />\r\n            </div>\r\n        </ContextMenu>\r\n    );\r\n};\r\n\r\nexport default LocationShareMenu;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type ReactNode, type SyntheticEvent, useContext } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { type RoomMember, type IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport { CollapsibleButton } from \"../rooms/CollapsibleButton\";\r\nimport { aboveLeftOf, useContextMenu, type MenuProps } from \"../../structures/ContextMenu\";\r\nimport { OverflowMenuContext } from \"../rooms/MessageComposerButtons\";\r\nimport LocationShareMenu from \"./LocationShareMenu\";\r\n\r\nexport interface IProps {\r\n    roomId: string;\r\n    sender: RoomMember;\r\n    menuPosition?: MenuProps;\r\n    relation?: IEventRelation;\r\n}\r\n\r\nconst LocationButton: React.FC<IProps> = ({ roomId, sender, menuPosition, relation }) => {\r\n    const overflowMenuCloser = useContext(OverflowMenuContext);\r\n    const [menuDisplayed, button, openMenu, closeMenu] = useContextMenu();\r\n\r\n    const _onFinished = (ev?: SyntheticEvent): void => {\r\n        closeMenu(ev);\r\n        overflowMenuCloser?.();\r\n    };\r\n\r\n    let contextMenu: ReactNode = null;\r\n    if (menuDisplayed) {\r\n        const position = menuPosition ?? (button.current && aboveLeftOf(button.current.getBoundingClientRect())) ?? {};\r\n\r\n        contextMenu = (\r\n            <LocationShareMenu\r\n                menuPosition={position}\r\n                onFinished={_onFinished}\r\n                sender={sender}\r\n                roomId={roomId}\r\n                openMenu={openMenu}\r\n                relation={relation}\r\n            />\r\n        );\r\n    }\r\n\r\n    const className = classNames(\"mx_MessageComposer_button\", {\r\n        mx_MessageComposer_button_highlight: menuDisplayed,\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CollapsibleButton\r\n                className={className}\r\n                iconClassName=\"mx_MessageComposer_location\"\r\n                onClick={openMenu}\r\n                title={_t(\"common|location\")}\r\n                inputRef={button}\r\n            />\r\n\r\n            {contextMenu}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default LocationButton;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX, type ReactNode, type Ref, useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { type RoomMember } from \"matrix-js-sdk/src/matrix\";\r\nimport LocationIcon from \"@vector-im/compound-design-tokens/assets/web/icons/location-pin-solid\";\r\n\r\nimport { getUserNameColorClass } from \"../../../utils/FormattingUtils\";\r\nimport MemberAvatar from \"../avatars/MemberAvatar\";\r\n\r\ninterface Props {\r\n    id?: string;\r\n    // renders MemberAvatar when provided\r\n    roomMember?: RoomMember;\r\n    // use member text color as background\r\n    useMemberColor?: boolean;\r\n    tooltip?: ReactNode;\r\n    ref?: Ref<HTMLDivElement>;\r\n}\r\n\r\n/**\r\n * Wrap with tooltip handlers when\r\n * tooltip is truthy\r\n */\r\nconst OptionalTooltip: React.FC<{\r\n    tooltip?: ReactNode;\r\n    children: ReactNode;\r\n}> = ({ tooltip, children }) => {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    if (!tooltip) {\r\n        return <>{children}</>;\r\n    }\r\n\r\n    const show = (): void => setIsVisible(true);\r\n    const hide = (): void => setIsVisible(false);\r\n    const toggleVisibility = (e: React.MouseEvent<HTMLDivElement, MouseEvent>): void => {\r\n        // stop map from zooming in on click\r\n        e.stopPropagation();\r\n        setIsVisible(!isVisible);\r\n    };\r\n\r\n    return (\r\n        <div onMouseEnter={show} onClick={toggleVisibility} onMouseLeave={hide}>\r\n            {children}\r\n            {isVisible && tooltip}\r\n        </div>\r\n    );\r\n};\r\n\r\n/**\r\n * Generic location marker\r\n */\r\nconst Marker = ({ id, roomMember, useMemberColor, tooltip, ref }: Props): JSX.Element => {\r\n    const memberColorClass = useMemberColor && roomMember ? getUserNameColorClass(roomMember.userId) : \"\";\r\n    return (\r\n        <div\r\n            ref={ref}\r\n            id={id}\r\n            className={classNames(\"mx_Marker\", memberColorClass, {\r\n                mx_Marker_defaultColor: !memberColorClass,\r\n            })}\r\n        >\r\n            <OptionalTooltip tooltip={tooltip}>\r\n                <div className=\"mx_Marker_border\">\r\n                    {roomMember ? (\r\n                        <MemberAvatar\r\n                            member={roomMember}\r\n                            size=\"36px\"\r\n                            viewUserOnClick={false}\r\n                            // no mxid on hover when marker has tooltip\r\n                            hideTitle={!!tooltip}\r\n                        />\r\n                    ) : (\r\n                        <LocationIcon className=\"mx_Marker_icon\" />\r\n                    )}\r\n                </div>\r\n            </OptionalTooltip>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Marker;\r\n"],"names":["DURATION_MS","fifteenMins","oneHour","eightHours","DEFAULT_DURATION_MS","getLabel","durationMs","_t","duration","formatDuration","LiveDurationDropdown","timeout","onChange","options","Object","values","map","key","toString","label","includes","push","React","Dropdown","id","value","onOptionChange","className","LocationShareType","handleShareError","error","openMenu","shareType","modalParams","errorMessage","errcode","Live","title","description","button","hasCancelButton","onFinished","getPermissionsErrorParams","getDefaultErrorParams","brand","SdkConfig","get","cancelButton","tryAgain","logger","Modal","createDialog","QuestionDialog","isSharingOwnLocation","Own","LocationPicker","constructor","props","super","_defineProperty","_document$getElementB","this","marker","maplibregl","element","document","getElementById","getMarkerId","undefined","anchor","offset","setLngLat","addTo","clientWellKnown","_tileServerFromWellKn","style","tileServerFromWellKnown","_this$map","setStyle","position","_this$marker","addMarkerToMap","setState","genericPositionFromGeolocation","coords","longitude","latitude","event","_this$marker2","lngLat","timestamp","Date","now","lat","lng","e","_this$map2","ErrorDialog","positionFailureMessage","code","geolocate","removeControl","state","onChoose","uri","getGeoUri","componentDidMount","context","on","ClientEvent","ClientWellKnown","updateStyleUrl","container","findMapStyleUrl","center","zoom","positionOptions","enableHighAccuracy","trackUserLocation","addControl","LocationShareError","MapStyleUrlNotReachable","_this$geolocate","trigger","onGeolocateError","onGeolocate","Pin","navigationControl","showCompass","showZoom","onClick","message","errorType","MapStyleUrlNotConfigured","WebGLNotEnabled","Default","componentWillUnmount","_this$geolocate2","_this$geolocate3","_this$map3","off","render","MapError","onSubmit","onOk","onTimeoutChange","AccessibleButton","type","kind","disabled","Marker","roomMember","sender","useMemberColor","MatrixClientContext","ShareDialogButtons","onBack","onCancel","displayBack","BackIcon","CloseIcon","UserAvatar","_OwnProfileStore$inst","_OwnProfileStore$inst2","userId","useContext","getSafeUserId","displayName","OwnProfileStore","instance","avatarSize","avatarUrl","getHttpAvatarUrl","parseInt","BaseAvatar","idName","name","url","size","ShareTypeOption","_ref","rest","_objectWithoutProperties","_excluded","_extends","LocationIcon","StyledLiveBeaconIcon","ShareType","setShareType","enabledShareTypes","labels","Heading","EnableLiveShare","isEnabled","setEnabled","useState","LabelledToggleSwitch","LocationShareMenu","menuPosition","roomId","relation","matrixClient","getEnabledShareTypes","isLiveShareEnabled","useFeatureEnabled","multipleShareTypesEnabled","length","onLocationSubmit","shareLiveLocation","client","async","OwnBeaconStore","createLiveBeacon","ContentHelpers","LocationAssetType","Self","shareLocation","threadId","rel_type","THREAD_RELATION_TYPE","event_id","assetType","content","doMaybeLocalRoomAction","actualRoomId","sendMessage","shouldAdvertiseLiveLabsFlag","ContextMenu","managed","onLiveShareEnableSubmit","SettingsStore","setValue","SettingLevel","DEVICE","LocationButton","overflowMenuCloser","OverflowMenuContext","menuDisplayed","closeMenu","useContextMenu","_onFinished","ev","contextMenu","current","aboveLeftOf","getBoundingClientRect","classNames","mx_MessageComposer_button_highlight","CollapsibleButton","iconClassName","inputRef","OptionalTooltip","tooltip","children","isVisible","setIsVisible","onMouseEnter","show","stopPropagation","onMouseLeave","hide","ref","memberColorClass","getUserNameColorClass","mx_Marker_defaultColor","MemberAvatar","member","viewUserOnClick","hideTitle"],"sourceRoot":""}