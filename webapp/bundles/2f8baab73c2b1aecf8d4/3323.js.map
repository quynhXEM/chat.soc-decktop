{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/3323.js","mappings":"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","sources":["webpack://soc-connect/./src/components/views/rooms/CollapsibleButton.tsx","webpack://soc-connect/./src/components/views/rooms/EmojiButton.tsx","webpack://soc-connect/./src/components/views/rooms/MessageComposerButtons.tsx","webpack://soc-connect/./src/stores/OwnProfileStore.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type RefObject, useContext } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport AccessibleButton, { type ButtonProps } from \"../elements/AccessibleButton\";\r\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\r\nimport { IconizedContextMenuOption } from \"../context_menus/IconizedContextMenu\";\r\n\r\ninterface Props extends Omit<ButtonProps<\"div\">, \"element\"> {\r\n    inputRef?: RefObject<HTMLElement | null>;\r\n    title: string;\r\n    iconClassName: string;\r\n}\r\n\r\nexport const CollapsibleButton: React.FC<Props> = ({\r\n    title,\r\n    children,\r\n    className,\r\n    iconClassName,\r\n    inputRef,\r\n    ...props\r\n}) => {\r\n    const inOverflowMenu = !!useContext(OverflowMenuContext);\r\n    if (inOverflowMenu) {\r\n        return <IconizedContextMenuOption {...props} iconClassName={iconClassName} label={title} inputRef={inputRef} />;\r\n    }\r\n\r\n    return (\r\n        <AccessibleButton {...props} title={title} className={classNames(className, iconClassName)} ref={inputRef}>\r\n            {children}\r\n        </AccessibleButton>\r\n    );\r\n};\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport classNames from \"classnames\";\r\nimport React, { type JSX, useContext } from \"react\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport ContextMenu, { aboveLeftOf, type MenuProps, useContextMenu } from \"../../structures/ContextMenu\";\r\nimport EmojiPicker from \"../emojipicker/EmojiPicker\";\r\nimport { CollapsibleButton } from \"./CollapsibleButton\";\r\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\r\n\r\ninterface IEmojiButtonProps {\r\n    addEmoji: (unicode: string) => boolean;\r\n    menuPosition?: MenuProps;\r\n    className?: string;\r\n}\r\n\r\nexport function EmojiButton({ addEmoji, menuPosition, className }: IEmojiButtonProps): JSX.Element {\r\n    const overflowMenuCloser = useContext(OverflowMenuContext);\r\n    const [menuDisplayed, button, openMenu, closeMenu] = useContextMenu();\r\n\r\n    let contextMenu: React.ReactElement | null = null;\r\n    if (menuDisplayed && button.current) {\r\n        const position = menuPosition ?? aboveLeftOf(button.current.getBoundingClientRect());\r\n        const onFinished = (): void => {\r\n            closeMenu();\r\n            overflowMenuCloser?.();\r\n        };\r\n\r\n        contextMenu = (\r\n            <ContextMenu {...position} onFinished={onFinished} managed={false}>\r\n                <EmojiPicker onChoose={addEmoji} onFinished={onFinished} />\r\n            </ContextMenu>\r\n        );\r\n    }\r\n\r\n    const computedClassName = classNames(\"mx_EmojiButton\", className, {\r\n        mx_EmojiButton_highlight: menuDisplayed,\r\n    });\r\n\r\n    // TODO: replace ContextMenuTooltipButton with a unified representation of\r\n    // the header buttons and the right panel buttons\r\n    return (\r\n        <>\r\n            <CollapsibleButton\r\n                className={computedClassName}\r\n                iconClassName=\"mx_EmojiButton_icon\"\r\n                onClick={openMenu}\r\n                title={_t(\"common|emoji\")}\r\n                inputRef={button}\r\n            />\r\n\r\n            {contextMenu}\r\n        </>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport classNames from \"classnames\";\r\nimport {\r\n    type IEventRelation,\r\n    type Room,\r\n    type MatrixClient,\r\n    THREAD_RELATION_TYPE,\r\n    M_POLL_START,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport React, { type JSX, createContext, type ReactElement, type ReactNode, useContext, useRef } from \"react\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport { CollapsibleButton } from \"./CollapsibleButton\";\r\nimport { type MenuProps } from \"../../structures/ContextMenu\";\r\nimport dis from \"../../../dispatcher/dispatcher\";\r\nimport ErrorDialog from \"../dialogs/ErrorDialog\";\r\nimport { LocationButton } from \"../location\";\r\nimport Modal from \"../../../Modal\";\r\nimport PollCreateDialog from \"../elements/PollCreateDialog\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\nimport ContentMessages from \"../../../ContentMessages\";\r\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\r\nimport { useDispatcher } from \"../../../hooks/useDispatcher\";\r\nimport { chromeFileInputFix } from \"../../../utils/BrowserWorkarounds\";\r\nimport IconizedContextMenu, { IconizedContextMenuOptionList } from \"../context_menus/IconizedContextMenu\";\r\nimport { EmojiButton } from \"./EmojiButton\";\r\nimport { filterBoolean } from \"../../../utils/arrays\";\r\nimport { useSettingValue } from \"../../../hooks/useSettings\";\r\nimport AccessibleButton, { type ButtonEvent } from \"../elements/AccessibleButton\";\r\nimport { useScopedRoomContext } from \"../../../contexts/ScopedRoomContext.tsx\";\r\n\r\ninterface IProps {\r\n    addEmoji: (emoji: string) => boolean;\r\n    haveRecording: boolean;\r\n    isMenuOpen: boolean;\r\n    isStickerPickerOpen: boolean;\r\n    menuPosition?: MenuProps;\r\n    onRecordStartEndClick: () => void;\r\n    relation?: IEventRelation;\r\n    setStickerPickerOpen: (isStickerPickerOpen: boolean) => void;\r\n    showLocationButton: boolean;\r\n    showPollsButton: boolean;\r\n    showStickersButton: boolean;\r\n    toggleButtonMenu: () => void;\r\n    isRichTextEnabled: boolean;\r\n    onComposerModeClick: () => void;\r\n}\r\n\r\ntype OverflowMenuCloser = () => void;\r\nexport const OverflowMenuContext = createContext<OverflowMenuCloser | null>(null);\r\n\r\nconst MessageComposerButtons: React.FC<IProps> = (props: IProps) => {\r\n    const matrixClient = useContext(MatrixClientContext);\r\n    const { room, narrow } = useScopedRoomContext(\"room\", \"narrow\");\r\n\r\n    const isWysiwygLabEnabled = useSettingValue(\"feature_wysiwyg_composer\");\r\n\r\n    if (!matrixClient || !room || props.haveRecording) {\r\n        return null;\r\n    }\r\n\r\n    let mainButtons: ReactNode[];\r\n    let moreButtons: ReactNode[];\r\n    if (narrow) {\r\n        mainButtons = [\r\n            isWysiwygLabEnabled ? (\r\n                <ComposerModeButton\r\n                    key=\"composerModeButton\"\r\n                    isRichTextEnabled={props.isRichTextEnabled}\r\n                    onClick={props.onComposerModeClick}\r\n                />\r\n            ) : (\r\n                emojiButton(props)\r\n            ),\r\n        ];\r\n        moreButtons = [\r\n            uploadButton(), // props passed via UploadButtonContext\r\n            showStickersButton(props),\r\n            voiceRecordingButton(props, narrow),\r\n            props.showPollsButton ? pollButton(room, props.relation) : null,\r\n            showLocationButton(props, room, matrixClient),\r\n        ];\r\n    } else {\r\n        mainButtons = [\r\n            isWysiwygLabEnabled ? (\r\n                <ComposerModeButton\r\n                    key=\"composerModeButton\"\r\n                    isRichTextEnabled={props.isRichTextEnabled}\r\n                    onClick={props.onComposerModeClick}\r\n                />\r\n            ) : (\r\n                emojiButton(props)\r\n            ),\r\n            uploadButton(), // props passed via UploadButtonContext\r\n        ];\r\n        moreButtons = [\r\n            showStickersButton(props),\r\n            voiceRecordingButton(props, narrow),\r\n            props.showPollsButton ? pollButton(room, props.relation) : null,\r\n            showLocationButton(props, room, matrixClient),\r\n        ];\r\n    }\r\n\r\n    mainButtons = filterBoolean(mainButtons);\r\n    moreButtons = filterBoolean(moreButtons);\r\n\r\n    const moreOptionsClasses = classNames({\r\n        mx_MessageComposer_button: true,\r\n        mx_MessageComposer_buttonMenu: true,\r\n        mx_MessageComposer_closeButtonMenu: props.isMenuOpen,\r\n    });\r\n\r\n    return (\r\n        <UploadButtonContextProvider roomId={room.roomId} relation={props.relation}>\r\n            {mainButtons}\r\n            {moreButtons.length > 0 && (\r\n                <AccessibleButton\r\n                    className={moreOptionsClasses}\r\n                    onClick={props.toggleButtonMenu}\r\n                    title={_t(\"quick_settings|sidebar_settings\")}\r\n                />\r\n            )}\r\n            {props.isMenuOpen && (\r\n                <IconizedContextMenu\r\n                    onFinished={props.toggleButtonMenu}\r\n                    {...props.menuPosition}\r\n                    wrapperClassName=\"mx_MessageComposer_Menu\"\r\n                    compact={true}\r\n                >\r\n                    <OverflowMenuContext.Provider value={props.toggleButtonMenu}>\r\n                        <IconizedContextMenuOptionList>{moreButtons}</IconizedContextMenuOptionList>\r\n                    </OverflowMenuContext.Provider>\r\n                </IconizedContextMenu>\r\n            )}\r\n        </UploadButtonContextProvider>\r\n    );\r\n};\r\n\r\nfunction emojiButton(props: IProps): ReactElement {\r\n    return (\r\n        <EmojiButton\r\n            key=\"emoji_button\"\r\n            addEmoji={props.addEmoji}\r\n            menuPosition={props.menuPosition}\r\n            className=\"mx_MessageComposer_button\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction uploadButton(): ReactElement {\r\n    return <UploadButton key=\"controls_upload\" />;\r\n}\r\n\r\ntype UploadButtonFn = () => void;\r\nexport const UploadButtonContext = createContext<UploadButtonFn | null>(null);\r\n\r\ninterface IUploadButtonProps {\r\n    roomId: string;\r\n    relation?: IEventRelation;\r\n    children: ReactNode;\r\n}\r\n\r\n// We put the file input outside the UploadButton component so that it doesn't get killed when the context menu closes.\r\nconst UploadButtonContextProvider: React.FC<IUploadButtonProps> = ({ roomId, relation, children }) => {\r\n    const cli = useContext(MatrixClientContext);\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n    const uploadInput = useRef<HTMLInputElement>(null);\r\n\r\n    const onUploadClick = (): void => {\r\n        if (cli?.isGuest()) {\r\n            dis.dispatch({ action: \"require_registration\" });\r\n            return;\r\n        }\r\n        uploadInput.current?.click();\r\n    };\r\n\r\n    useDispatcher(dis, (payload) => {\r\n        if (roomContext.timelineRenderingType === payload.context && payload.action === \"upload_file\") {\r\n            onUploadClick();\r\n        }\r\n    });\r\n\r\n    const onUploadFileInputChange = (ev: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if (ev.target.files?.length === 0) return;\r\n\r\n        // Take a copy, so we can safely reset the value of the form control\r\n        ContentMessages.sharedInstance().sendContentListToRoom(\r\n            Array.from(ev.target.files!),\r\n            roomId,\r\n            relation,\r\n            cli,\r\n            roomContext.timelineRenderingType,\r\n        );\r\n\r\n        // This is the onChange handler for a file form control, but we're\r\n        // not keeping any state, so reset the value of the form control\r\n        // to empty.\r\n        // NB. we need to set 'value': the 'files' property is immutable.\r\n        ev.target.value = \"\";\r\n    };\r\n\r\n    const uploadInputStyle = { display: \"none\" };\r\n    return (\r\n        <UploadButtonContext.Provider value={onUploadClick}>\r\n            {children}\r\n\r\n            <input\r\n                ref={uploadInput}\r\n                type=\"file\"\r\n                style={uploadInputStyle}\r\n                multiple\r\n                onClick={chromeFileInputFix}\r\n                onChange={onUploadFileInputChange}\r\n            />\r\n        </UploadButtonContext.Provider>\r\n    );\r\n};\r\n\r\n// Must be rendered within an UploadButtonContextProvider\r\nconst UploadButton: React.FC = () => {\r\n    const overflowMenuCloser = useContext(OverflowMenuContext);\r\n    const uploadButtonFn = useContext(UploadButtonContext);\r\n\r\n    const onClick = (): void => {\r\n        uploadButtonFn?.();\r\n        overflowMenuCloser?.(); // close overflow menu\r\n    };\r\n\r\n    return (\r\n        <CollapsibleButton\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_upload\"\r\n            onClick={onClick}\r\n            title={_t(\"common|attachment\")}\r\n        />\r\n    );\r\n};\r\n\r\nfunction showStickersButton(props: IProps): ReactElement | null {\r\n    return props.showStickersButton ? (\r\n        <CollapsibleButton\r\n            id=\"stickersButton\"\r\n            key=\"controls_stickers\"\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_stickers\"\r\n            onClick={() => props.setStickerPickerOpen(!props.isStickerPickerOpen)}\r\n            title={props.isStickerPickerOpen ? _t(\"composer|close_sticker_picker\") : _t(\"common|sticker\")}\r\n        />\r\n    ) : null;\r\n}\r\n\r\nfunction voiceRecordingButton(props: IProps, narrow: boolean): ReactElement | null {\r\n    // XXX: recording UI does not work well in narrow mode, so hide for now\r\n    return narrow ? null : (\r\n        <CollapsibleButton\r\n            key=\"voice_message_send\"\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_voiceMessage\"\r\n            onClick={props.onRecordStartEndClick}\r\n            title={_t(\"composer|voice_message_button\")}\r\n        />\r\n    );\r\n}\r\n\r\nfunction pollButton(room: Room, relation?: IEventRelation): ReactElement {\r\n    return <PollButton key=\"polls\" room={room} relation={relation} />;\r\n}\r\n\r\ninterface IPollButtonProps {\r\n    room: Room;\r\n    relation?: IEventRelation;\r\n}\r\n\r\nclass PollButton extends React.PureComponent<IPollButtonProps> {\r\n    public static contextType = OverflowMenuContext;\r\n    declare public context: React.ContextType<typeof OverflowMenuContext>;\r\n\r\n    private onCreateClick = (): void => {\r\n        this.context?.(); // close overflow menu\r\n        const canSend = this.props.room.currentState.maySendEvent(\r\n            M_POLL_START.name,\r\n            MatrixClientPeg.safeGet().getSafeUserId(),\r\n        );\r\n        if (!canSend) {\r\n            Modal.createDialog(ErrorDialog, {\r\n                title: _t(\"composer|poll_button_no_perms_title\"),\r\n                description: _t(\"composer|poll_button_no_perms_description\"),\r\n            });\r\n        } else {\r\n            const threadId =\r\n                this.props.relation?.rel_type === THREAD_RELATION_TYPE.name ? this.props.relation.event_id : undefined;\r\n\r\n            Modal.createDialog(\r\n                PollCreateDialog,\r\n                {\r\n                    room: this.props.room,\r\n                    threadId,\r\n                },\r\n                \"mx_CompoundDialog\",\r\n                false, // isPriorityModal\r\n                true, // isStaticModal\r\n            );\r\n        }\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        // do not allow sending polls within threads at this time\r\n        if (this.props.relation?.rel_type === THREAD_RELATION_TYPE.name) return null;\r\n\r\n        return (\r\n            <CollapsibleButton\r\n                className=\"mx_MessageComposer_button\"\r\n                iconClassName=\"mx_MessageComposer_poll\"\r\n                onClick={this.onCreateClick}\r\n                title={_t(\"composer|poll_button\")}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction showLocationButton(props: IProps, room: Room, matrixClient: MatrixClient): ReactElement | null {\r\n    const sender = room.getMember(matrixClient.getSafeUserId());\r\n\r\n    return props.showLocationButton && sender ? (\r\n        <LocationButton\r\n            key=\"location\"\r\n            roomId={room.roomId}\r\n            relation={props.relation}\r\n            sender={sender}\r\n            menuPosition={props.menuPosition}\r\n        />\r\n    ) : null;\r\n}\r\n\r\ninterface WysiwygToggleButtonProps {\r\n    isRichTextEnabled: boolean;\r\n    onClick: (ev: ButtonEvent) => void;\r\n}\r\n\r\nfunction ComposerModeButton({ isRichTextEnabled, onClick }: WysiwygToggleButtonProps): JSX.Element {\r\n    const title = isRichTextEnabled ? _t(\"composer|mode_plain\") : _t(\"composer|mode_rich_text\");\r\n\r\n    return (\r\n        <CollapsibleButton\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName={classNames({\r\n                mx_MessageComposer_plain_text: !isRichTextEnabled,\r\n                mx_MessageComposer_rich_text: isRichTextEnabled,\r\n            })}\r\n            onClick={onClick}\r\n            title={title}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MessageComposerButtons;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2020 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport {\r\n    type MatrixEvent,\r\n    RoomStateEvent,\r\n    MatrixError,\r\n    type User,\r\n    UserEvent,\r\n    EventType,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport { throttle } from \"lodash\";\r\n\r\nimport { type ActionPayload } from \"../dispatcher/payloads\";\r\nimport { AsyncStoreWithClient } from \"./AsyncStoreWithClient\";\r\nimport defaultDispatcher from \"../dispatcher/dispatcher\";\r\nimport { MatrixClientPeg } from \"../MatrixClientPeg\";\r\nimport { _t } from \"../languageHandler\";\r\nimport { mediaFromMxc } from \"../customisations/Media\";\r\n\r\ninterface IState {\r\n    displayName?: string;\r\n    avatarUrl?: string;\r\n    fetchedAt?: number;\r\n}\r\n\r\nconst KEY_DISPLAY_NAME = \"mx_profile_displayname\";\r\nconst KEY_AVATAR_URL = \"mx_profile_avatar_url\";\r\n\r\nexport class OwnProfileStore extends AsyncStoreWithClient<IState> {\r\n    private static readonly internalInstance = (() => {\r\n        const instance = new OwnProfileStore();\r\n        instance.start();\r\n        return instance;\r\n    })();\r\n\r\n    private monitoredUser: User | null = null;\r\n\r\n    public constructor() {\r\n        // seed from localstorage because otherwise we won't get these values until a whole network\r\n        // round-trip after the client is ready, and we often load widgets in that time, and we'd\r\n        // and up passing them an incorrect display name\r\n        super(defaultDispatcher, {\r\n            displayName: window.localStorage.getItem(KEY_DISPLAY_NAME) || undefined,\r\n            avatarUrl: window.localStorage.getItem(KEY_AVATAR_URL) || undefined,\r\n        });\r\n    }\r\n\r\n    public static get instance(): OwnProfileStore {\r\n        return OwnProfileStore.internalInstance;\r\n    }\r\n\r\n    /**\r\n     * Gets the display name for the user, or null if not present.\r\n     */\r\n    public get displayName(): string | null {\r\n        if (!this.matrixClient) return this.state.displayName || null;\r\n\r\n        if (this.matrixClient.isGuest()) {\r\n            return _t(\"common|guest\");\r\n        } else if (this.state.displayName) {\r\n            return this.state.displayName;\r\n        } else {\r\n            return this.matrixClient.getUserId();\r\n        }\r\n    }\r\n\r\n    public get isProfileInfoFetched(): boolean {\r\n        return !!this.state.fetchedAt;\r\n    }\r\n\r\n    /**\r\n     * Gets the MXC URI of the user's avatar, or null if not present.\r\n     */\r\n    public get avatarMxc(): string | null {\r\n        return this.state.avatarUrl || null;\r\n    }\r\n\r\n    /**\r\n     * Gets the user's avatar as an HTTP URL of the given size. If the user's\r\n     * avatar is not present, this returns null.\r\n     * @param size The size of the avatar. If zero, a full res copy of the avatar\r\n     * will be returned as an HTTP URL.\r\n     * @returns The HTTP URL of the user's avatar\r\n     */\r\n    public getHttpAvatarUrl(size = 0): string | null {\r\n        if (!this.avatarMxc) return null;\r\n        const media = mediaFromMxc(this.avatarMxc);\r\n        if (!size || size <= 0) {\r\n            return media.srcHttp;\r\n        } else {\r\n            return media.getSquareThumbnailHttp(size);\r\n        }\r\n    }\r\n\r\n    protected async onNotReady(): Promise<void> {\r\n        this.onProfileUpdate.cancel();\r\n        if (this.monitoredUser) {\r\n            this.monitoredUser.removeListener(UserEvent.DisplayName, this.onProfileUpdate);\r\n            this.monitoredUser.removeListener(UserEvent.AvatarUrl, this.onProfileUpdate);\r\n        }\r\n        this.matrixClient?.removeListener(RoomStateEvent.Events, this.onStateEvents);\r\n        await this.reset({});\r\n    }\r\n\r\n    protected async onReady(): Promise<void> {\r\n        if (!this.matrixClient) return;\r\n        const myUserId = this.matrixClient.getSafeUserId();\r\n        this.monitoredUser = this.matrixClient.getUser(myUserId);\r\n        if (this.monitoredUser) {\r\n            this.monitoredUser.on(UserEvent.DisplayName, this.onProfileUpdate);\r\n            this.monitoredUser.on(UserEvent.AvatarUrl, this.onProfileUpdate);\r\n        }\r\n\r\n        // We also have to listen for membership events for ourselves as the above User events\r\n        // are fired only with presence, which connect.socjsc.com (and many others) has disabled.\r\n        this.matrixClient.on(RoomStateEvent.Events, this.onStateEvents);\r\n\r\n        await this.onProfileUpdate(); // trigger an initial update\r\n    }\r\n\r\n    protected async onAction(payload: ActionPayload): Promise<void> {\r\n        // we don't actually do anything here\r\n    }\r\n\r\n    private onProfileUpdate = throttle(\r\n        async (): Promise<void> => {\r\n            if (!this.matrixClient) return;\r\n            // We specifically do not use the User object we stored for profile info as it\r\n            // could easily be wrong (such as per-room instead of global profile).\r\n\r\n            let profileInfo: { displayname?: string; avatar_url?: string } = {\r\n                displayname: undefined,\r\n                avatar_url: undefined,\r\n            };\r\n\r\n            try {\r\n                profileInfo = await this.matrixClient.getProfileInfo(this.matrixClient.getSafeUserId());\r\n            } catch (error: unknown) {\r\n                if (!(error instanceof MatrixError) || error.errcode !== \"M_NOT_FOUND\") {\r\n                    /**\r\n                     * Raise any other error than M_NOT_FOUND.\r\n                     * M_NOT_FOUND could occur if there is no user profile.\r\n                     * {@link https://spec.connect.socjsc.com/v1.7/client-server-api/#get_matrixclientv3profileuserid}\r\n                     * We should then assume an empty profile, emit UPDATE_EVENT etc..\r\n                     */\r\n                    throw error;\r\n                }\r\n            }\r\n\r\n            if (profileInfo.displayname) {\r\n                window.localStorage.setItem(KEY_DISPLAY_NAME, profileInfo.displayname);\r\n            } else {\r\n                window.localStorage.removeItem(KEY_DISPLAY_NAME);\r\n            }\r\n\r\n            if (profileInfo.avatar_url) {\r\n                window.localStorage.setItem(KEY_AVATAR_URL, profileInfo.avatar_url);\r\n            } else {\r\n                window.localStorage.removeItem(KEY_AVATAR_URL);\r\n            }\r\n\r\n            await this.updateState({\r\n                displayName: profileInfo.displayname,\r\n                avatarUrl: profileInfo.avatar_url,\r\n                fetchedAt: Date.now(),\r\n            });\r\n        },\r\n        200,\r\n        { trailing: true, leading: true },\r\n    );\r\n\r\n    private onStateEvents = async (ev: MatrixEvent): Promise<void> => {\r\n        const myUserId = MatrixClientPeg.safeGet().getUserId();\r\n        if (ev.getType() === EventType.RoomMember && ev.getSender() === myUserId && ev.getStateKey() === myUserId) {\r\n            await this.onProfileUpdate();\r\n        }\r\n    };\r\n}\r\n"],"names":["CollapsibleButton","_ref","title","children","className","iconClassName","inputRef","props","_objectWithoutProperties","_excluded","useContext","OverflowMenuContext","React","IconizedContextMenuOption","_extends","label","AccessibleButton","classNames","ref","EmojiButton","addEmoji","menuPosition","overflowMenuCloser","menuDisplayed","button","openMenu","closeMenu","useContextMenu","contextMenu","current","position","aboveLeftOf","getBoundingClientRect","onFinished","ContextMenu","managed","EmojiPicker","onChoose","computedClassName","mx_EmojiButton_highlight","onClick","_t","createContext","emojiButton","key","uploadButton","UploadButton","UploadButtonContext","UploadButtonContextProvider","roomId","relation","cli","MatrixClientContext","roomContext","useScopedRoomContext","uploadInput","useRef","onUploadClick","_uploadInput$current","isGuest","dis","dispatch","action","click","useDispatcher","payload","timelineRenderingType","context","Provider","value","type","style","display","multiple","chromeFileInputFix","onChange","ev","_ev$target$files","target","files","length","ContentMessages","sharedInstance","sendContentListToRoom","Array","from","uploadButtonFn","showStickersButton","id","setStickerPickerOpen","isStickerPickerOpen","voiceRecordingButton","narrow","onRecordStartEndClick","pollButton","room","PollButton","constructor","args","_defineProperty","_this$context","this","call","currentState","maySendEvent","M_POLL_START","name","MatrixClientPeg","safeGet","getSafeUserId","_this$props$relation","threadId","rel_type","THREAD_RELATION_TYPE","event_id","undefined","Modal","createDialog","PollCreateDialog","ErrorDialog","description","render","_this$props$relation2","onCreateClick","showLocationButton","matrixClient","sender","getMember","LocationButton","ComposerModeButton","isRichTextEnabled","mx_MessageComposer_plain_text","mx_MessageComposer_rich_text","isWysiwygLabEnabled","useSettingValue","haveRecording","mainButtons","moreButtons","onComposerModeClick","showPollsButton","filterBoolean","moreOptionsClasses","mx_MessageComposer_button","mx_MessageComposer_buttonMenu","mx_MessageComposer_closeButtonMenu","isMenuOpen","toggleButtonMenu","IconizedContextMenu","wrapperClassName","compact","IconizedContextMenuOptionList","KEY_DISPLAY_NAME","KEY_AVATAR_URL","OwnProfileStore","AsyncStoreWithClient","super","defaultDispatcher","displayName","window","localStorage","getItem","avatarUrl","throttle","async","profileInfo","displayname","avatar_url","getProfileInfo","error","MatrixError","errcode","setItem","removeItem","updateState","fetchedAt","Date","now","trailing","leading","myUserId","getUserId","getType","EventType","RoomMember","getSender","getStateKey","onProfileUpdate","instance","internalInstance","state","isProfileInfoFetched","avatarMxc","getHttpAvatarUrl","size","media","mediaFromMxc","srcHttp","getSquareThumbnailHttp","onNotReady","_this$matrixClient","cancel","monitoredUser","removeListener","UserEvent","DisplayName","AvatarUrl","RoomStateEvent","Events","onStateEvents","reset","onReady","getUser","on","onAction","_OwnProfileStore","start"],"sourceRoot":""}