{"version":3,"file":"bundles/2f8baab73c2b1aecf8d4/7211.js","mappings":"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","sources":["webpack://soc-connect/./src/async-components/views/dialogs/security/ImportE2eKeysDialog.tsx","webpack://soc-connect/./src/utils/MegolmExportEncryption.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The connect.socjsc.com Foundation C.I.C.\r\nCopyright 2017 Vector Creations Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { createRef } from \"react\";\r\nimport { type MatrixClient } from \"matrix-js-sdk/src/matrix\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport * as MegolmExportEncryption from \"../../../../utils/MegolmExportEncryption\";\r\nimport { _t } from \"../../../../languageHandler\";\r\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\r\nimport Field from \"../../../../components/views/elements/Field\";\r\n\r\nfunction readFileAsArrayBuffer(file: File): Promise<ArrayBuffer> {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n            if (e.target?.result) {\r\n                resolve(e.target.result as ArrayBuffer);\r\n            } else {\r\n                reject(new Error(\"Failed to read file due to unknown error\"));\r\n            }\r\n        };\r\n        reader.onerror = reject;\r\n\r\n        reader.readAsArrayBuffer(file);\r\n    });\r\n}\r\n\r\nenum Phase {\r\n    Edit = \"edit\",\r\n    Importing = \"importing\",\r\n}\r\n\r\ninterface IProps {\r\n    matrixClient: MatrixClient;\r\n    onFinished(imported?: boolean): void;\r\n}\r\n\r\ninterface IState {\r\n    enableSubmit: boolean;\r\n    phase: Phase;\r\n    errStr: string | null;\r\n    passphrase: string;\r\n}\r\n\r\nexport default class ImportE2eKeysDialog extends React.Component<IProps, IState> {\r\n    private unmounted = false;\r\n    private file = createRef<HTMLInputElement>();\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            enableSubmit: false,\r\n            phase: Phase.Edit,\r\n            errStr: null,\r\n            passphrase: \"\",\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.unmounted = false;\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unmounted = true;\r\n    }\r\n\r\n    private onFormChange = (): void => {\r\n        const files = this.file.current?.files;\r\n        this.setState({\r\n            enableSubmit: this.state.passphrase !== \"\" && !!files?.length,\r\n        });\r\n    };\r\n\r\n    private onPassphraseChange = (ev: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({ passphrase: ev.target.value }, this.onFormChange); // update general form state too\r\n    };\r\n\r\n    private onFormSubmit = (ev: React.FormEvent): boolean => {\r\n        ev.preventDefault();\r\n        // noinspection JSIgnoredPromiseFromCall\r\n        const file = this.file.current?.files?.[0];\r\n        if (file) {\r\n            this.startImport(file, this.state.passphrase);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    private startImport(file: File, passphrase: string): Promise<void> {\r\n        this.setState({\r\n            errStr: null,\r\n            phase: Phase.Importing,\r\n        });\r\n\r\n        return readFileAsArrayBuffer(file)\r\n            .then((arrayBuffer) => {\r\n                return MegolmExportEncryption.decryptMegolmKeyFile(arrayBuffer, passphrase);\r\n            })\r\n            .then((keys) => {\r\n                return this.props.matrixClient.getCrypto()!.importRoomKeysAsJson(keys);\r\n            })\r\n            .then(() => {\r\n                // TODO: it would probably be nice to give some feedback about what we've imported here.\r\n                this.props.onFinished(true);\r\n            })\r\n            .catch((e) => {\r\n                logger.error(\"Error importing e2e keys:\", e);\r\n                if (this.unmounted) {\r\n                    return;\r\n                }\r\n                const msg = e.friendlyText || _t(\"error|unknown\");\r\n                this.setState({\r\n                    errStr: msg,\r\n                    phase: Phase.Edit,\r\n                });\r\n            });\r\n    }\r\n\r\n    private onCancelClick = (ev: React.MouseEvent): boolean => {\r\n        ev.preventDefault();\r\n        this.props.onFinished(false);\r\n        return false;\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        const disableForm = this.state.phase !== Phase.Edit;\r\n\r\n        return (\r\n            <BaseDialog\r\n                className=\"mx_importE2eKeysDialog\"\r\n                onFinished={this.props.onFinished}\r\n                title={_t(\"settings|key_export_import|import_title\")}\r\n            >\r\n                <form onSubmit={this.onFormSubmit}>\r\n                    <div className=\"mx_Dialog_content\">\r\n                        <p>{_t(\"settings|key_export_import|import_description_1\")}</p>\r\n                        <p>{_t(\"settings|key_export_import|import_description_2\")}</p>\r\n                        <div className=\"error\">{this.state.errStr}</div>\r\n                        <div className=\"mx_E2eKeysDialog_inputTable\">\r\n                            <div className=\"mx_E2eKeysDialog_inputRow\">\r\n                                <div className=\"mx_E2eKeysDialog_inputLabel\">\r\n                                    <label htmlFor=\"importFile\">\r\n                                        {_t(\"settings|key_export_import|file_to_import\")}\r\n                                    </label>\r\n                                </div>\r\n                                <div className=\"mx_E2eKeysDialog_inputCell\">\r\n                                    <input\r\n                                        ref={this.file}\r\n                                        id=\"importFile\"\r\n                                        type=\"file\"\r\n                                        autoFocus={true}\r\n                                        onChange={this.onFormChange}\r\n                                        disabled={disableForm}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mx_E2eKeysDialog_inputRow\">\r\n                                <Field\r\n                                    label={_t(\"settings|key_export_import|enter_passphrase\")}\r\n                                    value={this.state.passphrase}\r\n                                    onChange={this.onPassphraseChange}\r\n                                    size={64}\r\n                                    type=\"password\"\r\n                                    disabled={disableForm}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mx_Dialog_buttons\">\r\n                        <input\r\n                            className=\"mx_Dialog_primary\"\r\n                            type=\"submit\"\r\n                            value={_t(\"action|import\")}\r\n                            disabled={!this.state.enableSubmit || disableForm}\r\n                        />\r\n                        <button onClick={this.onCancelClick} disabled={disableForm}>\r\n                            {_t(\"action|cancel\")}\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </BaseDialog>\r\n        );\r\n    }\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2020 The connect.socjsc.com Foundation C.I.C.\r\nCopyright 2017 Vector Creations Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { _t } from \"../languageHandler\";\r\nimport SdkConfig from \"../SdkConfig\";\r\n\r\nconst subtleCrypto = window.crypto.subtle;\r\n\r\n/**\r\n * Make an Error object which has a friendlyText property which is already\r\n * translated and suitable for showing to the user.\r\n *\r\n * @param {string} message message for the exception\r\n * @param {string} friendlyText\r\n * @returns {{message: string, friendlyText: string}}\r\n */\r\nfunction friendlyError(message: string, friendlyText: string): { message: string; friendlyText: string } {\r\n    return { message, friendlyText };\r\n}\r\n\r\nfunction cryptoFailMsg(): string {\r\n    return _t(\"encryption|export_unsupported\");\r\n}\r\n\r\n/**\r\n * Decrypt a megolm key file\r\n *\r\n * @param {ArrayBuffer} data file to decrypt\r\n * @param {String} password\r\n * @return {Promise<String>} promise for decrypted output\r\n *\r\n *\r\n */\r\nexport async function decryptMegolmKeyFile(data: ArrayBuffer, password: string): Promise<string> {\r\n    const body = unpackMegolmKeyFile(data);\r\n    const brand = SdkConfig.get().brand;\r\n\r\n    // check we have a version byte\r\n    if (body.length < 1) {\r\n        throw friendlyError(\"Invalid file: too short\", _t(\"encryption|import_invalid_keyfile\", { brand }));\r\n    }\r\n\r\n    const version = body[0];\r\n    if (version !== 1) {\r\n        throw friendlyError(\"Unsupported version\", _t(\"encryption|import_invalid_keyfile\", { brand }));\r\n    }\r\n\r\n    const ciphertextLength = body.length - (1 + 16 + 16 + 4 + 32);\r\n    if (ciphertextLength < 0) {\r\n        throw friendlyError(\"Invalid file: too short\", _t(\"encryption|import_invalid_keyfile\", { brand }));\r\n    }\r\n\r\n    const salt = body.subarray(1, 1 + 16);\r\n    const iv = body.subarray(17, 17 + 16);\r\n    const iterations = (body[33] << 24) | (body[34] << 16) | (body[35] << 8) | body[36];\r\n    const ciphertext = body.subarray(37, 37 + ciphertextLength);\r\n    const hmac = body.subarray(-32);\r\n\r\n    const [aesKey, hmacKey] = await deriveKeys(salt, iterations, password);\r\n    const toVerify = body.subarray(0, -32);\r\n\r\n    let isValid;\r\n    try {\r\n        isValid = await subtleCrypto.verify({ name: \"HMAC\" }, hmacKey, hmac, toVerify);\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.verify failed: \" + e, cryptoFailMsg());\r\n    }\r\n    if (!isValid) {\r\n        throw friendlyError(\"hmac mismatch\", _t(\"encryption|import_invalid_passphrase\"));\r\n    }\r\n\r\n    let plaintext;\r\n    try {\r\n        plaintext = await subtleCrypto.decrypt(\r\n            {\r\n                name: \"AES-CTR\",\r\n                counter: iv,\r\n                length: 64,\r\n            },\r\n            aesKey,\r\n            ciphertext,\r\n        );\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.decrypt failed: \" + e, cryptoFailMsg());\r\n    }\r\n\r\n    return new TextDecoder().decode(new Uint8Array(plaintext));\r\n}\r\n\r\n/**\r\n * Encrypt a megolm key file\r\n *\r\n * @param {String} data\r\n * @param {String} password\r\n * @param {Object=} options\r\n * @param {Number=} options.kdf_rounds Number of iterations to perform of the\r\n *    key-derivation function.\r\n * @return {Promise<ArrayBuffer>} promise for encrypted output\r\n */\r\nexport async function encryptMegolmKeyFile(\r\n    data: string,\r\n    password: string,\r\n    options?: { kdf_rounds?: number }, // eslint-disable-line camelcase\r\n): Promise<ArrayBuffer> {\r\n    options = options || {};\r\n    const kdfRounds = options.kdf_rounds || 500000;\r\n\r\n    const salt = new Uint8Array(16);\r\n    window.crypto.getRandomValues(salt);\r\n\r\n    const iv = new Uint8Array(16);\r\n    window.crypto.getRandomValues(iv);\r\n\r\n    // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\r\n    // (which would mean we wouldn't be able to decrypt on Android). The loss\r\n    // of a single bit of iv is a price we have to pay.\r\n    iv[8] &= 0x7f;\r\n\r\n    const [aesKey, hmacKey] = await deriveKeys(salt, kdfRounds, password);\r\n    const encodedData = new TextEncoder().encode(data);\r\n\r\n    let ciphertext;\r\n    try {\r\n        ciphertext = await subtleCrypto.encrypt(\r\n            {\r\n                name: \"AES-CTR\",\r\n                counter: iv,\r\n                length: 64,\r\n            },\r\n            aesKey,\r\n            encodedData,\r\n        );\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.encrypt failed: \" + e, cryptoFailMsg());\r\n    }\r\n\r\n    const cipherArray = new Uint8Array(ciphertext);\r\n    const bodyLength = 1 + salt.length + iv.length + 4 + cipherArray.length + 32;\r\n    const resultBuffer = new Uint8Array(bodyLength);\r\n    let idx = 0;\r\n    resultBuffer[idx++] = 1; // version\r\n    resultBuffer.set(salt, idx);\r\n    idx += salt.length;\r\n    resultBuffer.set(iv, idx);\r\n    idx += iv.length;\r\n    resultBuffer[idx++] = kdfRounds >> 24;\r\n    resultBuffer[idx++] = (kdfRounds >> 16) & 0xff;\r\n    resultBuffer[idx++] = (kdfRounds >> 8) & 0xff;\r\n    resultBuffer[idx++] = kdfRounds & 0xff;\r\n    resultBuffer.set(cipherArray, idx);\r\n    idx += cipherArray.length;\r\n\r\n    const toSign = resultBuffer.subarray(0, idx);\r\n\r\n    let hmac;\r\n    try {\r\n        hmac = await subtleCrypto.sign({ name: \"HMAC\" }, hmacKey, toSign);\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.sign failed: \" + e, cryptoFailMsg());\r\n    }\r\n\r\n    const hmacArray = new Uint8Array(hmac);\r\n    resultBuffer.set(hmacArray, idx);\r\n    return packMegolmKeyFile(resultBuffer);\r\n}\r\n\r\n/**\r\n * Derive the AES and HMAC-SHA-256 keys for the file\r\n *\r\n * @param {Unit8Array} salt  salt for pbkdf\r\n * @param {Number} iterations number of pbkdf iterations\r\n * @param {String} password  password\r\n * @return {Promise<[CryptoKey, CryptoKey]>} promise for [aes key, hmac key]\r\n */\r\nasync function deriveKeys(salt: Uint8Array, iterations: number, password: string): Promise<[CryptoKey, CryptoKey]> {\r\n    const start = new Date();\r\n\r\n    let key;\r\n    try {\r\n        key = await subtleCrypto.importKey(\"raw\", new TextEncoder().encode(password), { name: \"PBKDF2\" }, false, [\r\n            \"deriveBits\",\r\n        ]);\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.importKey failed: \" + e, cryptoFailMsg());\r\n    }\r\n\r\n    let keybits;\r\n    try {\r\n        keybits = await subtleCrypto.deriveBits(\r\n            {\r\n                name: \"PBKDF2\",\r\n                salt: salt,\r\n                iterations: iterations,\r\n                hash: \"SHA-512\",\r\n            },\r\n            key,\r\n            512,\r\n        );\r\n    } catch (e) {\r\n        throw friendlyError(\"subtleCrypto.deriveBits failed: \" + e, cryptoFailMsg());\r\n    }\r\n\r\n    const now = new Date();\r\n    logger.log(\"E2e import/export: deriveKeys took \" + (now.getTime() - start.getTime()) + \"ms\");\r\n\r\n    const aesKey = keybits.slice(0, 32);\r\n    const hmacKey = keybits.slice(32);\r\n\r\n    const aesProm = subtleCrypto\r\n        .importKey(\"raw\", aesKey, { name: \"AES-CTR\" }, false, [\"encrypt\", \"decrypt\"])\r\n        .catch((e) => {\r\n            throw friendlyError(\"subtleCrypto.importKey failed for AES key: \" + e, cryptoFailMsg());\r\n        });\r\n\r\n    const hmacProm = subtleCrypto\r\n        .importKey(\r\n            \"raw\",\r\n            hmacKey,\r\n            {\r\n                name: \"HMAC\",\r\n                hash: { name: \"SHA-256\" },\r\n            },\r\n            false,\r\n            [\"sign\", \"verify\"],\r\n        )\r\n        .catch((e) => {\r\n            throw friendlyError(\"subtleCrypto.importKey failed for HMAC key: \" + e, cryptoFailMsg());\r\n        });\r\n\r\n    return Promise.all([aesProm, hmacProm]);\r\n}\r\n\r\nconst HEADER_LINE = \"-----BEGIN MEGOLM SESSION DATA-----\";\r\nconst TRAILER_LINE = \"-----END MEGOLM SESSION DATA-----\";\r\n\r\n/**\r\n * Unbase64 an ascii-armoured megolm key file\r\n *\r\n * Strips the header and trailer lines, and unbase64s the content\r\n *\r\n * @param {ArrayBuffer} data  input file\r\n * @return {Uint8Array} unbase64ed content\r\n */\r\nfunction unpackMegolmKeyFile(data: ArrayBuffer): Uint8Array {\r\n    // parse the file as a great big String. This should be safe, because there\r\n    // should be no non-ASCII characters, and it means that we can do string\r\n    // comparisons to find the header and footer, and feed it into window.atob.\r\n    const fileStr = new TextDecoder().decode(new Uint8Array(data));\r\n\r\n    // look for the start line\r\n    let lineStart = 0;\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (1) {\r\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart);\r\n        if (lineEnd < 0) {\r\n            throw new Error(\"Header line not found\");\r\n        }\r\n        const line = fileStr.slice(lineStart, lineEnd).trim();\r\n\r\n        // start the next line after the newline\r\n        lineStart = lineEnd + 1;\r\n\r\n        if (line === HEADER_LINE) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    const dataStart = lineStart;\r\n\r\n    // look for the end line\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (1) {\r\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart);\r\n        const line = fileStr.slice(lineStart, lineEnd < 0 ? undefined : lineEnd).trim();\r\n        if (line === TRAILER_LINE) {\r\n            break;\r\n        }\r\n\r\n        if (lineEnd < 0) {\r\n            throw new Error(\"Trailer line not found\");\r\n        }\r\n\r\n        // start the next line after the newline\r\n        lineStart = lineEnd + 1;\r\n    }\r\n\r\n    const dataEnd = lineStart;\r\n    return decodeBase64(fileStr.slice(dataStart, dataEnd));\r\n}\r\n\r\n/**\r\n * ascii-armour a  megolm key file\r\n *\r\n * base64s the content, and adds header and trailer lines\r\n *\r\n * @param {Uint8Array} data  raw data\r\n * @return {ArrayBuffer} formatted file\r\n */\r\nfunction packMegolmKeyFile(data: Uint8Array): ArrayBuffer {\r\n    // we split into lines before base64ing, because encodeBase64 doesn't deal\r\n    // terribly well with large arrays.\r\n    const LINE_LENGTH = (72 * 4) / 3;\r\n    const nLines = Math.ceil(data.length / LINE_LENGTH);\r\n    const lines = new Array(nLines + 3);\r\n    lines[0] = HEADER_LINE;\r\n    let o = 0;\r\n    let i;\r\n    for (i = 1; i <= nLines; i++) {\r\n        lines[i] = encodeBase64(data.subarray(o, o + LINE_LENGTH));\r\n        o += LINE_LENGTH;\r\n    }\r\n    lines[i++] = TRAILER_LINE;\r\n    lines[i] = \"\";\r\n    return new TextEncoder().encode(lines.join(\"\\n\")).buffer;\r\n}\r\n\r\n/**\r\n * Encode a typed array of uint8 as base64.\r\n * @param {Uint8Array} uint8Array The data to encode.\r\n * @return {string} The base64.\r\n */\r\nfunction encodeBase64(uint8Array: Uint8Array): string {\r\n    // Misinterpt the Uint8Array as Latin-1.\r\n    // window.btoa expects a unicode string with codepoints in the range 0-255.\r\n    const latin1String = String.fromCharCode.apply(null, Array.from(uint8Array));\r\n    // Use the builtin base64 encoder.\r\n    return window.btoa(latin1String);\r\n}\r\n\r\n/**\r\n * Decode a base64 string to a typed array of uint8.\r\n * @param {string} base64 The base64 to decode.\r\n * @return {Uint8Array} The decoded data.\r\n */\r\nfunction decodeBase64(base64: string): Uint8Array {\r\n    // window.atob returns a unicode string with codepoints in the range 0-255.\r\n    const latin1String = window.atob(base64);\r\n    // Encode the string as a Uint8Array\r\n    const uint8Array = new Uint8Array(latin1String.length);\r\n    for (let i = 0; i < latin1String.length; i++) {\r\n        uint8Array[i] = latin1String.charCodeAt(i);\r\n    }\r\n    return uint8Array;\r\n}\r\n"],"names":["Phase","ImportE2eKeysDialog","React","constructor","props","super","_defineProperty","createRef","_this$file$current","files","this","file","current","setState","enableSubmit","state","passphrase","length","ev","target","value","onFormChange","_this$file$current2","preventDefault","startImport","onFinished","phase","Edit","errStr","componentDidMount","unmounted","componentWillUnmount","Importing","Promise","resolve","reject","reader","FileReader","onload","e","_e$target","result","Error","onerror","readAsArrayBuffer","readFileAsArrayBuffer","then","arrayBuffer","MegolmExportEncryption","keys","matrixClient","getCrypto","importRoomKeysAsJson","catch","logger","error","msg","friendlyText","_t","render","disableForm","BaseDialog","className","title","onSubmit","onFormSubmit","htmlFor","ref","id","type","autoFocus","onChange","disabled","Field","label","onPassphraseChange","size","onClick","onCancelClick","subtleCrypto","window","crypto","subtle","friendlyError","message","cryptoFailMsg","async","decryptMegolmKeyFile","data","password","body","fileStr","TextDecoder","decode","Uint8Array","lineStart","lineEnd","indexOf","line","slice","trim","HEADER_LINE","dataStart","undefined","TRAILER_LINE","dataEnd","base64","latin1String","atob","uint8Array","i","charCodeAt","decodeBase64","unpackMegolmKeyFile","brand","SdkConfig","get","ciphertextLength","salt","subarray","iv","iterations","ciphertext","hmac","aesKey","hmacKey","deriveKeys","toVerify","isValid","plaintext","verify","name","decrypt","counter","encryptMegolmKeyFile","options","kdfRounds","kdf_rounds","getRandomValues","encodedData","TextEncoder","encode","encrypt","cipherArray","bodyLength","resultBuffer","idx","set","toSign","sign","hmacArray","LINE_LENGTH","nLines","Math","ceil","lines","Array","o","encodeBase64","join","buffer","packMegolmKeyFile","start","Date","key","keybits","importKey","deriveBits","hash","now","log","getTime","aesProm","hmacProm","all","String","fromCharCode","apply","from","btoa"],"sourceRoot":""}