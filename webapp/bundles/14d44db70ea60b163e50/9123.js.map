{"version":3,"file":"bundles/14d44db70ea60b163e50/9123.js","mappings":"6mBAmBKA,EAAK,SAALA,GAAK,OAALA,EAAK,uBAALA,EAAK,YAALA,CAAK,EAALA,GAAK,IA2BK,MAAMC,UAA8BC,EAAAA,cACxCC,WAAAA,CAAYC,GACfC,MAAMD,IAAOE,EAAAA,EAAAA,GAAA,qBAgBMC,UACnBC,KAAKC,SAAS,CACVC,WAAOC,IAEX,MAAMC,EAAMC,EAAAA,EAAgBC,UAC5B,UAE4CF,EAAIG,cAAcC,eAQhDC,EAAAA,EAAAA,KAA0BV,UAC5B,MAAMW,EAASN,EAAIO,YACnB,IAAKD,EACD,MAAM,IAAIE,MAAM,sEAQdR,EAAIG,cAAcM,IAAI,4BAItBH,EAAOI,gBAAgB,UAnB3BC,EAAAA,EAAAA,KAAoBhB,cAuB9BC,KAAKC,SAAS,CACVe,MAAOxB,EAAMyB,MAErB,CAAE,MAAOC,GACLC,EAAAA,EAAOjB,MAAM,4BAA6BgB,GAK1ClB,KAAKC,SAAS,CACVC,OAAO,GAEf,MACHJ,EAAAA,EAAAA,GAAA,iBAEkB,KACfE,KAAKJ,MAAMwB,YAAW,EAAM,KAC/BtB,EAAAA,EAAAA,GAAA,eAEgB,KACbE,KAAKJ,MAAMwB,YAAW,EAAK,IApE3BpB,KAAKqB,MAAQ,CACTL,MAAOxB,EAAM8B,UACbC,WAAY,GACZC,iBAAiB,EACjBC,kBAAmB,GACnBC,QAAQ,EACRC,YAAY,EAEpB,CAEOC,iBAAAA,GACH5B,KAAK6B,cACT,CA2DQC,eAAAA,GACJ,OACIpC,EAAAA,cAAA,WACIA,EAAAA,cAACqC,EAAAA,EAAO,MAGpB,CAEQC,eAAAA,GACJ,OACItC,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAIuC,EAAAA,EAAAA,IAAG,2CACPvC,EAAAA,cAACwC,EAAAA,EAAa,CAACC,eAAeF,EAAAA,EAAAA,IAAG,aAAcG,qBAAsBpC,KAAKqC,OAAQC,WAAW,IAGzG,CAEQC,aAAAA,CAAcvB,GAClB,OAAQA,GACJ,KAAKxB,EAAM8B,UACP,OAAOW,EAAAA,EAAAA,IAAG,uCACd,KAAKzC,EAAMyB,KACP,OAAOgB,EAAAA,EAAAA,IAAG,sCACd,QACI,OAAOA,EAAAA,EAAAA,IAAG,oCAEtB,CAEOO,MAAAA,GACH,IAAIC,EACJ,GAAIzC,KAAKqB,MAAMnB,MACXuC,EACI/C,EAAAA,cAAA,WACIA,EAAAA,cAAA,UAAIuC,EAAAA,EAAAA,IAAG,6CACPvC,EAAAA,cAACwC,EAAAA,EAAa,CACVC,eAAeF,EAAAA,EAAAA,IAAG,gBAClBG,qBAAsBpC,KAAK6B,aAC3BS,WAAW,EACXI,SAAU1C,KAAK0C,iBAK3B,OAAQ1C,KAAKqB,MAAML,OACf,KAAKxB,EAAM8B,UACPmB,EAAUzC,KAAK8B,kBACf,MACJ,KAAKtC,EAAMyB,KACPwB,EAAUzC,KAAKgC,kBAK3B,OACItC,EAAAA,cAACiD,EAAAA,EAAU,CACPC,UAAU,2BACVxB,WAAYpB,KAAKJ,MAAMwB,WACvByB,MAAO7C,KAAKuC,cAAcvC,KAAKqB,MAAML,OACrCsB,UAAW,CAAC9C,EAAMyB,MAAM6B,SAAS9C,KAAKqB,MAAML,QAE5CtB,EAAAA,cAAA,WAAM+C,GAGlB,E","sources":["webpack://soc-connect/./src/async-components/views/dialogs/security/CreateKeyBackupDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2019, 2020 The connect.socjsc.com Foundation C.I.C.\r\nCopyright 2018, 2019 New Vector Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX } from \"react\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\r\nimport { _t } from \"../../../../languageHandler\";\r\nimport { accessSecretStorage, withSecretStorageKeyCache } from \"../../../../SecurityManager\";\r\nimport Spinner from \"../../../../components/views/elements/Spinner\";\r\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\r\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\r\n\r\nenum Phase {\r\n    BackingUp = \"backing_up\",\r\n    Done = \"done\",\r\n}\r\n\r\ninterface IProps {\r\n    onFinished(done?: boolean): void;\r\n}\r\n\r\ninterface IState {\r\n    phase: Phase;\r\n    passPhrase: string;\r\n    passPhraseValid: boolean;\r\n    passPhraseConfirm: string;\r\n    copied: boolean;\r\n    downloaded: boolean;\r\n    error?: boolean;\r\n}\r\n\r\n/**\r\n * Walks the user through the process of setting up e2e key backups to a new backup, and storing the decryption key in\r\n * SSSS.\r\n *\r\n * Uses {@link accessSecretStorage}, which means that if 4S is not already configured, it will be bootstrapped (which\r\n * involves displaying an {@link CreateSecretStorageDialog} so the user can enter a passphrase and/or download the 4S\r\n * key).\r\n */\r\nexport default class CreateKeyBackupDialog extends React.PureComponent<IProps, IState> {\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            phase: Phase.BackingUp,\r\n            passPhrase: \"\",\r\n            passPhraseValid: false,\r\n            passPhraseConfirm: \"\",\r\n            copied: false,\r\n            downloaded: false,\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.createBackup();\r\n    }\r\n\r\n    private createBackup = async (): Promise<void> => {\r\n        this.setState({\r\n            error: undefined,\r\n        });\r\n        const cli = MatrixClientPeg.safeGet();\r\n        try {\r\n            // Check if 4S already set up\r\n            const secretStorageAlreadySetup = await cli.secretStorage.hasKey();\r\n\r\n            if (!secretStorageAlreadySetup) {\r\n                // bootstrap secret storage; that will also create a backup version\r\n                await accessSecretStorage(async (): Promise<void> => {\r\n                    // do nothing, all is now set up correctly\r\n                });\r\n            } else {\r\n                await withSecretStorageKeyCache(async () => {\r\n                    const crypto = cli.getCrypto();\r\n                    if (!crypto) {\r\n                        throw new Error(\"End-to-end encryption is disabled - unable to create backup.\");\r\n                    }\r\n\r\n                    // Before we reset the backup, let's make sure we can access secret storage, to\r\n                    // reduce the chance of us getting into a broken state where we have an outdated\r\n                    // secret in secret storage.\r\n                    // `SecretStorage.get` will ask the user to enter their passphrase/key if necessary;\r\n                    // it will then be cached for the actual backup reset operation.\r\n                    await cli.secretStorage.get(\"m.megolm_backup.v1\");\r\n\r\n                    // We now know we can store the new backup key in secret storage, so it is safe to\r\n                    // go ahead with the reset.\r\n                    await crypto.resetKeyBackup();\r\n                });\r\n            }\r\n\r\n            this.setState({\r\n                phase: Phase.Done,\r\n            });\r\n        } catch (e) {\r\n            logger.error(\"Error creating key backup\", e);\r\n            // TODO: If creating a version succeeds, but backup fails, should we\r\n            // delete the version, disable backup, or do nothing?  If we just\r\n            // disable without deleting, we'll enable on next app reload since\r\n            // it is trusted.\r\n            this.setState({\r\n                error: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private onCancel = (): void => {\r\n        this.props.onFinished(false);\r\n    };\r\n\r\n    private onDone = (): void => {\r\n        this.props.onFinished(true);\r\n    };\r\n\r\n    private renderBusyPhase(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <Spinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderPhaseDone(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <p>{_t(\"settings|key_backup|backup_in_progress\")}</p>\r\n                <DialogButtons primaryButton={_t(\"action|ok\")} onPrimaryButtonClick={this.onDone} hasCancel={false} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private titleForPhase(phase: Phase): string {\r\n        switch (phase) {\r\n            case Phase.BackingUp:\r\n                return _t(\"settings|key_backup|backup_starting\");\r\n            case Phase.Done:\r\n                return _t(\"settings|key_backup|backup_success\");\r\n            default:\r\n                return _t(\"settings|key_backup|create_title\");\r\n        }\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        let content;\r\n        if (this.state.error) {\r\n            content = (\r\n                <div>\r\n                    <p>{_t(\"settings|key_backup|cannot_create_backup\")}</p>\r\n                    <DialogButtons\r\n                        primaryButton={_t(\"action|retry\")}\r\n                        onPrimaryButtonClick={this.createBackup}\r\n                        hasCancel={true}\r\n                        onCancel={this.onCancel}\r\n                    />\r\n                </div>\r\n            );\r\n        } else {\r\n            switch (this.state.phase) {\r\n                case Phase.BackingUp:\r\n                    content = this.renderBusyPhase();\r\n                    break;\r\n                case Phase.Done:\r\n                    content = this.renderPhaseDone();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <BaseDialog\r\n                className=\"mx_CreateKeyBackupDialog\"\r\n                onFinished={this.props.onFinished}\r\n                title={this.titleForPhase(this.state.phase)}\r\n                hasCancel={[Phase.Done].includes(this.state.phase)}\r\n            >\r\n                <div>{content}</div>\r\n            </BaseDialog>\r\n        );\r\n    }\r\n}\r\n"],"names":["Phase","CreateKeyBackupDialog","React","constructor","props","super","_defineProperty","async","this","setState","error","undefined","cli","MatrixClientPeg","safeGet","secretStorage","hasKey","withSecretStorageKeyCache","crypto","getCrypto","Error","get","resetKeyBackup","accessSecretStorage","phase","Done","e","logger","onFinished","state","BackingUp","passPhrase","passPhraseValid","passPhraseConfirm","copied","downloaded","componentDidMount","createBackup","renderBusyPhase","Spinner","renderPhaseDone","_t","DialogButtons","primaryButton","onPrimaryButtonClick","onDone","hasCancel","titleForPhase","render","content","onCancel","BaseDialog","className","title","includes"],"sourceRoot":""}