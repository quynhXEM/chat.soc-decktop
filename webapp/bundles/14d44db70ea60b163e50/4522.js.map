{"version":3,"file":"bundles/14d44db70ea60b163e50/4522.js","mappings":"40BA4BO,MAAMA,EAAuC,CAChDC,SAAU,GACVC,QAAS,MAME,MAAMC,EAGVC,WAAAA,CAAYC,IAAiCC,EAAAA,EAAAA,GAAA,wBAAAA,EAAAA,EAAAA,GAAA,eAID,OAAIA,EAAAA,EAAAA,GAAA,iBACnB,KAAEA,EAAAA,EAAAA,GAAA,yBACV,IAACA,EAAAA,EAAAA,GAAA,kBAEV,IAAKA,EAAAA,EAAAA,GAAA,cAETC,MAAOC,EAA2BC,EAAU,OACvD,IAAKD,EACD,OAEJE,KAAKC,QAAUH,EAAOI,WAAW,MACjCF,KAAKG,UAAY,GACjB,MAAMC,EAAQJ,KAAKL,QAAQJ,SAC3B,KAAOS,KAAKG,UAAUE,OAASD,GAC3BJ,KAAKG,UAAUG,KAAKN,KAAKO,cAAc,CAAC,EAAcT,EAAOU,MAAOV,EAAOW,SAE/ET,KAAKU,WAAY,EACjBC,sBAAsBX,KAAKY,YACvBb,GACAc,OAAOC,WAAWd,KAAKe,KAAMhB,EACjC,KACHH,EAAAA,EAAAA,GAAA,aAEaC,UACVG,KAAKU,WAAY,CAAK,KACzBd,EAAAA,EAAAA,GAAA,sBAEuB,CAACoB,EAAmBR,EAAeC,KACvDO,EAASC,EAAIC,KAAKC,SAAWX,EAC7BQ,EAASI,EAAIF,KAAKC,UAAYV,EAC9BO,EAASK,KAAOL,EAASC,EACzBD,EAASxB,QAAUQ,KAAKL,QAAQH,QAA0B,EAAhB0B,KAAKC,SAAe,EACvDH,MACVpB,EAAAA,EAAAA,GAAA,mBAEoB,KACjB,GAAKI,KAAKC,SAAYD,KAAKC,QAAQH,OAGnC,GAA8B,IAA1BE,KAAKG,UAAUE,OACfL,KAAKC,QAAQqB,UAAU,EAAG,EAAGtB,KAAKC,QAAQH,OAAOU,MAAOR,KAAKC,QAAQH,OAAOW,YACzE,EACec,KAAKC,MAAQxB,KAAKyB,mBApDrB,KAqDyBzB,KAAKyB,qBAEzCzB,KAAKC,QAAQqB,UAAU,EAAG,EAAGtB,KAAKC,QAAQH,OAAOU,MAAOR,KAAKC,QAAQH,OAAOW,QAE5ET,KAAKyB,kBAAoBF,KAAKC,MAC9BxB,KAAK0B,4BAETf,sBAAsBX,KAAKY,WAC/B,KAtDAZ,KAAKL,QAAOgC,EAAAA,EAAA,GAAQrC,GAAmBK,EAC3C,CAwDQ+B,wBAAAA,GACJ,GAAK1B,KAAKC,SAAYD,KAAKC,QAAQH,OAAnC,CAGAE,KAAKC,QAAQ2B,KAAO,eACpB,IAAK,MAAMZ,KAAYa,EAAAA,EAAAA,IAAe7B,KAAKG,WACvCa,EAASI,GAAKJ,EAASxB,QAEvBQ,KAAKC,QAAQ6B,OACb9B,KAAKC,QAAQ8B,SAxEX,KAwE2Bf,EAASC,EAAGD,EAASI,GAClDpB,KAAKC,QAAQ+B,SAPjB,CASJ,E","sources":["webpack://soc-connect/./src/effects/spaceinvaders/index.ts"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021-2023 The connect.socjsc.com Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n */\r\nimport type ICanvasEffect from \"../ICanvasEffect\";\r\nimport { arrayFastClone } from \"../../utils/arrays\";\r\n\r\nexport type SpaceInvadersOptions = {\r\n    /**\r\n     * The maximum number of invaders to render at a given time\r\n     */\r\n    maxCount: number;\r\n    /**\r\n     * The amount of gravity to apply to the invaders\r\n     */\r\n    gravity: number;\r\n};\r\n\r\ntype Invader = {\r\n    x: number;\r\n    y: number;\r\n    xCol: number;\r\n    gravity: number;\r\n};\r\n\r\nexport const DefaultOptions: SpaceInvadersOptions = {\r\n    maxCount: 50,\r\n    gravity: 0.005,\r\n};\r\n\r\nconst KEY_FRAME_INTERVAL = 15; // 15ms, roughly\r\nconst GLYPH = \"ðŸ‘¾\";\r\n\r\nexport default class SpaceInvaders implements ICanvasEffect {\r\n    private readonly options: SpaceInvadersOptions;\r\n\r\n    public constructor(options: { [key: string]: any }) {\r\n        this.options = { ...DefaultOptions, ...options };\r\n    }\r\n\r\n    private context: CanvasRenderingContext2D | null = null;\r\n    private particles: Array<Invader> = [];\r\n    private lastAnimationTime = 0;\r\n\r\n    public isRunning = false;\r\n\r\n    public start = async (canvas: HTMLCanvasElement, timeout = 3000): Promise<void> => {\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n        this.context = canvas.getContext(\"2d\");\r\n        this.particles = [];\r\n        const count = this.options.maxCount;\r\n        while (this.particles.length < count) {\r\n            this.particles.push(this.resetParticle({} as Invader, canvas.width, canvas.height));\r\n        }\r\n        this.isRunning = true;\r\n        requestAnimationFrame(this.renderLoop);\r\n        if (timeout) {\r\n            window.setTimeout(this.stop, timeout);\r\n        }\r\n    };\r\n\r\n    public stop = async (): Promise<void> => {\r\n        this.isRunning = false;\r\n    };\r\n\r\n    private resetParticle = (particle: Invader, width: number, height: number): Invader => {\r\n        particle.x = Math.random() * width;\r\n        particle.y = Math.random() * -height;\r\n        particle.xCol = particle.x;\r\n        particle.gravity = this.options.gravity + Math.random() * 6 + 4;\r\n        return particle;\r\n    };\r\n\r\n    private renderLoop = (): void => {\r\n        if (!this.context || !this.context.canvas) {\r\n            return;\r\n        }\r\n        if (this.particles.length === 0) {\r\n            this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n        } else {\r\n            const timeDelta = Date.now() - this.lastAnimationTime;\r\n            if (timeDelta >= KEY_FRAME_INTERVAL || !this.lastAnimationTime) {\r\n                // Clear the screen first\r\n                this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\r\n\r\n                this.lastAnimationTime = Date.now();\r\n                this.animateAndRenderInvaders();\r\n            }\r\n            requestAnimationFrame(this.renderLoop);\r\n        }\r\n    };\r\n\r\n    private animateAndRenderInvaders(): void {\r\n        if (!this.context || !this.context.canvas) {\r\n            return;\r\n        }\r\n        this.context.font = \"50px Twemoji\";\r\n        for (const particle of arrayFastClone(this.particles)) {\r\n            particle.y += particle.gravity;\r\n\r\n            this.context.save();\r\n            this.context.fillText(GLYPH, particle.x, particle.y);\r\n            this.context.restore();\r\n        }\r\n    }\r\n}\r\n"],"names":["DefaultOptions","maxCount","gravity","SpaceInvaders","constructor","options","_defineProperty","async","canvas","timeout","this","context","getContext","particles","count","length","push","resetParticle","width","height","isRunning","requestAnimationFrame","renderLoop","window","setTimeout","stop","particle","x","Math","random","y","xCol","clearRect","Date","now","lastAnimationTime","animateAndRenderInvaders","_objectSpread","font","arrayFastClone","save","fillText","restore"],"sourceRoot":""}