name: Build Electron App

on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: build-${{ github.run_id }}
          release_name: "Build ${{ github.run_number }}"
          draft: true
          prerelease: true

  build:
    needs: create-release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: |
          npm install
          npm run build:ts
          npm run build:res

      - name: Build Electron App
        run: npm run build

      - name: Find build file
        id: find_file
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            FILE=$(ls dist/*.exe | head -n 1)
          else
            FILE=$(ls dist/*.AppImage | head -n 1)
          fi
          EXT="${FILE##*.}"
          echo "file=$FILE" >> $GITHUB_OUTPUT
          echo "ext=$EXT" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload build to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_file.outputs.file }}
          asset_name: ${{ matrix.os }}-build-${{ github.run_number }}.${{ steps.find_file.outputs.ext }}
          asset_content_type: application/octet-stream

