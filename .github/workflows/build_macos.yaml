# This workflow relies on actions/cache to store the hak dependency artifacts as they take a long time to build
# Due to this extra care must be taken to only ever run all build_* scripts against the same branch to ensure
# the correct cache scoping, and additional care must be taken to not run untrusted actions on the develop branch.
on:
  workflow_dispatch:
    secrets:
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      APPLE_TEAM_ID:
        required: false
      APPLE_CSC_KEY_PASSWORD:
        required: false
      APPLE_CSC_LINK:
        required: false
    inputs:
      version:
        type: string
        required: false
        description: "Version string to override the one in package.json, used for non-release builds"
      sign:
        type: string
        required: false
        description: "Whether to sign & notarise the build, requires 'packages.element.io' environment"
      base-url:
        type: string
        required: false
        description: "The URL to which the output will be deployed."
      blob_report:
        type: boolean
        required: false
        description: "Whether to run the blob report"

permissions: {} # No permissions required

jobs:
  build:
    runs-on: macos-14
    environment: packages.element.io
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: webapp

      - name: Cache .hak
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ hashFiles('hakHash', 'electronVersion') }}
          path: ./.hak

      - name: Install Rust
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          rustup toolchain install stable --profile minimal --no-self-update
          rustup default stable
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: "yarn"

      - name: Install Deps
        run: yarn install --frozen-lockfile

      - name: Install setuptools
        run: pip3 install setuptools

      - name: Build Natives
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn build:native:universal

      - name: "[Signed] Build App"
        if: inputs.sign != ''
        run: yarn build:universal --publish never
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.APPLE_CSC_LINK }}
          ED_NIGHTLY: ${{ inputs.version }}

      - name: "[Unsigned] Build App"
        if: inputs.sign == ''
        run: yarn build:universal --publish never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_id }}
          release_name: "macOS Build ${{ github.run_number }}"
          draft: true
          prerelease: true

      - name: Upload DMG to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/*.dmg
          asset_name: macOS-${{ github.run_number }}.dmg
          asset_content_type: application/octet-stream
