# This workflow relies on actions/cache to store the hak dependency artifacts as they take a long time to build
# Due to this extra care must be taken to only ever run all build_* scripts against the same branch to ensure
# the correct cache scoping, and additional care must be taken to not run untrusted actions on the develop branch.
on:
  workflow_dispatch:
    secrets:
      APPLE_ID:
        required: false
      APPLE_ID_PASSWORD:
        required: false
      APPLE_TEAM_ID:
        required: false
      APPLE_CSC_KEY_PASSWORD:
        required: false
      APPLE_CSC_LINK:
        required: false
    inputs:
      version:
        type: string
        required: false
        description: "Version string to override the one in package.json, used for non-release builds"
      sign:
        type: string
        required: false
        description: "Whether to sign & notarise the build, requires 'packages.element.io' environment"
      base-url:
        type: string
        required: false
        description: "The URL to which the output will be deployed."
      blob_report:
        type: boolean
        required: false
        description: "Whether to run the blob report"
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions: {} # No permissions required

jobs:
  build:
    runs-on: macos-14
    environment: packages.element.io
    steps:
      - uses: actions/checkout@v4

      - name: Debug Repository Information
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Repository Name: ${{ github.event.repository.name }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Event: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Current directory: $(pwd)"
          echo "Repository contents:"
          ls -la
          echo "Git remote info:"
          git remote -v || echo "No git remotes found"

      - name: Fetch Element Web
        run: |
          echo "Fetching Element Web package..."
          yarn run fetch --noverify --cfgdir ""
          echo "Creating webapp.asar..."
          yarn run asar-webapp

      - name: Cache .hak
        id: cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ hashFiles('hakHash', 'electronVersion') }}
          path: ./.hak

      - name: Install Rust
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          rustup toolchain install stable --profile minimal --no-self-update
          rustup default stable
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: "yarn"

      - name: Install Dependencies
        run: |
          echo "Installing Node.js dependencies..."
          yarn install --frozen-lockfile
          echo "Installing Python setuptools..."
          pip3 install setuptools

      - name: Build Natives
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn build:native:universal

      - name: Build App (Signed)
        if: inputs.sign != '' && inputs.sign != 'false'
        run: |
          echo "Building signed macOS app..."
          yarn build:universal --publish never
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.APPLE_CSC_LINK }}
          ED_NIGHTLY: ${{ inputs.version }}

      - name: Build App (Unsigned)
        if: inputs.sign == '' || inputs.sign == 'false'
        run: |
          echo "Building unsigned macOS app..."
          yarn build:universal --publish never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
          ED_NIGHTLY: ${{ inputs.version }}

      - name: Create GitHub Release and Upload DMG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the DMG file
          DMG_FILE=$(find dist -name "*.dmg" -type f | head -n 1)
          if [ -z "$DMG_FILE" ]; then
            echo "No DMG file found in dist directory"
            exit 1
          fi
          
          # Create release and upload DMG
          gh release create "build-${{ github.run_id }}" \
            --title "macOS Build ${{ github.run_number }}" \
            --notes "Automated macOS build from workflow run ${{ github.run_id }}" \
            --draft \
            --prerelease \
            "$DMG_FILE"
